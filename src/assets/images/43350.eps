%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1505.m00.i121.n039.P.c25.256255714 Vector muscle man bodybuilder.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: ??????? ??????
%%CreationDate: 5/5/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmp:ModifyDate>2015-05-05T09:33:37+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-05-05T09:33:36+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-05-05T09:33:37+03:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FWCefvN3mZdVtvJ3kmGGXzTfwm5uL653ttNsuXp/WZlH23Z6rFH+0&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:385D4AA9F0F2E41193A2C8CFC78D0660</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:385D4AA9F0F2E41193A2C8CFC78D0660</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:EFC2C6F66AF2E4119008F12FFF6AB40A</stRef:instanceID>
            <stRef:documentID>xmp.did:EFC2C6F66AF2E4119008F12FFF6AB40A</stRef:documentID>
            <stRef:originalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EFC2C6F66AF2E4119008F12FFF6AB40A</stEvt:instanceID>
                  <stEvt:when>2015-05-04T22:58:16+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:385D4AA9F0F2E41193A2C8CFC78D0660</stEvt:instanceID>
                  <stEvt:when>2015-05-05T09:33:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <dc:format>application/postscript</dc:format>
         <pdf:Producer>Adobe PDF Library 9.9</pdf:Producer>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
230.236 72.0591 mo
229.514 71.1084 225.376 70.3281 226.648 73.3335 cv
226.746 73.5527 227.639 73.4531 227.639 73.4531 cv
228.414 72.6533 228.797 72.8628 229.963 72.8647 cv
230 72.8833 li
230.926 73.2588 231.412 72.8589 231.59 72.2173 cv
232.637 74.0254 234.578 75.7021 235.854 77.3945 cv
235.869 77.418 235.889 77.4434 235.906 77.4648 cv
235.996 77.5869 236.084 77.7095 236.166 77.832 cv
236.164 77.8252 236.162 77.8184 236.16 77.8115 cv
236.162 77.8179 236.17 77.8262 236.174 77.832 cv
236.162 77.8032 236.146 77.7754 236.135 77.7466 cv
235.047 74.8735 232.592 69.4229 230.172 67.1909 cv
230.91 69.084 li
230.172 67.1909 230.986 69.6104 230.9 69.5459 cv
231.166 70.5459 231.176 71.6514 230.236 72.0591 cv
cp
0 0 0 rgb
f
249.82 81.3452 mo
250.049 81.5732 li
250.02 81.7246 249.652 81.6128 249.861 82.0005 cv
251.498 80.5952 252.006 78.6182 250.254 77.0166 cv
251.975 76.0684 252.289 74.2305 250.088 73.333 cv
250.033 70.749 252.107 72.189 252.553 73.6328 cv
253.324 72.1821 253.654 69.9458 252.324 68.5654 cv
250.969 69.625 249.533 72.6284 249.188 74.2842 cv
248.883 75.748 249.441 76.7695 249.648 78.1045 cv
249.813 79.1426 249.584 80.3892 249.82 81.3452 cv
cp
f
236.754 48.2607 mo
234.656 48.5732 228.479 48.2822 227.723 50.7671 cv
226.955 55.6211 231.654 51.8506 233.133 50.938 cv
234.084 50.3506 239.193 49.6543 239.816 49.6729 cv
241.457 49.7227 243.84 49.6182 245.189 52.2505 cv
244.863 51.4185 243.84 49.6182 243.273 49.2861 cv
241.982 47.4951 238.174 48.0503 236.754 48.2607 cv
cp
f
247.998 132.376 mo
248.68 135.884 256.063 134.03 258.293 133.572 cv
263.232 132.555 267.754 132.159 272.646 133.116 cv
282.473 135.038 288.662 141.818 292.9 150.532 cv
291.488 146.346 289.455 141.176 286.555 137.833 cv
285.365 136.461 283.978 135.515 282.859 134.271 cv
282.873 132.678 282.939 131.124 283.328 129.574 cv
282.688 130.47 281.828 131.015 281.029 131.53 cv
274.707 132.475 268.297 130.273 261.906 131.516 cv
258.908 132.099 256.193 132.801 253.01 132.604 cv
249.277 132.373 248.758 131.125 247.365 128.116 cv
246.92 130.124 248.59 131.969 249.82 133.288 cv
247.998 132.376 li
cp
f
214.4 77.4648 mo
214.417 77.4434 214.436 77.418 214.453 77.3945 cv
215.729 75.7021 217.67 74.0254 218.714 72.2173 cv
218.894 72.8589 219.38 73.2588 220.307 72.8833 cv
220.343 72.8647 li
221.51 72.8628 223.413 74.4351 223.496 73.5278 cv
223.757 73.7549 223.66 73.542 223.757 73.3228 cv
224.85 70.6318 220.792 71.1084 220.069 72.0591 cv
219.13 71.6514 219.14 70.5459 219.406 69.5459 cv
219.32 69.6104 220.348 67.0938 220.273 67.1909 cv
217.855 69.4229 215.258 74.8735 214.172 77.7466 cv
214.16 77.7754 214.144 77.8032 214.132 77.832 cv
214.136 77.8262 214.143 77.8179 214.146 77.8115 cv
214.144 77.8184 214.141 77.8252 214.139 77.832 cv
214.222 77.7095 214.31 77.5869 214.4 77.4648 cv
cp
f
197.982 68.5654 mo
196.653 69.9458 196.983 72.1821 197.755 73.6328 cv
198.2 72.189 200.275 70.749 200.22 73.333 cv
198.019 74.2305 198.334 76.0684 200.054 77.0166 cv
198.302 78.6182 198.809 80.5952 200.447 82.0005 cv
200.657 81.6128 200.288 81.7246 200.26 81.5732 cv
200.488 81.3452 li
200.723 80.3892 200.496 79.1426 200.659 78.1045 cv
200.868 76.7695 201.427 75.748 201.119 74.2842 cv
200.773 72.6284 199.339 69.625 197.982 68.5654 cv
cp
f
205.896 51.3833 mo
206.207 51.022 206.576 50.7095 207.021 50.4839 cv
207.75 50.1157 208.537 49.9302 209.329 49.9258 cv
212.404 48.8481 216.06 50.7915 217.396 51.6328 cv
220.078 53.3208 222.44 55.5991 221.674 50.7456 cv
220.917 48.2607 214.742 48.5513 212.642 48.2397 cv
211.222 48.0283 207.447 47.5869 206.155 49.3789 cv
205.445 50.2246 204.441 51.8833 204.221 53.252 cv
204.452 52.8159 204.735 52.4077 205.087 52.0508 cv
205.338 51.7969 205.61 51.5776 205.896 51.3833 cv
cp
f
224.995 79.1782 mo
223.258 78.8818 222.197 77.4224 219.977 78.1284 cv
218.152 78.709 218.229 80.4468 214.965 80.0151 cv
215.922 81.5376 217.61 81.8979 219.038 81.0479 cv
221.069 80.3521 222.975 80.9678 224.995 80.5859 cv
227.016 80.9678 229.258 80.041 231.291 80.7373 cv
232.717 81.5874 233.941 80.981 235.24 79.7046 cv
233.262 79.4927 231.836 78.709 230.012 78.1284 cv
227.793 77.4224 226.732 78.8818 224.995 79.1782 cv
cp
f
217.398 82.501 mo
217.396 82.564 217.404 82.6206 217.405 82.6821 cv
217.439 82.6538 217.486 82.603 217.398 82.501 cv
cp
f
217.407 82.7144 mo
217.407 82.7036 217.405 82.6929 217.405 82.6821 cv
217.382 82.7012 217.369 82.71 217.407 82.7144 cv
cp
f
217.398 82.501 mo
217.484 82.5483 217.508 82.6846 217.59 82.7241 cv
217.486 82.7202 217.434 82.7183 217.407 82.7144 cv
217.471 85.6143 220.598 86.479 224.85 86.2759 cv
228.791 86.0874 231.893 86.3574 232.908 82.501 cv
231.266 83.9653 229.363 84.0322 224.867 84.2646 cv
223.217 84.0625 219.54 84.3818 217.398 82.501 cv
cp
f
177.662 133.116 mo
182.554 132.159 187.075 132.555 192.014 133.572 cv
194.244 134.03 201.629 135.884 202.31 132.376 cv
200.488 133.288 li
201.717 131.969 203.389 130.124 202.942 128.116 cv
201.551 131.125 201.031 132.373 197.298 132.604 cv
194.115 132.801 191.4 132.099 188.402 131.516 cv
182.012 130.273 175.601 132.475 169.279 131.53 cv
168.479 131.015 167.62 130.47 166.979 129.574 cv
167.368 131.124 167.435 132.678 167.448 134.271 cv
166.328 135.515 164.942 136.461 163.752 137.833 cv
160.853 141.176 158.82 146.346 157.408 150.532 cv
161.646 141.818 167.836 135.038 177.662 133.116 cv
cp
f
148.407 321.172 mo
148.531 323.556 148.738 325.229 150.292 328.831 cv
150.596 328.223 li
151.117 321.452 150.02 317.894 149.286 312.685 cv
149.389 316.272 148.222 317.577 148.407 321.172 cv
cp
f
135.226 288.211 mo
137.865 294.422 139.803 302.96 140.306 310.693 cv
140.167 313.118 140.302 315.358 140.332 317.561 cv
140.311 317.876 140.296 318.196 140.269 318.503 cv
140.332 317.571 li
140.368 320.177 140.254 322.733 139.357 325.489 cv
141.864 320.076 142.189 315.401 141.721 308.174 cv
141.456 302.683 138.454 294.102 135.226 288.211 cv
cp
f
242.006 79.7046 mo
241.893 77.6563 241.455 75.6548 241.965 73.6416 cv
242.482 71.5972 243.947 69.3501 243.828 67.1909 cv
242.885 69.4165 240.566 72.1621 240.338 74.5098 cv
240.502 76.1416 241.385 78.1748 242.006 79.7046 cv
cp
f
240.328 74.5869 mo
240.33 74.561 240.336 74.5352 240.338 74.5098 cv
240.336 74.4849 240.33 74.459 240.328 74.4351 cv
240.328 74.5869 li
cp
f
209.663 74.5869 mo
209.663 74.4351 li
209.66 74.459 209.654 74.4849 209.652 74.5098 cv
209.654 74.5352 209.66 74.561 209.663 74.5869 cv
cp
f
208.024 73.6416 mo
208.534 75.6548 208.096 77.6563 207.983 79.7046 cv
208.604 78.1748 209.488 76.1416 209.652 74.5098 cv
209.424 72.1621 207.104 69.4165 206.162 67.1909 cv
206.042 69.3501 207.508 71.5972 208.024 73.6416 cv
cp
f
214.155 42.4131 mo
215.552 42.3804 217.208 42.6328 218.998 43.2642 cv
219.898 43.5615 220.806 43.9995 221.806 44.4038 cv
222.304 44.5991 222.816 44.7852 223.365 44.9038 cv
223.909 45.0249 224.513 45.0449 225.088 44.8877 cv
226.227 44.5586 227.176 43.9546 228.135 43.6245 cv
229.096 43.2705 230.051 43.0483 230.963 42.9014 cv
232.795 42.6143 234.471 42.6206 235.869 42.7432 cv
237.27 42.8672 238.396 43.1191 239.162 43.3799 cv
239.932 43.6348 240.328 43.9175 240.328 43.9155 cv
240.328 43.9185 239.957 43.5669 239.199 43.1987 cv
238.447 42.8257 237.324 42.4204 235.91 42.1431 cv
234.498 41.8682 232.795 41.7065 230.9 41.8882 cv
229.955 41.9834 228.961 42.1655 227.945 42.5034 cv
226.922 42.8271 225.919 43.4258 224.938 43.7017 cv
223.981 43.9722 222.984 43.6289 222.01 43.2886 cv
221.046 42.9326 220.081 42.52 219.149 42.2705 cv
217.289 41.7319 215.56 41.625 214.134 41.8115 cv
212.705 41.9917 211.583 42.4155 210.826 42.749 cv
210.067 43.085 209.664 43.3325 209.663 43.3267 cv
209.663 43.3325 210.084 43.1563 210.857 42.9312 cv
211.63 42.709 212.758 42.4395 214.155 42.4131 cv
cp
f
229.031 131.409 mo
226.861 132.485 223.257 132.515 221.342 131.693 cv
221.342 132.149 li
222.384 136.826 228.529 135.615 229.031 131.409 cv
cp
f
143.885 307.566 mo
144.651 313.654 144.651 313.654 144.493 316.68 cv
144.485 316.82 144.472 316.982 144.456 317.158 cv
144.428 317.444 144.389 317.781 144.343 318.142 cv
144.34 318.143 144.336 318.144 144.333 318.144 cv
144.226 318.898 144.083 319.736 143.954 320.583 cv
143.974 320.58 143.992 320.575 144.011 320.573 cv
143.585 323.632 143.109 327.293 143.628 328.459 cv
146.041 325.964 146.074 313.939 144.189 308.782 cv
143.885 307.566 li
cp
f
236.844 60.1383 mo
236.796 60.1622 236.528 60.1705 236.755 60.1061 cv
237.655 59.9073 238.36 59.1622 238.262 58.256 cv
238.794 58.256 240.367 58.7158 241.289 59.2529 cv
240.611 59.8291 237.844 60.505 236.844 60.1383 cv
cp
231.285 59.0957 mo
231.52 58.3911 233.524 58.3121 234.161 58.256 cv
234.487 59.0318 234.467 59.7252 235.585 59.9957 cv
234.231 60.2076 232.08 59.7173 231.285 59.0957 cv
cp
231.531 60.77 mo
231.512 60.709 231.488 60.6406 231.465 60.5562 cv
231.496 60.5713 231.52 60.7031 231.531 60.77 cv
cp
229.432 59.3345 mo
229.428 59.334 229.424 59.333 229.418 59.3325 cv
229.424 59.333 229.428 59.333 229.432 59.3335 cv
229.432 59.3345 li
cp
243.068 59.478 mo
237.768 54.3818 230.02 57.8745 230.02 57.8745 cv
231.818 55.5366 237.436 54.9614 241.225 56.7671 cv
238.547 52.5259 229.611 54.6343 229.369 58.6299 cv
229.361 58.7573 229.361 58.8872 229.373 59.02 cv
229.373 59.02 229.414 59.5029 229.434 59.46 cv
229.477 59.8501 229.639 60.2031 229.865 60.5166 cv
229.967 60.6904 230.092 60.8574 230.234 61.0156 cv
230.227 61.0103 li
230.869 61.9727 231.867 62.5293 232.939 62.8628 cv
233.045 62.9209 233.146 62.978 233.246 63.0352 cv
233.207 63.0005 233.172 62.9614 233.133 62.9263 cv
233.84 63.126 235.922 63.8594 236.605 63.9175 cv
235.535 63.6353 233.041 62.3555 232.006 61.564 cv
231.758 61.1636 231.66 61.1191 231.541 60.7925 cv
231.539 60.7671 231.535 60.707 231.527 60.5859 cv
233.094 61.9751 237.695 61.1484 237.676 61.2661 cv
240.416 60.9438 240.416 60.9438 242.66 59.5996 cv
242.9 59.582 243.004 59.5454 243.068 59.478 cv
cp
f
236.755 60.1061 mo
236.78 60.1187 236.815 60.1275 236.844 60.1383 cv
236.864 60.1285 236.852 60.1168 236.755 60.1061 cv
cp
f
212.91 59.7095 mo
212.94 59.6993 212.974 59.691 212.999 59.6788 cv
212.902 59.689 212.89 59.6997 212.91 59.7095 cv
cp
f
211.62 57.94 mo
211.523 58.8164 212.1 59.4864 212.999 59.6788 cv
213.225 59.7408 212.96 59.7325 212.91 59.7095 cv
211.91 60.064 209.108 59.4561 208.431 58.8984 cv
209.352 58.3789 210.555 58.3267 211.62 57.94 cv
cp
215.597 58.9678 mo
215.999 58.6714 215.889 57.9087 215.889 57.9087 cv
216.528 57.9737 217.787 58.2197 218.434 58.8003 cv
217.74 59.3657 215.969 59.7769 214.708 59.7437 cv
215.428 59.2481 215.428 59.2481 215.597 58.9678 cv
cp
218.116 60.77 mo
218.128 60.7026 218.152 60.5713 218.184 60.5562 cv
218.159 60.6406 218.138 60.709 218.116 60.77 cv
cp
220.216 59.3335 mo
220.22 59.333 220.225 59.333 220.23 59.3325 cv
220.226 59.333 220.22 59.334 220.216 59.3345 cv
220.216 59.3335 li
cp
218.12 60.5859 mo
218.112 60.707 218.108 60.7671 218.107 60.7925 cv
217.989 61.1191 217.891 61.1636 217.642 61.564 cv
216.606 62.3555 214.113 63.6353 213.041 63.9175 cv
213.726 63.8594 215.809 63.126 216.516 62.9263 cv
216.477 62.9614 216.442 63.0005 216.402 63.0352 cv
216.501 62.978 216.604 62.9209 216.708 62.8628 cv
217.782 62.5293 218.778 61.9727 219.423 61.0103 cv
219.414 61.0156 li
219.558 60.8574 219.682 60.6904 219.782 60.5166 cv
220.009 60.2031 220.17 59.8501 220.215 59.46 cv
220.235 59.5029 220.275 59.02 220.275 59.02 cv
220.616 54.7764 213.398 52.5195 208.423 56.7671 cv
212.213 54.9614 217.83 55.5366 219.628 57.8745 cv
219.628 57.8745 211.836 54.3931 206.58 59.478 cv
206.644 59.5454 206.748 59.582 206.988 59.5996 cv
209.232 60.9438 209.232 60.9438 211.973 61.2661 cv
211.953 61.1484 216.555 61.9751 218.12 60.5859 cv
cp
f
205.251 59.6196 mo
205.159 59.5923 204.221 58.8921 203.189 55.3672 cv
203.371 56.6538 203.74 62.4224 204.221 63.5361 cv
204.277 62.6279 204.221 59.8105 205.251 59.6196 cv
cp
f
213.398 78.4307 mo
210.257 83.2129 212.458 86.3042 214.965 87.9966 cv
214.965 87.9966 213.243 85.2671 213.124 83.0938 cv
213.02 81.2251 213.398 78.4307 213.398 78.4307 cv
cp
f
245.057 59.6196 mo
246.088 59.8105 246.031 62.6279 246.088 63.5361 cv
246.568 62.4224 246.938 56.6538 247.117 55.3672 cv
247.041 55.6289 246.746 56.5273 245.957 57.9736 cv
245.957 57.9736 245.205 58.8921 244.793 59.6196 cv
245.057 59.6196 li
cp
f
237.186 83.0938 mo
237.064 85.2671 235.344 87.9966 235.344 87.9966 cv
237.852 86.3042 240.051 83.2129 236.91 78.4307 cv
236.91 78.4307 237.287 81.2251 237.186 83.0938 cv
cp
f
220.094 96.0107 mo
220.353 96.1406 li
221.397 96.3926 222.917 97.0386 223.942 96.5381 cv
225.012 96.0171 224.563 95.3384 226.02 95.2598 cv
227.084 95.2021 227.473 96.5679 228.641 96.5322 cv
229.42 96.5078 231.984 95.9082 232.52 95.2788 cv
229.031 95.2788 228.584 93.7573 226.307 93.7573 cv
224.043 93.7573 222.154 95.9849 220.094 96.0107 cv
cp
f
224.86 40.0933 mo
227.385 40.0933 229.432 39.8901 229.432 39.6401 cv
229.432 39.3901 227.385 39.187 224.86 39.187 cv
222.334 39.187 220.288 39.3901 220.288 39.6401 cv
220.288 39.8901 222.334 40.0933 224.86 40.0933 cv
cp
f
423.621 355.971 mo
423.488 356.465 415.029 353.175 413.432 352.657 cv
411.457 357.648 406.387 369.227 402.971 373.974 cv
405.004 370.098 406.697 366.093 408.098 362.224 cv
409.328 359.29 410.441 356.066 411.379 352.626 cv
412.662 347.909 413.471 343.258 413.787 338.978 cv
417.643 340.875 421.563 342.632 425.416 344.536 cv
425.539 344.598 425.658 344.633 425.779 344.671 cv
425.596 346.397 425.332 348.207 424.977 350.09 cv
425.639 346.607 425.992 343.369 426.076 340.478 cv
425.746 333.692 425.469 328.663 419.988 327.869 cv
418.156 327.078 418.676 327.845 415.217 327.026 cv
415.352 325.786 415.32 325.996 415.414 324.8 cv
415.52 324.828 415.629 324.858 415.734 324.887 cv
418.4 325.614 420.797 326.301 421.832 326.546 cv
427.432 327.869 427.943 340.097 423.621 355.971 cv
cp
397.029 329.139 mo
394.07 340.938 388.703 363.388 380.676 378.05 cv
382.791 372.9 384.809 367.338 386.652 361.615 cv
388.498 356.636 390.201 351.198 391.678 345.441 cv
391.881 344.653 392.06 343.858 392.25 343.065 cv
393.756 337.244 394.92 331.542 395.318 326.723 cv
396.303 321.159 396.918 317.167 397.398 312.2 cv
397.412 312.081 397.424 311.961 397.438 311.843 cv
397.471 311.856 397.518 311.873 397.603 311.901 cv
402.971 313.711 407.943 315.57 412.934 317.291 cv
413.09 317.345 413.236 317.376 413.381 317.393 cv
413.379 320.588 412.879 330.862 412.5 334.5 cv
412.5 334.5 li
412.365 334.455 399.625 330.722 397.029 329.139 cv
cp
355.537 385.832 mo
355.537 385.831 355.537 385.831 355.539 385.83 cv
361.172 372.944 366.623 356.397 370.744 340.333 cv
375.199 322.964 378.221 306.228 379.393 292.606 cv
384.408 293.974 395.353 297.149 395.791 297.014 cv
395.912 303.522 395.307 311.755 393.863 321.224 cv
391.228 320.081 382.543 315.836 379.889 314.746 cv
377.594 330.434 359.697 379.161 355.537 385.832 cv
cp
369.756 334.647 mo
369.344 336.342 368.924 338.043 368.486 339.753 cv
367.836 342.288 367.174 344.769 366.5 347.194 cv
367.621 342.945 368.713 338.736 369.756 334.647 cv
cp
340.219 369.811 mo
335.375 382.72 330.146 393.608 325.334 399.577 cv
329.236 394.678 333.178 386.528 337.174 376.308 cv
341.705 364.722 346.309 350.473 351.002 335.271 cv
353.916 325.831 356.191 316.05 357.783 306.753 cv
360.68 292.807 360.689 286.011 360.435 281.935 cv
360.478 280.491 360.492 279.099 360.482 277.756 cv
366.246 278.623 371.699 280.737 377.209 282.602 cv
377.342 282.647 377.471 282.673 377.594 282.69 cv
377.572 284.358 377.506 286.163 377.391 288.124 cv
377.344 288.908 377.287 289.708 377.228 290.517 cv
377.205 290.799 377.184 291.084 377.16 291.369 cv
377.117 291.902 377.07 292.442 377.023 292.986 cv
376.992 293.329 376.961 293.67 376.93 294.016 cv
376.879 294.548 376.822 295.09 376.766 295.631 cv
376.691 296.358 376.611 297.094 376.525 297.837 cv
376.49 298.146 376.455 298.453 376.418 298.765 cv
376.348 299.35 376.273 299.94 376.199 300.535 cv
376.172 300.739 376.146 300.944 376.121 301.149 cv
375.939 302.538 375.744 303.946 375.533 305.379 cv
370.777 302.854 369.197 301.71 362.971 299.368 cv
359.557 323.789 346.318 356.108 340.219 369.811 cv
cp
323.478 334.631 mo
322.844 334.508 322.201 334.385 321.553 334.264 cv
321.566 334.204 321.58 334.145 321.596 334.086 cv
321.185 333.996 320.775 333.911 320.367 333.824 cv
320.426 333.261 320.443 332.655 320.43 332.023 cv
322.521 332.506 324.609 333.004 326.682 333.55 cv
330.008 334.419 333.316 335.387 336.672 336.331 cv
336.435 336.727 336.184 337.082 335.916 337.38 cv
331.791 336.364 327.652 335.402 323.51 334.493 cv
323.5 334.538 323.488 334.586 323.478 334.631 cv
cp
320.416 348.622 mo
319.609 353.56 318.725 358.693 317.666 364.088 cv
316.291 371.991 314.615 380.349 313.977 388.559 cv
313.918 386.03 313.971 383.105 314.17 379.739 cv
314.885 367.637 317.301 352.495 321.043 336.426 cv
321.699 336.565 322.353 336.705 323.006 336.847 cv
322.219 340.535 321.371 344.435 320.416 348.622 cv
cp
314.045 390.336 mo
314.092 391.315 314.158 392.227 314.242 393.071 cv
314.158 392.227 314.092 391.315 314.045 390.336 cv
cp
317.055 333.693 mo
316.859 333.877 316.639 334.025 316.4 334.139 cv
316.121 334.208 315.617 334.29 315.043 334.375 cv
316.338 332.249 315.143 328.659 313.977 326.074 cv
313.947 326.007 313.887 332.06 313.853 331.994 cv
313.83 332.727 313.67 333.273 313.416 333.65 cv
313.383 333.622 313.348 333.598 313.316 333.565 cv
313.289 333.678 313.244 333.792 313.207 333.903 cv
312.404 334.696 311.016 334.269 309.953 332.883 cv
308.098 331.147 306.373 335.044 302.398 333.864 cv
299.334 330.277 296.82 333.034 294.879 332.669 cv
294.508 332.599 294.188 332.513 293.889 332.42 cv
293.738 332.294 293.566 332.153 293.338 331.98 cv
292.662 331.472 292.068 331.03 291.537 330.641 cv
291.127 329.761 291.164 328.736 291.004 327.764 cv
291.039 326.758 291.457 315.738 292.994 309.855 cv
292.309 310.672 291.58 311.193 290.906 312.565 cv
290.754 313.115 290.611 313.715 290.484 314.383 cv
287.56 314.141 287.303 314.082 286.607 313.913 cv
286.387 313.86 286.123 313.796 285.717 313.711 cv
286.732 310.996 288.291 307.689 290.031 305.388 cv
290.826 304.335 291.865 303.486 292.9 302.655 cv
294.326 301.046 295.898 299.236 296.699 298.052 cv
296.838 297.847 296.961 297.654 297.047 297.492 cv
297.184 300.128 297.182 302.623 296.975 304.877 cv
298.883 298.472 299.123 287.459 298.504 281.147 cv
298.43 280.4 298.322 279.631 298.195 278.847 cv
298.193 278.85 298.193 278.852 298.189 278.854 cv
298.189 278.855 298.189 278.855 298.188 278.856 cv
298.178 278.793 298.166 278.73 298.156 278.668 cv
298.121 278.48 298.086 278.293 298.051 278.103 cv
298.008 277.875 297.965 277.647 297.922 277.417 cv
297.865 277.116 297.809 276.813 297.752 276.51 cv
297.732 276.401 297.711 276.293 297.691 276.185 cv
297.625 275.826 297.56 275.467 297.498 275.106 cv
297.496 275.105 297.496 275.103 297.496 275.103 cv
297.438 274.76 297.381 274.417 297.324 274.075 cv
297.309 273.968 297.293 273.86 297.275 273.754 cv
297.238 273.501 297.201 273.249 297.166 272.997 cv
297.15 272.884 297.135 272.773 297.121 272.661 cv
297.076 272.321 297.035 271.981 297 271.643 cv
296.998 271.624 296.996 271.603 296.994 271.583 cv
296.961 271.249 296.934 270.915 296.91 270.583 cv
296.904 270.477 296.898 270.371 296.893 270.264 cv
296.879 270.015 296.869 269.766 296.863 269.518 cv
296.859 269.409 296.857 269.3 296.855 269.192 cv
296.852 268.86 296.853 268.531 296.865 268.203 cv
296.867 268.182 296.867 268.159 296.869 268.138 cv
296.881 267.815 296.904 267.495 296.935 267.177 cv
296.945 267.071 296.959 266.967 296.971 266.863 cv
296.998 266.625 297.029 266.388 297.068 266.153 cv
297.086 266.049 297.103 265.944 297.121 265.842 cv
297.18 265.527 297.246 265.215 297.326 264.906 cv
297.33 264.897 297.33 264.887 297.334 264.876 cv
297.357 264.969 297.381 265.065 297.404 265.158 cv
297.625 266.053 297.852 266.955 298.082 267.866 cv
298.324 268.826 298.566 269.798 298.805 270.771 cv
298.852 270.957 298.896 271.143 298.941 271.329 cv
299.168 272.26 299.389 273.195 299.598 274.131 cv
299.629 274.272 299.658 274.413 299.691 274.554 cv
299.81 275.104 299.918 275.655 300.029 276.205 cv
300.043 276.188 300.055 276.17 300.066 276.152 cv
300.066 276.153 li
300.148 276.606 300.23 277.06 300.303 277.514 cv
301.098 282.508 299.934 287.868 302.955 292.057 cv
302.955 292.056 302.955 292.056 302.955 292.056 cv
302.957 292.057 li
302.152 286.515 302.855 280.513 302.605 274.777 cv
302.576 274.143 302.525 273.512 302.463 272.885 cv
302.484 272.856 302.508 272.827 302.529 272.799 cv
302.521 272.734 302.516 272.671 302.506 272.606 cv
302.482 272.472 302.463 272.337 302.439 272.201 cv
302.348 271.63 302.244 271.058 302.133 270.49 cv
302.109 270.364 302.082 270.24 302.057 270.116 cv
301.941 269.553 301.82 268.988 301.691 268.427 cv
301.674 268.353 301.656 268.276 301.639 268.202 cv
301.51 267.646 301.375 267.089 301.238 266.533 cv
301.203 266.395 301.17 266.256 301.135 266.118 cv
300.998 265.573 300.859 265.028 300.721 264.483 cv
300.541 263.779 300.359 263.074 300.182 262.368 cv
300.168 262.31 300.154 262.25 300.141 262.192 cv
299.977 261.545 299.818 260.897 299.666 260.246 cv
299.484 259.469 299.313 258.69 299.154 257.903 cv
299.006 257.156 298.873 256.422 298.758 255.699 cv
298.723 255.483 298.701 255.276 298.67 255.064 cv
298.596 254.559 298.52 254.055 298.463 253.561 cv
298.432 253.29 298.414 253.026 298.387 252.757 cv
298.346 252.332 298.297 251.903 298.268 251.485 cv
298.248 251.215 298.242 250.95 298.23 250.684 cv
298.219 250.48 298.209 250.275 298.199 250.073 cv
298.189 249.871 298.176 249.668 298.17 249.47 cv
298.17 249.468 298.17 249.465 298.17 249.462 cv
298.164 249.148 298.172 248.838 298.17 248.525 cv
298.17 248.403 298.172 248.281 298.17 248.157 cv
298.17 247.933 298.166 247.708 298.172 247.487 cv
298.18 247.16 298.205 246.84 298.221 246.516 cv
298.236 246.193 298.244 245.869 298.268 245.549 cv
298.293 245.209 298.334 244.872 298.369 244.534 cv
298.398 244.24 298.42 243.942 298.455 243.651 cv
298.457 243.648 298.457 243.646 298.457 243.646 cv
298.48 243.451 298.514 243.258 298.543 243.065 cv
298.568 242.909 298.59 242.753 298.613 242.597 cv
298.654 242.319 298.689 242.041 298.736 241.767 cv
298.736 241.766 li
298.744 241.727 298.754 241.692 298.76 241.654 cv
298.816 241.343 298.883 241.032 298.947 240.721 cv
299 240.449 299.049 240.177 299.109 239.905 cv
299.133 239.798 299.162 239.689 299.189 239.582 cv
299.252 239.328 299.314 239.072 299.379 238.818 cv
299.398 238.741 299.418 238.663 299.438 238.586 cv
299.48 238.408 299.521 238.23 299.57 238.054 cv
299.674 237.668 299.795 237.283 299.912 236.898 cv
299.98 236.67 300.043 236.443 300.115 236.215 cv
300.25 235.79 300.402 235.364 300.551 234.938 cv
300.617 234.746 300.68 234.553 300.75 234.359 cv
300.906 233.932 301.076 233.502 301.246 233.072 cv
301.32 232.883 301.389 232.695 301.465 232.506 cv
301.465 232.504 301.465 232.504 301.467 232.502 cv
301.594 232.184 301.734 231.863 301.873 231.544 cv
301.932 231.406 301.99 231.27 302.049 231.132 cv
302.123 230.963 302.189 230.797 302.264 230.627 cv
302.283 230.586 302.305 230.543 302.322 230.5 cv
302.527 230.047 302.74 229.588 302.957 229.13 cv
303.02 229 303.076 228.871 303.139 228.738 cv
303.164 228.686 303.193 228.629 303.219 228.576 cv
303.471 228.057 303.728 227.535 303.996 227.01 cv
304.029 226.943 304.06 226.877 304.096 226.811 cv
304.951 225.959 306.289 224.359 307.57 222.893 cv
308.557 221.764 309.51 220.713 310.184 220.144 cv
309.635 220.247 308.482 221.235 307.367 222.201 cv
306.603 222.709 305.879 223.285 305.17 223.89 cv
305.168 223.832 305.152 223.775 305.145 223.719 cv
305.145 223.719 li
305.137 223.66 305.131 223.602 305.119 223.543 cv
305.119 223.543 305.119 223.543 305.119 223.542 cv
305.107 223.49 305.088 223.439 305.072 223.389 cv
305.063 223.361 305.057 223.332 305.047 223.306 cv
305.033 223.268 305.027 223.227 305.012 223.189 cv
305.668 221.684 306.117 220.11 306.107 218.371 cv
306.074 218.438 306.043 218.51 306.012 218.577 cv
306.012 218.576 li
306.049 218.355 306.088 218.139 306.125 217.915 cv
305.4 219.429 304.742 221.231 303.959 223.043 cv
303.957 223.044 li
303.521 223.805 302.691 224.955 302.117 225.836 cv
302.102 225.859 302.084 225.887 302.068 225.91 cv
301.982 226.042 301.902 226.169 301.83 226.285 cv
301.578 226.527 301.326 226.775 301.094 227.034 cv
300.848 227.158 300.605 227.259 300.361 227.348 cv
300.291 227.375 300.219 227.396 300.148 227.419 cv
299.971 227.479 299.793 227.527 299.617 227.568 cv
299.545 227.584 299.473 227.604 299.402 227.617 cv
299.172 227.66 298.943 227.692 298.717 227.708 cv
298.709 227.708 298.703 227.709 298.695 227.71 cv
298.689 227.71 298.685 227.71 298.68 227.71 cv
298.453 227.724 298.23 227.719 298.008 227.703 cv
297.949 227.7 297.891 227.697 297.834 227.69 cv
297.609 227.668 297.387 227.64 297.166 227.592 cv
297.146 227.588 297.127 227.581 297.107 227.578 cv
296.902 227.531 296.697 227.471 296.492 227.402 cv
296.438 227.385 296.383 227.367 296.328 227.347 cv
296.111 227.268 295.896 227.182 295.685 227.08 cv
295.658 227.066 295.631 227.051 295.603 227.037 cv
295.412 226.943 295.221 226.838 295.031 226.727 cv
294.98 226.696 294.93 226.666 294.879 226.636 cv
294.672 226.506 294.465 226.369 294.262 226.222 cv
294.228 226.197 294.197 226.171 294.164 226.146 cv
293.982 226.012 293.805 225.871 293.629 225.723 cv
293.582 225.684 293.535 225.645 293.488 225.605 cv
293.291 225.435 293.094 225.256 292.9 225.068 cv
292.863 225.033 292.828 224.996 292.793 224.961 cv
292.625 224.794 292.457 224.621 292.291 224.443 cv
292.25 224.398 292.207 224.355 292.166 224.309 cv
291.977 224.101 291.791 223.887 291.607 223.667 cv
291.568 223.623 291.533 223.576 291.496 223.531 cv
291.336 223.336 291.178 223.136 291.021 222.932 cv
290.986 222.885 290.951 222.839 290.914 222.791 cv
290.736 222.555 290.56 222.314 290.389 222.068 cv
290.35 222.014 290.313 221.959 290.275 221.903 cv
290.125 221.688 289.977 221.467 289.83 221.244 cv
289.801 221.197 289.77 221.15 289.738 221.104 cv
289.572 220.846 289.408 220.584 289.248 220.318 cv
289.211 220.259 289.176 220.199 289.139 220.138 cv
288.996 219.9 288.855 219.661 288.717 219.419 cv
288.693 219.377 288.67 219.337 288.646 219.297 cv
288.492 219.025 288.34 218.749 288.193 218.472 cv
288.158 218.407 288.123 218.341 288.086 218.275 cv
287.951 218.02 287.818 217.765 287.689 217.508 cv
287.674 217.478 287.658 217.449 287.643 217.419 cv
287.5 217.137 287.361 216.854 287.225 216.57 cv
287.193 216.504 287.162 216.439 287.131 216.372 cv
287.002 216.101 286.875 215.83 286.75 215.56 cv
286.744 215.546 286.738 215.532 286.732 215.518 cv
286.602 215.23 286.475 214.946 286.352 214.661 cv
286.326 214.602 286.299 214.542 286.273 214.483 cv
286.152 214.2 286.033 213.918 285.916 213.64 cv
285.871 213.53 285.832 213.425 285.787 213.316 cv
285.752 213.227 285.715 213.138 285.678 213.047 cv
285.553 212.73 285.432 212.419 285.314 212.111 cv
285.281 212.026 285.248 211.941 285.219 211.857 cv
285.102 211.549 284.992 211.249 284.887 210.954 cv
284.861 210.878 284.832 210.8 284.805 210.725 cv
284.68 210.366 284.559 210.016 284.449 209.681 cv
284.158 208.8 283.924 208.006 283.752 207.352 cv
283.582 206.701 283.434 206.055 283.293 205.412 cv
283.271 205.304 283.252 205.197 283.228 205.091 cv
283.213 205.009 283.195 204.926 283.18 204.843 cv
283.082 204.367 282.994 203.893 282.914 203.419 cv
282.904 203.35 282.893 203.28 282.881 203.21 cv
282.861 203.09 282.84 202.971 282.822 202.851 cv
282.822 202.85 282.822 202.849 282.822 202.849 cv
282.736 202.29 282.66 201.732 282.596 201.176 cv
282.596 201.175 282.596 201.172 282.596 201.171 cv
282.588 201.102 282.576 201.03 282.568 200.96 cv
282.568 200.955 282.568 200.95 282.566 200.945 cv
282.494 200.269 282.435 199.597 282.396 198.925 cv
282.395 198.899 282.393 198.871 282.393 198.844 cv
282.355 198.212 282.334 197.583 282.324 196.956 cv
282.324 196.868 282.324 196.781 282.322 196.694 cv
282.318 196.071 282.326 195.449 282.348 194.83 cv
282.348 194.829 282.348 194.827 282.348 194.827 cv
282.348 194.821 282.348 194.816 282.35 194.811 cv
282.35 194.792 282.35 194.775 282.352 194.758 cv
282.404 193.399 282.521 192.049 282.701 190.708 cv
282.914 190.285 li
282.855 190.349 282.795 190.407 282.736 190.47 cv
282.939 189.024 283.213 187.588 283.557 186.16 cv
283.564 186.124 283.574 186.09 283.582 186.054 cv
283.584 186.049 283.586 186.044 283.586 186.039 cv
283.732 185.433 283.896 184.83 284.068 184.226 cv
284.068 184.225 284.068 184.223 284.07 184.221 cv
284.08 184.18 284.094 184.139 284.105 184.098 cv
284.135 183.996 284.164 183.893 284.193 183.79 cv
284.385 183.139 284.588 182.489 284.809 181.841 cv
285.043 181.836 285.283 181.84 285.531 181.849 cv
285.613 181.852 285.699 181.859 285.783 181.863 cv
285.947 181.872 286.113 181.88 286.283 181.894 cv
286.387 181.902 286.49 181.915 286.596 181.925 cv
286.75 181.941 286.904 181.956 287.064 181.975 cv
287.176 181.989 287.289 182.006 287.402 182.021 cv
287.555 182.044 287.707 182.064 287.863 182.089 cv
287.98 182.108 288.1 182.129 288.219 182.151 cv
288.371 182.177 288.521 182.205 288.676 182.234 cv
288.797 182.258 288.92 182.285 289.043 182.311 cv
289.193 182.342 289.346 182.374 289.494 182.408 cv
289.619 182.437 289.744 182.467 289.869 182.497 cv
290.02 182.534 290.168 182.571 290.316 182.61 cv
290.441 182.642 290.566 182.676 290.691 182.71 cv
290.84 182.751 290.988 182.793 291.139 182.836 cv
291.258 182.872 291.381 182.909 291.502 182.946 cv
291.652 182.992 291.801 183.039 291.949 183.087 cv
292.068 183.126 292.185 183.165 292.301 183.204 cv
292.449 183.254 292.596 183.306 292.74 183.357 cv
292.855 183.398 292.971 183.439 293.084 183.482 cv
293.228 183.536 293.371 183.592 293.514 183.648 cv
293.623 183.69 293.73 183.733 293.838 183.777 cv
293.982 183.836 294.121 183.896 294.262 183.958 cv
294.361 184.001 294.463 184.044 294.56 184.087 cv
294.705 184.152 294.844 184.22 294.984 184.286 cv
295.07 184.328 295.16 184.369 295.246 184.41 cv
295.398 184.487 295.545 184.564 295.691 184.643 cv
295.756 184.677 295.824 184.711 295.887 184.745 cv
296.092 184.859 296.291 184.974 296.478 185.09 cv
296.672 185.21 296.855 185.33 297.029 185.451 cv
301.924 188.898 300.619 193.6 303.369 198.146 cv
303.369 198.146 303.369 198.145 303.369 198.145 cv
303.369 198.145 303.369 198.145 303.369 198.145 cv
303.303 196.765 303.146 195.361 303.014 193.956 cv
303.008 193.908 303.004 193.859 302.998 193.811 cv
302.98 193.615 302.963 193.419 302.947 193.224 cv
302.938 193.102 302.926 192.98 302.916 192.858 cv
302.904 192.694 302.893 192.53 302.881 192.366 cv
302.871 192.225 302.861 192.083 302.853 191.942 cv
302.846 191.79 302.836 191.638 302.83 191.486 cv
302.824 191.335 302.818 191.184 302.813 191.034 cv
302.809 190.889 302.807 190.745 302.803 190.602 cv
302.803 190.445 302.803 190.288 302.803 190.132 cv
302.803 189.994 302.807 189.855 302.809 189.716 cv
302.813 189.556 302.82 189.396 302.828 189.237 cv
302.836 189.103 302.844 188.968 302.853 188.835 cv
302.865 188.67 302.883 188.507 302.898 188.343 cv
302.912 188.215 302.926 188.087 302.941 187.96 cv
302.965 187.79 302.994 187.62 303.021 187.451 cv
303.041 187.331 303.059 187.211 303.082 187.091 cv
303.119 186.912 303.162 186.733 303.205 186.555 cv
303.232 186.447 303.254 186.338 303.283 186.231 cv
303.338 186.029 303.402 185.829 303.469 185.629 cv
303.496 185.546 303.52 185.463 303.547 185.38 cv
303.648 185.097 303.76 184.816 303.887 184.538 cv
304.016 184.251 304.16 183.968 304.318 183.686 cv
304.486 183.389 304.656 183.095 304.826 182.802 cv
305.102 182.332 305.379 181.867 305.658 181.405 cv
305.66 181.402 305.662 181.399 305.662 181.396 cv
305.672 181.383 305.678 181.371 305.688 181.357 cv
305.77 181.222 305.85 181.086 305.932 180.951 cv
306.461 180.08 306.988 179.218 307.5 178.351 cv
307.525 178.309 307.551 178.266 307.574 178.224 cv
307.607 178.168 307.639 178.113 307.672 178.057 cv
307.75 177.923 307.83 177.79 307.908 177.656 cv
307.908 177.655 307.908 177.654 307.908 177.654 cv
307.967 177.554 308.021 177.453 308.078 177.353 cv
308.185 177.167 308.291 176.981 308.396 176.794 cv
308.424 176.743 308.451 176.69 308.48 176.638 cv
308.596 176.429 308.709 176.22 308.82 176.008 cv
308.836 175.98 308.852 175.953 308.867 175.925 cv
308.943 175.78 309.016 175.632 309.092 175.486 cv
309.092 175.482 309.094 175.48 309.096 175.477 cv
309.361 174.956 309.617 174.428 309.857 173.89 cv
309.893 173.807 309.93 173.724 309.967 173.641 cv
310.025 173.505 310.086 173.372 310.145 173.235 cv
310.18 173.151 310.211 173.065 310.244 172.98 cv
310.281 172.884 310.32 172.789 310.357 172.692 cv
310.396 172.593 310.435 172.494 310.477 172.394 cv
310.488 172.362 310.502 172.332 310.514 172.3 cv
310.555 172.186 310.594 172.069 310.633 171.953 cv
310.707 171.751 310.781 171.548 310.848 171.342 cv
310.85 171.341 310.85 171.341 310.85 171.34 cv
310.867 171.28 310.885 171.219 310.904 171.158 cv
311.09 170.569 311.26 169.967 311.402 169.345 cv
311.527 169.778 311.635 170.221 311.73 170.667 cv
311.773 170.863 311.813 171.059 311.852 171.255 cv
311.887 171.448 311.918 171.641 311.949 171.834 cv
312.039 172.399 312.113 172.964 312.16 173.519 cv
312.16 173.52 312.16 173.521 312.16 173.523 cv
312.16 173.523 312.16 173.523 312.16 173.523 cv
312.185 174.737 312.158 175.946 312.238 176.91 cv
313.375 174.964 314.502 170.447 313.656 167.783 cv
313.656 167.782 313.656 167.782 313.656 167.782 cv
313.711 167.855 313.766 167.929 313.82 168.003 cv
313.861 168.057 313.9 168.111 313.941 168.165 cv
314.025 168.279 314.109 168.394 314.191 168.508 cv
314.299 168.656 314.4 168.806 314.504 168.955 cv
314.566 169.043 314.627 169.13 314.689 169.218 cv
314.691 169.222 314.695 169.226 314.695 169.23 cv
314.773 169.342 314.853 169.455 314.93 169.569 cv
315.102 169.828 315.266 170.092 315.428 170.358 cv
315.486 170.455 315.549 170.549 315.607 170.647 cv
315.607 170.647 315.609 170.648 315.609 170.649 cv
315.826 171.016 316.033 171.391 316.228 171.776 cv
318.117 175.531 318.85 179.92 319.861 183.989 cv
319.988 184.504 320.121 185.049 320.258 185.607 cv
320.756 187.656 321.289 189.972 321.717 192.387 cv
321.764 192.662 321.809 192.94 321.853 193.217 cv
321.893 193.456 321.935 193.694 321.973 193.936 cv
322.021 194.248 322.063 194.562 322.105 194.876 cv
322.133 195.083 322.166 195.29 322.193 195.499 cv
322.514 198.015 322.654 200.546 322.482 202.903 cv
322.477 202.992 322.475 203.083 322.467 203.172 cv
322.438 203.545 322.389 203.911 322.34 204.274 cv
322.324 204.384 322.318 204.497 322.303 204.605 cv
322.25 204.948 322.182 205.278 322.113 205.61 cv
322.088 205.733 322.07 205.861 322.043 205.982 cv
321.988 206.219 321.916 206.443 321.853 206.674 cv
321.795 206.879 321.748 207.09 321.684 207.289 cv
321.322 203.782 320.664 197.662 316.648 196.313 cv
315.889 190.636 313.861 184.488 313.836 178.761 cv
313.836 178.778 313.838 178.797 313.838 178.814 cv
313.838 178.819 313.838 178.823 313.838 178.828 cv
313.838 178.806 313.836 178.783 313.836 178.761 cv
313.867 189.088 314.898 199.397 314.725 209.899 cv
314.725 209.898 314.725 209.898 314.725 209.896 cv
314.725 209.899 li
316.148 206.115 316.234 202.189 317.484 198.377 cv
317.611 198.511 317.728 198.652 317.848 198.792 cv
317.906 198.861 317.971 198.928 318.027 198.999 cv
318.176 199.182 318.313 199.372 318.449 199.564 cv
318.473 199.597 318.5 199.628 318.521 199.661 cv
318.617 199.798 318.701 199.941 318.791 200.083 cv
318.85 200.176 318.912 200.266 318.969 200.361 cv
319.066 200.528 319.158 200.703 319.252 200.876 cv
319.291 200.949 319.334 201.02 319.371 201.095 cv
319.426 201.201 319.473 201.311 319.525 201.419 cv
319.717 201.82 319.896 202.23 320.059 202.655 cv
320.131 202.842 320.195 203.034 320.262 203.224 cv
320.291 203.308 320.322 203.39 320.35 203.475 cv
320.379 203.561 320.404 203.651 320.432 203.738 cv
320.883 205.156 321.205 206.666 321.475 208.208 cv
321.611 209.002 321.736 209.805 321.855 210.607 cv
321.9 210.914 321.945 211.22 321.99 211.527 cv
322.156 213.97 322.674 216.413 323.332 218.76 cv
323.336 218.774 323.34 218.789 323.342 218.802 cv
323.818 220.499 324.363 222.146 324.896 223.707 cv
326.627 228.775 326.236 234.426 325.66 239.654 cv
325.578 240.391 325.48 241.113 325.371 241.823 cv
325.295 242.302 325.205 242.769 325.117 243.236 cv
325.029 243.702 324.935 244.164 324.838 244.621 cv
324.74 245.067 324.645 245.518 324.537 245.956 cv
324.518 246.035 324.494 246.111 324.475 246.19 cv
324.035 246.77 323.596 247.351 323.146 247.924 cv
320.846 254.991 317.307 261.269 314.039 268.672 cv
314.041 268.671 314.041 268.671 314.041 268.671 cv
314.041 268.671 314.041 268.671 314.041 268.672 cv
318.182 265.268 320.283 258.696 322.529 253.957 cv
325.307 261.418 322.195 273.77 319.328 280.601 cv
319.08 281.19 318.816 281.815 318.549 282.453 cv
318.545 282.462 318.541 282.47 318.539 282.478 cv
318.135 283.44 317.719 284.449 317.303 285.5 cv
317.287 285.543 li
315.539 289.963 313.869 295.035 313.74 299.691 cv
313.738 299.739 313.738 299.786 313.738 299.832 cv
313.728 300.235 313.728 300.635 313.744 301.03 cv
313.678 303.543 313.77 305.977 314.781 310.095 cv
315.014 311.59 315.445 313.282 316.184 315.298 cv
316.406 316.471 316.594 317.745 316.744 319.037 cv
316.553 322.745 316.332 326.722 317.285 330.009 cv
317.385 331.315 317.434 332.579 317.055 333.693 cv
cp
289.762 316.26 mo
289.412 317.989 289.109 320.316 288.869 323.472 cv
288.822 323.657 288.773 323.84 288.727 324.024 cv
268.205 322.612 254.328 322.105 244.014 322.076 cv
242.045 322.084 240.107 322.096 238.221 322.112 cv
233.656 322.185 229.846 322.357 226.393 322.577 cv
226.395 322.577 226.396 322.577 226.396 322.577 cv
226.391 322.577 226.387 322.577 226.383 322.577 cv
226.354 322.579 226.324 322.582 226.297 322.584 cv
233.869 323.109 li
244.514 323.315 260.107 324.147 287.898 326.132 cv
287.617 326.713 287.326 327.342 287.168 327.926 cv
285.387 327.672 283.605 327.426 281.822 327.192 cv
268.881 325.938 255.721 325.188 242.525 324.949 cv
237.984 324.842 233.441 324.805 228.9 324.828 cv
227.619 324.795 226.885 324.798 226.787 324.838 cv
226.787 324.838 226.773 324.838 226.771 324.838 cv
226.803 324.839 li
226.824 324.84 226.85 324.842 226.873 324.842 cv
215.517 324.95 204.164 325.461 192.835 326.372 cv
194.002 326.355 li
186.407 326.939 178.864 327.69 171.38 328.611 cv
171.387 328.6 171.394 328.587 171.4 328.574 cv
170.941 328.632 170.481 328.693 170.022 328.752 cv
170.026 328.764 170.03 328.774 170.034 328.786 cv
167.576 329.094 165.126 329.425 162.682 329.771 cv
162.678 329.763 162.675 329.755 162.672 329.746 cv
162.634 329.665 162.596 329.584 162.561 329.499 cv
162.57 329.478 162.58 329.457 162.591 329.434 cv
162.569 329.417 162.534 329.397 162.508 329.377 cv
162.321 328.916 162.156 328.416 162.006 327.896 cv
175.463 325.928 202.897 323.658 221.178 322.794 cv
222.5 322.69 223.757 322.589 224.944 322.49 cv
221.602 322.294 218.248 322.171 214.91 322.113 cv
197.172 322.517 173.026 324.647 161.484 325.807 cv
161.483 325.802 161.482 325.796 161.48 325.79 cv
161.3 324.968 161.137 324.145 160.971 323.367 cv
160.76 321.145 160.512 319.411 160.235 318.045 cv
181.673 315.099 203.509 313.611 225.562 313.611 cv
232.646 313.611 239.768 313.774 246.896 314.083 cv
257.908 314.114 272.713 314.452 285.068 315.637 cv
286.334 315.798 287.6 315.963 288.863 316.135 cv
289.162 316.176 289.463 316.211 289.764 316.252 cv
289.762 316.254 289.762 316.257 289.762 316.26 cv
cp
159.096 314.371 mo
158.42 312.999 157.691 312.477 157.006 311.66 cv
158.544 317.544 158.961 328.561 158.997 329.567 cv
158.836 330.54 158.874 331.565 158.463 332.445 cv
157.933 332.835 157.338 333.276 156.663 333.785 cv
156.434 333.957 156.263 334.099 156.111 334.225 cv
155.813 334.317 155.492 334.402 155.122 334.473 cv
153.18 334.839 150.667 332.082 147.602 335.669 cv
143.628 336.848 141.902 332.952 140.046 334.688 cv
138.985 336.073 137.596 336.5 136.794 335.708 cv
136.756 335.595 136.713 335.482 136.685 335.37 cv
136.653 335.401 136.618 335.426 136.585 335.455 cv
136.332 335.077 136.17 334.53 136.147 333.799 cv
136.114 333.865 136.053 327.81 136.023 327.878 cv
134.857 330.463 133.663 334.054 134.958 336.179 cv
134.384 336.094 133.881 336.012 133.6 335.943 cv
133.362 335.83 133.142 335.681 132.945 335.498 cv
132.566 334.384 132.616 333.119 132.716 331.815 cv
133.669 328.525 133.448 324.548 133.257 320.841 cv
133.406 319.55 133.593 318.275 133.815 317.103 cv
134.555 315.088 134.987 313.396 135.22 311.899 cv
136.23 307.781 136.323 305.348 136.256 302.834 cv
136.256 302.833 li
136.272 302.44 136.271 302.039 136.263 301.638 cv
136.263 301.637 li
136.262 301.59 136.262 301.544 136.261 301.495 cv
136.261 301.495 136.261 301.494 136.26 301.493 cv
136.163 298.004 135.201 294.28 133.989 290.774 cv
133.986 290.765 133.982 290.756 133.979 290.745 cv
133.786 290.186 133.586 289.635 133.383 289.088 cv
133.361 289.031 133.339 288.975 133.317 288.917 cv
133.124 288.401 132.928 287.893 132.731 287.393 cv
132.725 287.378 132.72 287.362 132.714 287.347 cv
132.697 287.304 li
132.686 287.277 132.675 287.252 132.665 287.226 cv
132.479 286.758 132.294 286.298 132.11 285.848 cv
132.08 285.774 132.05 285.702 132.02 285.629 cv
131.852 285.217 131.684 284.811 131.517 284.415 cv
131.499 284.371 131.48 284.326 131.462 284.282 cv
131.459 284.275 131.456 284.267 131.452 284.258 cv
131.415 284.172 131.38 284.088 131.345 284.003 cv
131.217 283.699 131.092 283.4 130.969 283.107 cv
130.869 282.87 130.769 282.633 130.674 282.405 cv
127.805 275.573 124.693 263.222 127.472 255.762 cv
129.716 260.5 131.818 267.072 135.96 270.476 cv
135.96 270.475 135.96 270.475 135.96 270.475 cv
135.96 270.475 135.96 270.475 135.961 270.476 cv
131.239 259.779 125.949 251.436 124.648 239.654 cv
124.072 234.426 123.682 228.775 125.412 223.707 cv
125.945 222.146 126.489 220.499 126.965 218.802 cv
126.969 218.789 126.972 218.774 126.977 218.76 cv
127.634 216.413 128.151 213.97 128.319 211.527 cv
129.03 206.63 129.782 201.583 132.825 198.377 cv
133.917 201.713 134.119 205.135 135.107 208.474 cv
135.248 208.951 135.405 209.426 135.583 209.899 cv
135.583 209.896 li
135.584 209.898 135.584 209.898 135.585 209.899 cv
135.411 199.397 136.44 189.088 136.473 178.761 cv
136.473 178.791 136.471 178.822 136.47 178.853 cv
136.47 178.855 136.47 178.858 136.47 178.861 cv
136.47 178.828 136.472 178.794 136.472 178.761 cv
136.446 184.488 134.42 190.636 133.658 196.313 cv
131.478 197.046 130.293 199.188 129.602 201.552 cv
129.578 201.637 129.549 201.72 129.525 201.805 cv
129.472 201.999 129.426 202.196 129.378 202.391 cv
129.359 202.472 129.336 202.551 129.318 202.631 cv
129.28 202.795 129.248 202.96 129.215 203.124 cv
129.191 203.237 129.165 203.35 129.144 203.463 cv
129.134 203.514 129.126 203.564 129.117 203.615 cv
128.871 204.942 128.733 206.234 128.624 207.289 cv
126.428 200.513 128.855 190.389 130.447 183.989 cv
131.46 179.92 132.192 175.531 134.081 171.776 cv
134.275 171.391 134.482 171.015 134.7 170.647 cv
134.73 170.596 134.763 170.548 134.794 170.497 cv
134.818 170.458 134.843 170.419 134.867 170.378 cv
135.035 170.105 135.204 169.833 135.38 169.567 cv
135.382 169.565 135.382 169.564 135.383 169.563 cv
135.456 169.455 135.53 169.349 135.603 169.241 cv
135.606 169.237 135.609 169.233 135.612 169.229 cv
135.78 168.984 135.949 168.739 136.123 168.498 cv
136.197 168.396 136.271 168.294 136.346 168.193 cv
136.447 168.056 136.549 167.92 136.65 167.784 cv
136.561 168.065 136.48 168.35 136.403 168.636 cv
136.375 168.745 136.347 168.853 136.32 168.962 cv
136.276 169.141 136.236 169.319 136.198 169.498 cv
136.135 169.795 136.08 170.093 136.035 170.389 cv
136.026 170.451 136.015 170.513 136.006 170.575 cv
135.977 170.786 135.954 170.997 135.936 171.206 cv
135.934 171.238 135.932 171.269 135.929 171.299 cv
135.877 171.966 135.881 172.616 135.959 173.229 cv
135.959 173.229 135.959 173.23 135.959 173.23 cv
135.878 174.585 135.987 175.823 136.477 176.652 cv
136.411 174.723 138.302 171.417 138.906 169.345 cv
138.91 169.362 138.915 169.379 138.919 169.395 cv
138.924 169.417 138.93 169.438 138.935 169.459 cv
139.026 169.844 139.13 170.217 139.237 170.587 cv
139.389 171.11 139.551 171.625 139.734 172.126 cv
139.744 172.155 139.754 172.185 139.765 172.215 cv
139.968 172.764 140.189 173.299 140.423 173.826 cv
140.447 173.88 140.471 173.936 140.495 173.99 cv
140.725 174.501 140.969 175.001 141.222 175.496 cv
141.256 175.562 141.29 175.629 141.324 175.695 cv
141.577 176.181 141.838 176.662 142.107 177.139 cv
142.147 177.209 142.187 177.279 142.227 177.35 cv
142.499 177.827 142.776 178.301 143.059 178.774 cv
143.101 178.844 143.144 178.915 143.186 178.986 cv
143.486 179.486 143.79 179.986 144.095 180.488 cv
144.397 180.984 144.699 181.483 144.999 181.986 cv
145.024 182.028 145.049 182.07 145.074 182.113 cv
145.382 182.631 145.689 183.154 145.989 183.686 cv
148.53 188.191 147.17 193.303 146.939 198.146 cv
146.94 198.145 146.94 198.145 146.94 198.145 cv
146.94 198.145 146.94 198.145 146.94 198.145 cv
149.689 193.6 148.385 188.898 153.279 185.451 cv
156.04 183.507 161.635 181.774 165.499 181.841 cv
165.722 182.493 165.925 183.147 166.118 183.802 cv
166.118 183.803 li
166.158 183.937 166.196 184.071 166.234 184.206 cv
166.291 184.406 166.339 184.606 166.394 184.806 cv
166.51 185.23 166.628 185.653 166.732 186.078 cv
166.733 186.081 166.733 186.085 166.734 186.089 cv
166.739 186.109 166.745 186.13 166.75 186.15 cv
166.757 186.181 166.763 186.211 166.77 186.242 cv
166.933 186.927 167.082 187.614 167.214 188.303 cv
167.351 189.023 167.47 189.745 167.572 190.47 cv
167.514 190.407 167.452 190.349 167.395 190.285 cv
167.606 190.708 li
167.787 192.049 167.904 193.399 167.957 194.758 cv
167.958 194.779 167.959 194.801 167.96 194.822 cv
167.968 195.037 167.964 195.255 167.969 195.472 cv
167.977 195.878 167.989 196.286 167.985 196.695 cv
167.985 196.782 167.984 196.867 167.983 196.953 cv
167.975 197.583 167.954 198.215 167.916 198.849 cv
167.915 198.872 167.915 198.896 167.913 198.921 cv
167.889 199.321 167.847 199.725 167.811 200.127 cv
167.786 200.401 167.771 200.673 167.741 200.947 cv
167.734 201.016 167.723 201.086 167.715 201.156 cv
167.714 201.158 167.714 201.161 167.714 201.162 cv
167.69 201.371 167.657 201.582 167.629 201.791 cv
167.583 202.147 167.54 202.502 167.485 202.858 cv
167.457 203.039 167.427 203.219 167.396 203.4 cv
167.396 203.4 li
167.387 203.46 167.374 203.519 167.363 203.578 cv
167.29 204.003 167.213 204.429 167.126 204.857 cv
167.09 205.034 167.057 205.211 167.019 205.389 cv
167.019 205.392 167.018 205.394 167.018 205.396 cv
166.878 206.045 166.727 206.697 166.556 207.352 cv
166.508 207.534 166.455 207.729 166.397 207.932 cv
166.378 208.001 166.356 208.074 166.336 208.144 cv
166.295 208.284 166.255 208.425 166.21 208.573 cv
166.184 208.659 166.155 208.75 166.128 208.839 cv
166.085 208.979 166.041 209.119 165.995 209.266 cv
165.963 209.364 165.93 209.466 165.896 209.567 cv
165.85 209.71 165.802 209.855 165.752 210.004 cv
165.715 210.113 165.678 210.223 165.64 210.333 cv
165.589 210.482 165.537 210.632 165.482 210.785 cv
165.441 210.9 165.4 211.017 165.358 211.134 cv
165.301 211.291 165.243 211.451 165.183 211.612 cv
165.14 211.728 165.097 211.845 165.052 211.963 cv
164.988 212.131 164.923 212.301 164.856 212.473 cv
164.811 212.589 164.766 212.705 164.72 212.823 cv
164.648 213.005 164.573 213.189 164.498 213.374 cv
164.453 213.484 164.409 213.593 164.363 213.705 cv
164.276 213.914 164.186 214.126 164.096 214.338 cv
164.057 214.427 164.02 214.516 163.982 214.605 cv
163.851 214.906 163.717 215.209 163.579 215.512 cv
163.552 215.57 163.524 215.63 163.497 215.688 cv
163.384 215.934 163.27 216.18 163.153 216.425 cv
163.102 216.533 163.048 216.64 162.996 216.748 cv
162.899 216.946 162.803 217.143 162.704 217.341 cv
162.643 217.462 162.58 217.583 162.517 217.705 cv
162.424 217.887 162.33 218.068 162.234 218.249 cv
162.166 218.377 162.097 218.505 162.027 218.632 cv
161.933 218.806 161.839 218.977 161.743 219.149 cv
161.67 219.279 161.596 219.407 161.522 219.536 cv
161.425 219.704 161.328 219.871 161.229 220.037 cv
161.153 220.165 161.077 220.292 160.999 220.417 cv
160.898 220.581 160.795 220.745 160.692 220.907 cv
160.614 221.029 160.537 221.152 160.457 221.273 cv
160.351 221.436 160.242 221.596 160.133 221.756 cv
160.055 221.869 159.977 221.985 159.898 222.098 cv
159.78 222.266 159.66 222.428 159.54 222.59 cv
159.467 222.689 159.395 222.791 159.32 222.889 cv
159.169 223.087 159.016 223.278 158.861 223.469 cv
158.815 223.524 158.771 223.583 158.727 223.637 cv
158.526 223.878 158.324 224.109 158.119 224.335 cv
158.054 224.406 157.987 224.472 157.922 224.541 cv
157.779 224.692 157.636 224.843 157.491 224.985 cv
157.407 225.068 157.322 225.145 157.237 225.223 cv
157.108 225.344 156.979 225.467 156.848 225.58 cv
156.755 225.66 156.662 225.734 156.568 225.811 cv
156.442 225.915 156.315 226.017 156.188 226.113 cv
156.09 226.186 155.992 226.256 155.893 226.324 cv
155.767 226.413 155.64 226.498 155.513 226.58 cv
155.412 226.643 155.311 226.704 155.208 226.764 cv
155.081 226.838 154.951 226.908 154.822 226.974 cv
154.718 227.027 154.616 227.078 154.512 227.125 cv
154.38 227.186 154.247 227.238 154.114 227.291 cv
154.011 227.33 153.907 227.372 153.804 227.406 cv
153.665 227.453 153.525 227.488 153.384 227.525 cv
153.285 227.551 153.185 227.579 153.083 227.602 cv
152.93 227.632 152.774 227.65 152.619 227.668 cv
152.53 227.68 152.442 227.697 152.352 227.703 cv
152.127 227.721 151.899 227.721 151.671 227.71 cv
151.651 227.709 151.632 227.711 151.613 227.71 cv
151.605 227.709 151.596 227.708 151.588 227.707 cv
151.363 227.692 151.136 227.66 150.908 227.617 cv
150.835 227.604 150.761 227.584 150.688 227.566 cv
150.514 227.527 150.339 227.479 150.164 227.421 cv
150.09 227.396 150.017 227.373 149.943 227.348 cv
149.707 227.261 149.471 227.162 149.232 227.042 cv
149.227 227.039 149.221 227.037 149.215 227.034 cv
148.981 226.775 148.73 226.527 148.477 226.285 cv
147.933 225.387 146.863 223.94 146.35 223.041 cv
145.91 222.025 145.51 221.02 145.116 220.059 cv
145.021 219.827 144.925 219.598 144.831 219.372 cv
144.774 219.241 144.718 219.109 144.663 218.98 cv
144.504 218.613 144.346 218.255 144.183 217.915 cv
144.22 218.139 144.259 218.356 144.297 218.577 cv
144.297 218.577 144.296 218.577 144.296 218.576 cv
144.264 218.509 144.235 218.438 144.202 218.371 cv
144.19 220.11 144.64 221.684 145.296 223.189 cv
145.282 223.225 145.276 223.26 145.264 223.296 cv
145.264 223.298 145.263 223.299 145.263 223.299 cv
145.235 223.38 145.208 223.461 145.19 223.542 cv
145.19 223.543 145.189 223.543 145.189 223.543 cv
145.184 223.572 145.181 223.6 145.177 223.629 cv
145.173 223.656 145.169 223.686 145.164 223.715 cv
145.156 223.773 145.141 223.83 145.138 223.89 cv
144.738 223.548 144.332 223.218 143.918 222.902 cv
143.888 222.879 143.858 222.855 143.828 222.833 cv
143.402 222.512 142.967 222.208 142.517 221.932 cv
142.515 221.93 142.514 221.93 142.513 221.929 cv
140.91 220.617 139.136 219.173 138.564 219.064 cv
140.114 220.376 144.697 225.301 146.212 226.811 cv
146.315 227.012 146.41 227.209 146.511 227.41 cv
146.731 227.85 146.954 228.287 147.161 228.721 cv
147.259 228.925 147.35 229.127 147.443 229.328 cv
147.459 229.363 147.474 229.396 147.49 229.43 cv
147.676 229.826 147.864 230.223 148.039 230.615 cv
148.144 230.852 148.238 231.086 148.339 231.32 cv
148.347 231.338 148.354 231.355 148.362 231.373 cv
148.522 231.746 148.688 232.122 148.839 232.494 cv
148.839 232.494 148.839 232.494 148.84 232.496 cv
148.949 232.764 149.045 233.029 149.149 233.296 cv
149.156 233.316 149.164 233.334 149.171 233.355 cv
149.301 233.688 149.435 234.02 149.556 234.351 cv
149.556 234.352 149.557 234.355 149.557 234.355 cv
149.657 234.63 149.745 234.904 149.84 235.178 cv
149.856 235.225 149.871 235.271 149.887 235.318 cv
149.99 235.615 150.096 235.91 150.19 236.205 cv
150.237 236.35 150.277 236.496 150.32 236.641 cv
150.36 236.779 150.402 236.918 150.443 237.056 cv
150.46 237.113 150.477 237.17 150.494 237.227 cv
150.577 237.5 150.663 237.773 150.737 238.049 cv
150.737 238.049 150.738 238.049 150.738 238.051 cv
150.793 238.252 150.84 238.455 150.889 238.656 cv
150.913 238.758 150.939 238.857 150.964 238.957 cv
151.042 239.271 151.128 239.586 151.198 239.9 cv
151.268 240.212 151.324 240.525 151.386 240.838 cv
151.447 241.145 151.516 241.452 151.57 241.761 cv
151.57 241.761 151.57 241.762 151.57 241.763 cv
151.601 241.938 151.624 242.111 151.648 242.285 cv
151.67 242.434 151.693 242.581 151.715 242.727 cv
151.76 243.032 151.813 243.333 151.852 243.64 cv
151.852 243.641 151.852 243.643 151.852 243.644 cv
151.872 243.806 151.885 243.969 151.9 244.133 cv
151.918 244.32 151.938 244.507 151.956 244.693 cv
151.983 244.977 152.019 245.258 152.04 245.543 cv
152.04 245.545 152.041 245.546 152.041 245.547 cv
152.067 245.895 152.079 246.249 152.093 246.602 cv
152.095 246.651 152.098 246.701 152.101 246.751 cv
152.111 246.996 152.13 247.237 152.136 247.483 cv
152.136 247.483 li
152.14 247.627 152.136 247.773 152.136 247.919 cv
152.139 248.265 152.141 248.611 152.137 248.962 cv
152.135 249.128 152.141 249.292 152.137 249.459 cv
152.122 250.078 152.09 250.705 152.047 251.338 cv
152.044 251.387 152.044 251.432 152.04 251.481 cv
152.04 251.488 152.039 251.495 152.039 251.502 cv
151.996 252.108 151.935 252.726 151.865 253.349 cv
151.844 253.536 151.82 253.727 151.796 253.916 cv
151.738 254.387 151.673 254.861 151.599 255.342 cv
151.57 255.532 151.542 255.724 151.511 255.916 cv
151.404 256.569 151.288 257.229 151.153 257.903 cv
149.895 264.186 147.678 270.146 147.396 276.582 cv
147.145 282.316 147.848 288.318 147.044 293.861 cv
147.044 293.86 147.044 293.86 147.044 293.86 cv
147.044 293.86 147.044 293.86 147.044 293.861 cv
150.067 289.672 148.903 284.311 149.698 279.317 cv
150.468 274.485 151.826 269.548 152.974 264.876 cv
153.006 264.999 153.027 265.126 153.057 265.251 cv
153.111 265.484 153.169 265.716 153.211 265.953 cv
153.231 266.069 153.242 266.189 153.26 266.305 cv
153.298 266.553 153.338 266.801 153.364 267.053 cv
153.379 267.2 153.384 267.35 153.395 267.498 cv
153.412 267.722 153.433 267.946 153.442 268.173 cv
153.452 268.433 153.45 268.695 153.45 268.957 cv
153.45 269.074 153.456 269.19 153.454 269.308 cv
153.378 273.877 151.91 278.747 151.497 282.952 cv
150.876 289.264 151.117 300.276 153.026 306.681 cv
153.026 306.68 153.026 306.679 153.026 306.679 cv
153.026 306.679 153.026 306.68 153.026 306.681 cv
153.008 306.487 153.001 306.281 152.985 306.085 cv
152.956 305.703 152.926 305.324 152.908 304.929 cv
152.884 304.422 152.873 303.9 152.867 303.373 cv
152.866 303.288 152.862 303.205 152.861 303.118 cv
152.852 301.888 152.885 300.609 152.953 299.297 cv
153.04 299.458 153.163 299.651 153.301 299.855 cv
154.102 301.04 155.673 302.85 157.099 304.459 cv
158.137 305.291 159.174 306.138 159.971 307.192 cv
161.71 309.492 163.268 312.8 164.284 315.516 cv
163.876 315.601 163.614 315.664 163.393 315.718 cv
162.697 315.887 162.44 315.944 159.517 316.186 cv
159.389 315.519 159.247 314.92 159.096 314.371 cv
cp
135.831 381.543 mo
136.029 384.909 136.083 387.834 136.023 390.362 cv
135.385 382.152 133.709 373.794 132.335 365.892 cv
131.276 360.495 130.392 355.362 129.585 350.422 cv
128.626 346.219 127.774 342.304 126.983 338.601 cv
127.636 338.456 128.291 338.315 128.945 338.174 cv
132.694 354.264 135.114 369.427 135.831 381.543 cv
cp
126.493 336.304 mo
122.348 337.213 118.21 338.169 114.083 339.185 cv
113.815 338.887 113.563 338.531 113.328 338.137 cv
116.682 337.191 119.993 336.224 123.319 335.354 cv
125.392 334.808 127.479 334.31 129.571 333.827 cv
129.558 334.456 129.576 335.059 129.634 335.619 cv
129.224 335.705 128.814 335.798 128.404 335.887 cv
128.405 335.891 128.406 335.896 128.407 335.899 cv
127.769 336.039 127.135 336.185 126.498 336.328 cv
126.497 336.319 126.495 336.311 126.493 336.304 cv
cp
109.782 371.619 mo
103.683 357.917 90.4434 325.595 87.0308 301.173 cv
80.8032 303.515 79.2231 304.658 74.4678 307.184 cv
74.2563 305.753 74.0625 304.346 73.8813 302.958 cv
73.855 302.75 73.8267 302.541 73.8008 302.333 cv
73.7256 301.744 73.6528 301.159 73.584 300.579 cv
73.5449 300.251 73.5083 299.927 73.4712 299.602 cv
73.3901 298.898 73.3135 298.201 73.2417 297.511 cv
73.1821 296.938 73.1235 296.365 73.0693 295.802 cv
73.0381 295.472 73.0098 295.147 72.9805 294.821 cv
72.9302 294.259 72.8823 293.701 72.8379 293.149 cv
72.8164 292.876 72.7939 292.603 72.7739 292.333 cv
72.7134 291.522 72.6567 290.717 72.6099 289.929 cv
72.4941 287.968 72.4292 286.163 72.4063 284.495 cv
72.5308 284.478 72.6577 284.451 72.791 284.405 cv
78.3018 282.542 83.7554 280.427 89.5181 279.56 cv
89.5068 280.903 89.522 282.296 89.5645 283.737 cv
89.3096 287.815 89.3198 294.611 92.2173 308.561 cv
93.8096 317.856 96.085 327.637 98.999 337.074 cv
103.691 352.272 108.291 366.514 112.821 378.099 cv
116.819 388.325 120.763 396.48 124.666 401.381 cv
119.855 395.413 114.627 384.526 109.782 371.619 cv
cp
80.2441 336.446 mo
81.2861 340.536 82.3779 344.748 83.5015 348.999 cv
82.8276 346.573 82.1641 344.092 81.5142 341.558 cv
81.0747 339.846 80.6548 338.143 80.2441 336.446 cv
cp
70.1128 316.55 mo
67.457 317.64 58.771 321.885 56.1382 323.028 cv
54.6938 313.56 54.0884 305.325 54.2104 298.817 cv
54.647 298.953 65.5918 295.779 70.6074 294.411 cv
71.7808 308.032 74.8027 324.768 79.2568 342.137 cv
83.3774 358.203 88.8281 374.75 94.4629 387.637 cv
90.3032 380.966 72.4063 332.238 70.1128 316.55 cv
cp
52.9722 330.943 mo
50.376 332.525 45.5161 333.552 38.5 336.5 cv
38.5 336.499 37.9224 334.037 37.9219 334.036 cv
37.5425 330.398 36.6221 322.391 36.6206 319.196 cv
36.7632 319.18 36.9111 319.148 37.0654 319.095 cv
42.0566 317.375 47.0288 315.516 52.397 313.706 cv
52.4819 313.677 52.5298 313.66 52.564 313.647 cv
52.5786 313.786 52.5933 313.927 52.6084 314.066 cv
53.0879 319.004 53.7021 322.987 54.6821 328.527 cv
55.0815 333.353 56.2461 339.061 57.7549 344.89 cv
57.9443 345.676 58.1216 346.464 58.3223 347.246 cv
59.7988 353.003 61.5029 358.44 63.3491 363.42 cv
65.1919 369.141 67.208 374.701 69.3223 379.85 cv
69.3223 379.852 69.3237 379.853 69.3237 379.853 cv
61.2979 365.192 55.9307 342.742 52.9722 330.943 cv
cp
36.5708 354.462 mo
34.9707 354.979 26.5137 358.27 26.3789 357.774 cv
22.0562 341.9 22.5698 329.674 28.1689 328.35 cv
29.2041 328.105 31.6011 327.419 34.2671 326.691 cv
34.3721 326.662 34.4805 326.633 34.5869 326.603 cv
34.6797 327.8 34.6484 327.59 34.7832 328.831 cv
31.3247 329.649 31.8447 328.882 30.0127 329.674 cv
24.5308 330.467 24.2559 335.496 23.9233 342.282 cv
24.0088 345.175 24.3628 348.415 25.0239 351.898 cv
24.6685 350.014 24.4043 348.202 24.2217 346.475 cv
24.3418 346.438 24.4619 346.403 24.5854 346.341 cv
28.4365 344.435 32.3579 342.679 36.2129 340.782 cv
36.5293 345.061 37.3374 349.714 38.6211 354.431 cv
39.5591 357.872 40.6714 361.096 41.9033 364.029 cv
43.3032 367.899 44.9961 371.903 47.0288 375.777 cv
43.6143 371.03 38.5435 359.453 36.5708 354.462 cv
cp
36.7021 315.513 mo
37.6978 308.156 40.104 302.209 41.835 301.767 cv
45.0303 300.946 li
46.9375 300.456 49.3486 299.838 51.7979 299.207 cv
51.7896 299.871 51.792 300.55 51.7988 301.237 cv
51.7988 301.237 li
51.8008 301.45 51.8037 301.665 51.8076 301.88 cv
51.8076 301.88 51.8076 301.88 51.8076 301.881 cv
51.811 302.057 51.8115 302.23 51.8154 302.408 cv
51.7075 302.418 51.7544 302.158 51.8076 301.881 cv
51.8037 301.665 51.8008 301.45 51.7988 301.237 cv
51.7983 301.237 51.7983 301.236 51.7983 301.236 cv
42.2451 302.577 39.7646 304.269 36.7021 315.515 cv
36.7021 315.514 36.7021 315.513 36.7021 315.513 cv
cp
52.5337 313.361 mo
52.541 313.431 52.5483 313.5 52.5557 313.57 cv
52.52 313.538 52.4922 313.479 52.5337 313.361 cv
cp
54.3799 294.877 mo
55.1924 291.326 57.2944 283.179 58.9409 282.756 cv
60.7148 282.303 65.3936 281.103 70.1128 279.894 cv
70.0757 280.88 70.0669 280.887 70.0684 281.867 cv
70.0674 281.918 70.0649 281.965 70.0649 282.016 cv
65.2573 283.489 57.5894 282.215 54.3794 294.881 cv
54.3799 294.879 54.3799 294.877 54.3799 294.877 cv
cp
72.4482 280.14 mo
72.644 278.055 73.3481 272.941 73.2144 272.994 cv
73.7568 270.385 74.521 268.796 75.3574 268.039 cv
75.3589 268.038 75.3594 268.038 75.3604 268.037 cv
75.499 267.912 75.6396 267.81 75.7817 267.728 cv
75.7827 267.728 75.7832 267.728 75.7847 267.728 cv
75.9268 267.647 76.0703 267.59 76.2139 267.552 cv
91.9824 263.5 li
91.564 264.367 91.5093 264.241 91.2163 265.403 cv
85.2695 266.896 74.3291 265.899 72.4194 281.012 cv
72.4272 280.714 72.4375 280.426 72.4482 280.14 cv
cp
124.792 321.953 mo
124.346 322.051 123.898 322.142 123.452 322.239 cv
120.027 307.125 116.106 293.742 106.507 273.819 cv
112.235 284.138 118.916 300.928 124.792 321.953 cv
cp
131.008 327.629 mo
131.001 327.669 130.994 327.708 130.987 327.748 cv
130.886 326.965 li
130.92 327.189 130.96 327.41 131.008 327.629 cv
cp
130.895 323.042 mo
130.759 324.176 130.708 325.31 130.815 326.414 cv
130.663 325.229 li
130.546 326.235 130.197 328.007 129.922 329.949 cv
127.403 330.391 124.886 330.856 122.38 331.386 cv
118.899 332.116 115.45 332.942 112.031 333.727 cv
111.995 333.604 111.958 333.48 111.922 333.358 cv
111.769 332.843 111.614 332.323 111.462 331.807 cv
111.319 330.352 111.333 328.853 111.542 327.436 cv
117.945 325.835 124.396 324.366 130.895 323.042 cv
cp
177.752 190.133 mo
178.767 190.493 179.78 190.868 180.798 191.226 cv
179.766 190.898 178.751 190.536 177.752 190.133 cv
cp
272.555 190.134 mo
271.559 190.536 270.545 190.898 269.514 191.225 cv
269.512 191.225 li
270.422 190.905 271.332 190.571 272.24 190.247 cv
272.346 190.209 272.449 190.17 272.555 190.134 cv
cp
281.102 314.335 mo
281.256 314.372 281.418 314.416 281.586 314.462 cv
281.418 314.443 281.248 314.422 281.076 314.403 cv
281.084 314.381 281.094 314.358 281.102 314.335 cv
cp
243.084 235.611 mo
249.5 235.5 255.259 238.558 255.519 239.802 cv
256.123 242.696 251.672 240.541 243.667 240 cv
230.896 239.137 230.787 247.491 230.787 247.491 cv
229.08 235.938 232.406 235.797 243.084 235.611 cv
cp
244.412 220.673 mo
252.434 220.673 260.189 220.586 260.189 226.082 cv
260.189 229.039 251.833 228.628 243.835 228 cv
233.776 227.211 230.363 232.58 230.363 232.58 cv
227.844 218.795 236.391 220.673 244.412 220.673 cv
cp
280.713 211.91 mo
278.482 215.686 273.631 220.52 269.252 220.523 cv
266.701 222.79 266.139 233.764 272.055 230.627 cv
270.406 233.764 266.521 234.566 264.617 236.461 cv
262.75 238.32 257.666 242.396 257.203 244.621 cv
256.83 242.612 262.33 237.352 259.402 236.177 cv
256.32 234.938 254.994 235.19 256.32 234.938 cv
264.631 233.355 264.281 230.588 265.33 226.811 cv
266.498 222.601 258.695 220.138 258.695 220.138 cv
264.131 218.38 269.396 217.233 269.986 215.395 cv
271.014 212.198 269.414 206.618 265.143 200.997 cv
269.018 200.491 271.047 205.202 272.055 207.352 cv
274.103 211.719 276.344 212.476 280.379 210.366 cv
280.83 210.131 281.295 209.87 281.791 209.564 cv
281.592 210.245 281.219 211.05 280.713 211.91 cv
cp
234.58 196.044 mo
237.359 195.61 240.963 196.388 244.904 197.382 cv
248.697 198.339 251.916 199.737 254.547 201.368 cv
259.918 204.7 262.791 209.012 262.791 212.594 cv
262.791 217.929 256.333 213.5 247.292 213.5 cv
238.251 213.5 229.014 215.83 229.014 204.951 cv
229.014 198.928 231.176 196.576 234.58 196.044 cv
cp
207.903 214 mo
198.862 214 189.255 217.667 189.255 212.332 cv
189.255 208.82 192.02 204.608 197.192 201.304 cv
199.876 199.589 203.197 198.115 207.142 197.12 cv
210.55 196.26 213.709 195.563 216.299 195.671 cv
220.369 195.84 223.032 198.003 223.032 204.689 cv
223.032 215.568 216.943 214 207.903 214 cv
cp
209.652 228.5 mo
201.655 229.128 192.635 229.039 192.635 226.082 cv
192.635 220.586 200.392 220.673 208.414 220.673 cv
216.434 220.673 224.979 218.795 222.461 232.58 cv
222.461 232.58 219.71 227.711 209.652 228.5 cv
cp
209.333 240 mo
201.415 241.277 197.393 242.733 197.393 239.776 cv
197.393 239.776 202.733 235.613 210.753 235.613 cv
221.432 235.613 223.744 235.938 222.038 247.491 cv
222.038 247.491 221.342 238.064 209.333 240 cv
cp
179.275 207.352 mo
180.283 205.203 182.311 200.497 186.183 200.997 cv
186.185 200.997 186.186 200.997 186.188 200.997 cv
186.188 200.997 186.188 200.997 186.188 200.998 cv
181.917 206.618 180.317 212.198 181.344 215.395 cv
181.934 217.233 187.199 218.38 192.635 220.138 cv
192.635 220.138 184.834 222.601 186.001 226.811 cv
187.049 230.588 186.699 233.355 195.011 234.938 cv
196.337 235.19 195.011 234.938 191.927 236.177 cv
189.002 237.352 194.5 242.612 194.127 244.621 cv
193.666 242.396 188.58 238.32 186.712 236.461 cv
184.81 234.566 180.925 233.764 179.275 230.627 cv
185.191 233.764 184.628 222.79 182.079 220.523 cv
177.131 220.519 171.59 214.357 169.899 210.513 cv
169.753 210.179 169.624 209.857 169.539 209.564 cv
169.707 209.668 169.865 209.757 170.028 209.852 cv
174.657 212.568 177.076 212.042 179.275 207.352 cv
cp
167.277 314.789 mo
166.873 314.838 166.466 314.881 166.061 314.931 cv
164.15 310.861 162.298 304.831 159.706 303.296 cv
154.531 300.231 153.915 295.992 153.613 291.897 cv
154.634 283.411 156.44 274.319 157.43 267.017 cv
158.968 255.671 156.613 246.142 155.212 235.512 cv
156.296 233.792 157.833 232.209 159.8 230.232 cv
160.24 229.791 160.654 229.342 161.065 228.893 cv
161.608 229.49 167.274 237.515 167.619 238.188 cv
168.477 239.855 168.883 243.185 169.472 244.782 cv
170.482 247.521 176.417 254.803 174.519 264.076 cv
174.048 266.381 168.794 279.354 167.223 284.53 cv
165.676 289.623 161.233 297.781 160.692 301.237 cv
163.098 303.721 166.128 308.915 167.277 314.789 cv
cp
210.447 274.266 mo
205.045 274.204 198.329 273.485 193.004 272.41 cv
188.107 271.422 185.068 269.77 179.176 269.093 cv
178.49 270.927 177.834 272.644 177.205 273.897 cv
174.531 279.221 171.905 284.802 169.235 290.068 cv
171.955 283.565 175.606 276.288 178.079 268.983 cv
177.987 268.975 177.901 268.964 177.808 268.957 cv
178.641 266.305 li
178.734 266.317 178.825 266.336 178.918 266.351 cv
179.507 264.357 178.21 262.348 177.71 259.528 cv
177.71 259.528 li
176.566 255.916 176.566 255.916 176.566 255.916 cv
180.989 257.094 194.076 261.302 198.866 262.192 cv
204.791 263.293 209.762 264.483 216.858 265.842 cv
204.95 265.842 190.897 261.39 180.5 258.75 cv
181.5 262 181.018 264.221 180.129 266.553 cv
190.589 268.373 200.201 272.682 210.447 274.266 cv
cp
258.328 272.41 mo
253.002 273.485 246.285 274.204 240.883 274.266 cv
251.131 272.682 260.742 268.373 271.201 266.553 cv
270.313 264.221 271.219 261.864 271 259 cv
260.603 261.64 246.381 265.842 234.471 265.842 cv
241.57 264.483 246.541 263.293 252.465 262.192 cv
257.256 261.302 270.344 257.094 274.766 255.916 cv
274.766 255.916 274.766 255.916 273.621 259.528 cv
273.621 259.528 li
273.951 261.497 271.824 264.357 272.414 266.351 cv
272.506 266.336 272.598 266.317 272.689 266.305 cv
273.523 268.957 li
273.43 268.964 273.346 268.975 273.252 268.983 cv
275.725 276.288 279.375 283.565 282.096 290.068 cv
279.426 284.802 276.799 279.221 274.125 273.897 cv
273.496 272.644 272.84 270.927 272.154 269.093 cv
266.262 269.77 263.223 271.422 258.328 272.41 cv
cp
291.83 231.578 mo
293.17 232.964 294.271 234.202 295.096 235.512 cv
293.695 246.142 291.34 255.671 292.879 267.017 cv
293.529 271.824 294.535 277.409 295.439 283.087 cv
295.432 283.098 295.426 283.108 295.418 283.119 cv
295.779 285.459 296.109 287.799 296.387 290.096 cv
296.086 294.19 295.469 298.428 290.295 301.491 cv
288.139 302.769 286.494 307.152 284.902 310.935 cv
284.49 311.663 284.1 312.396 283.74 313.118 cv
283.703 313.114 283.666 313.109 283.629 313.104 cv
283.65 313.151 283.658 313.204 283.674 313.253 cv
283.602 313.401 283.533 313.543 283.463 313.69 cv
282.799 313.556 281.975 313.544 281.381 313.571 cv
281.875 312.256 282.461 310.979 283.113 309.735 cv
284.414 305.73 285.658 303.07 288.59 299.885 cv
288.254 298.532 285.324 289.136 283.781 284.132 cv
280.605 273.854 274.355 264.737 276.41 260.686 cv
277.701 258.143 279.615 252.354 280.836 249.701 cv
283 245 282.048 240.958 282.667 239.334 cv
284.981 236.007 287.667 231.667 290 228.334 cv
289.881 228.443 289.703 228.753 290 228.334 cv
290.021 228.355 291.787 231.533 291.807 231.555 cv
291.732 231.648 291.652 231.748 291.564 231.857 cv
291.625 231.801 291.719 231.701 291.83 231.578 cv
cp
141.473 153.323 mo
142.394 147.098 146.134 140.105 150.83 135.782 cv
153.063 133.726 155.622 131.871 158.341 130.497 cv
159.486 129.918 160.834 129.225 162.038 128.794 cv
162.441 128.65 162.968 128.579 163.501 128.505 cv
163.979 128.54 164.468 128.751 164.924 129.331 cv
164.939 129.238 164.957 129.16 164.938 129.346 cv
164.938 129.345 164.938 129.345 164.938 129.344 cv
164.938 129.346 li
165.102 128.862 165.291 128.393 165.501 127.937 cv
165.548 127.9 165.592 127.862 165.633 127.821 cv
165.633 127.663 li
165.831 127.254 166.049 126.858 166.282 126.472 cv
166.311 126.423 166.342 126.374 166.372 126.325 cv
167.105 125.134 167.995 124.047 168.999 123.059 cv
169.181 122.733 169.378 122.416 169.581 122.104 cv
172.706 118.645 176.925 115.219 181.069 112.709 cv
188.165 108.407 194.132 107.101 198.24 106.754 cv
197.726 112.062 197.234 117.482 195.061 122.335 cv
198.915 117.021 199.014 110.026 200.266 103.9 cv
201.476 97.9829 201.978 90.6953 201.933 85.082 cv
202.546 85.0356 201.933 85.082 202.447 84.4956 cv
202.379 84.9663 202.328 85.4351 202.305 85.9019 cv
202.087 90.3931 203.705 94.1353 206.362 97.0977 cv
207.631 100.749 208.706 104.617 210.512 108.228 cv
213.153 113.514 217.504 120.897 217.8 126.845 cv
217.807 121.981 217.043 117.686 214.903 113.252 cv
214.067 111.521 213.053 109.717 212.088 107.863 cv
209.066 100.248 209.716 97.7476 216.727 102.912 cv
222.32 107.032 222.979 107.489 226.307 107.618 cv
229.896 107.758 235.004 100.552 237.322 100.552 cv
239.107 100.552 237.574 108.305 236.633 110.854 cv
236.199 111.666 235.783 112.467 235.404 113.252 cv
233.264 117.686 232.502 121.981 232.506 126.845 cv
232.805 120.897 237.154 113.514 239.797 108.228 cv
241.602 104.617 242.676 100.749 243.945 97.0977 cv
246.604 94.1353 248.221 90.3931 248.002 85.9019 cv
247.98 85.4351 247.928 84.9663 247.859 84.4956 cv
248.375 85.082 247.762 85.0356 248.375 85.082 cv
248.33 90.6953 248.832 97.9829 250.041 103.9 cv
251.293 110.026 251.393 117.021 255.248 122.335 cv
253.074 117.482 252.582 112.062 252.068 106.754 cv
256.176 107.101 262.143 108.407 269.24 112.709 cv
273.529 115.308 277.902 118.888 281.055 122.471 cv
281.35 122.852 281.631 123.244 281.891 123.655 cv
282.715 124.541 283.449 125.501 284.066 126.537 cv
284.078 126.558 284.094 126.58 284.105 126.601 cv
284.309 126.946 284.5 127.299 284.676 127.663 cv
284.676 127.821 li
284.715 127.862 284.76 127.9 284.807 127.937 cv
285.018 128.393 285.207 128.862 285.371 129.346 cv
285.352 129.161 285.369 129.238 285.383 129.331 cv
285.84 128.751 286.328 128.54 286.807 128.505 cv
287.342 128.579 287.867 128.65 288.271 128.794 cv
289.475 129.225 290.822 129.918 291.967 130.497 cv
294.688 131.871 297.246 133.726 299.478 135.782 cv
304.174 140.105 307.914 147.098 308.836 153.323 cv
310.184 162.433 308.641 172.689 302.957 180.047 cv
301.871 181.455 300.85 182.019 299.853 182.054 cv
297.66 182.129 295.576 179.644 293.117 177.952 cv
290.426 176.098 287.984 173.881 285.65 171.617 cv
282.951 169.001 281.08 165.8 278.498 163.195 cv
279.266 166.277 280.5 169.215 281.424 172.245 cv
281.967 174.029 282.637 175.814 282.908 177.662 cv
283.004 178.293 282.994 178.978 283.006 179.659 cv
283.012 179.885 283.018 180.112 283.031 180.336 cv
282.795 180.717 282.576 181.11 282.363 181.508 cv
282.313 181.609 282.26 181.71 282.207 181.811 cv
282.025 182.165 281.853 182.526 281.688 182.892 cv
281.666 182.941 281.643 182.989 281.621 183.039 cv
281.455 183.417 281.295 183.8 281.146 184.19 cv
275.896 188.434 268.857 191.655 262.541 192.769 cv
262.801 192.762 263.057 192.744 263.313 192.723 cv
263.228 192.737 263.15 192.755 263.068 192.769 cv
263.203 192.768 263.332 192.763 263.465 192.761 cv
263.451 192.764 263.438 192.767 263.422 192.769 cv
269.783 192.733 274.078 191.339 279.646 189.763 cv
279.553 190.294 279.473 190.831 279.402 191.371 cv
279.383 191.519 279.365 191.669 279.348 191.816 cv
279.318 192.064 279.285 192.31 279.26 192.558 cv
268.551 196.842 241.439 197.206 231.676 187.118 cv
230.313 184.227 229.199 181.104 228.395 177.9 cv
227.848 174.271 227.742 170.569 228.053 167.004 cv
228.416 162.851 228.379 158.608 229.186 154.473 cv
229.771 151.481 230.902 149.358 232.393 146.729 cv
233.787 144.273 234.244 141.84 237.328 138.89 cv
232.004 141.574 226.014 151.716 225.359 152.835 cv
224.706 151.716 222.165 148.175 219.836 144.421 cv
215.953 139.324 213.722 139.059 213.104 138.597 cv
215.839 141.521 217.418 144.623 219.06 147.528 cv
220.546 150.16 220.537 151.481 221.122 154.473 cv
221.93 158.608 221.892 162.851 222.256 167.004 cv
222.566 170.569 222.46 174.271 221.914 177.9 cv
221.109 181.104 219.995 184.227 218.632 187.118 cv
208.87 197.206 181.758 196.842 171.049 192.558 cv
171.023 192.306 170.989 192.057 170.96 191.806 cv
170.942 191.663 170.926 191.52 170.908 191.377 cv
170.836 190.836 170.756 190.296 170.663 189.763 cv
176.23 191.339 180.525 192.733 186.886 192.769 cv
186.872 192.767 186.857 192.764 186.843 192.761 cv
186.976 192.763 187.104 192.768 187.24 192.769 cv
187.158 192.755 187.079 192.737 186.997 192.723 cv
187.252 192.744 187.508 192.762 187.767 192.769 cv
181.451 191.655 174.413 188.434 169.163 184.19 cv
169.013 183.797 168.852 183.413 168.684 183.032 cv
168.666 182.991 168.646 182.951 168.628 182.91 cv
168.46 182.534 168.282 182.164 168.095 181.8 cv
168.046 181.706 167.998 181.61 167.948 181.516 cv
167.734 181.115 167.514 180.719 167.276 180.336 cv
167.332 179.44 167.274 178.503 167.399 177.662 cv
167.672 175.814 168.342 174.029 168.885 172.245 cv
169.808 169.215 171.042 166.277 171.811 163.195 cv
169.228 165.8 167.357 169.001 164.658 171.617 cv
162.323 173.881 159.883 176.098 157.191 177.952 cv
154.733 179.644 152.648 182.129 150.455 182.054 cv
149.457 182.019 148.438 181.455 147.351 180.047 cv
141.669 172.689 140.123 162.433 141.473 153.323 cv
cp
198.159 82.3076 mo
197.065 80.3965 197.29 78.3008 197.07 76.1055 cv
196.838 73.7759 196.096 71.8999 195.704 69.7388 cv
195.279 67.3989 196.444 66.7578 198.583 66.7168 cv
198.953 67.1606 199.247 67.3936 199.947 67.186 cv
199.07 64.2178 199.485 60.9976 199.799 57.8804 cv
200.524 50.6875 201.404 43.7681 206.867 38.3389 cv
210.146 35.0796 214.643 32.8809 220.794 31.6699 cv
228.318 30.2969 238.715 33.6436 243.441 38.3389 cv
248.904 43.7681 249.531 48.3174 250.256 55.5098 cv
250.57 58.6274 251.238 64.2178 250.361 67.186 cv
251.063 67.3936 251.354 67.1606 251.725 66.7168 cv
253.863 66.7578 255.027 67.3989 254.604 69.7388 cv
254.211 71.8999 253.471 73.7759 253.236 76.1055 cv
253.016 78.3008 253.242 80.3965 252.148 82.3076 cv
251.361 83.6816 248.551 86.1567 247.77 83.396 cv
247.707 83.5845 li
247.137 80.5229 247.768 77.1372 248.549 72.7588 cv
249.941 64.9438 247.365 63.417 247.365 63.417 cv
249.457 69.3452 245.154 73.9976 245.48 79.7622 cv
245.537 80.7734 245.752 81.7729 245.984 82.7822 cv
246.008 86.7241 245.695 91.7886 242.654 92.7231 cv
243.486 89.001 242.086 84.4956 242.086 80.8188 cv
242.086 86.0635 242.324 90.3887 238.221 94.0967 cv
237.5 94.4829 226.648 101.312 214.132 95.2788 cv
208.199 93.7583 208.431 82.1011 208.431 80.8188 cv
208.431 81.7441 206.641 89.7505 207.871 93.521 cv
205.725 91.8877 204.202 89.5342 203.629 86.9219 cv
203.705 84.4185 204.695 82.1211 204.828 79.7622 cv
205.153 73.9976 200.85 69.3452 202.942 63.417 cv
202.942 63.417 201.551 65.5439 202.226 73.4531 cv
202.642 78.3208 203.17 80.5229 202.601 83.5845 cv
202.539 83.396 li
201.756 86.1567 198.946 83.6816 198.159 82.3076 cv
cp
319.111 325.172 mo
319.014 325.943 li
319.006 325.904 318.998 325.864 318.992 325.824 cv
319.039 325.609 319.08 325.392 319.111 325.172 cv
cp
338.459 325.631 mo
338.668 327.048 338.682 328.544 338.539 330 cv
338.387 330.514 338.232 331.03 338.08 331.545 cv
338.043 331.67 338.006 331.796 337.969 331.922 cv
334.551 331.139 331.102 330.311 327.619 329.582 cv
325.113 329.052 322.598 328.587 320.078 328.146 cv
319.805 326.203 319.455 324.431 319.338 323.425 cv
319.185 324.605 li
319.293 323.504 319.242 322.374 319.105 321.241 cv
325.623 322.568 332.078 324.036 338.459 325.631 cv
cp
343.494 272.014 mo
333.893 291.94 329.973 305.324 326.547 320.44 cv
326.102 320.342 325.652 320.251 325.207 320.154 cv
331.084 299.126 337.766 282.333 343.494 272.014 cv
cp
373.787 265.748 mo
373.93 265.784 374.074 265.843 374.217 265.923 cv
374.217 265.924 374.219 265.925 374.219 265.925 cv
374.361 266.005 374.502 266.107 374.641 266.232 cv
374.641 266.232 374.641 266.233 374.643 266.234 cv
375.478 266.992 376.244 268.581 376.785 271.19 cv
376.652 271.136 377.355 276.25 377.553 278.336 cv
377.563 278.623 377.574 278.91 377.58 279.207 cv
375.672 264.095 364.73 265.091 358.785 263.599 cv
358.49 262.436 358.438 262.563 358.018 261.695 cv
373.787 265.748 li
cp
391.059 280.952 mo
392.705 281.375 394.809 289.522 395.621 293.071 cv
395.621 293.073 395.621 293.075 395.621 293.077 cv
392.41 280.41 384.744 281.685 379.935 280.212 cv
379.935 280.154 379.934 280.101 379.932 280.042 cv
379.934 279.082 379.924 279.068 379.889 278.089 cv
384.607 279.299 389.285 280.499 391.059 280.952 cv
cp
397.467 311.555 mo
397.51 311.675 397.48 311.733 397.445 311.766 cv
397.451 311.696 397.461 311.625 397.467 311.555 cv
cp
398.191 300.078 mo
398.191 300.076 398.191 300.075 398.191 300.075 cv
398.195 299.859 398.199 299.646 398.201 299.434 cv
398.201 299.434 li
398.209 298.746 398.211 298.065 398.203 297.403 cv
400.652 298.033 403.063 298.652 404.969 299.142 cv
408.164 299.962 li
409.898 300.405 412.303 306.353 413.299 313.71 cv
413.299 313.71 413.299 313.71 413.299 313.711 cv
410.236 302.464 407.756 300.773 398.203 299.433 cv
398.201 299.434 li
398.199 299.647 398.197 299.862 398.191 300.078 cv
398.246 300.354 398.293 300.614 398.185 300.603 cv
398.189 300.427 398.191 300.254 398.191 300.078 cv
cp
422.441 324.298 mo
421.41 324.021 419.01 323.365 416.348 322.64 cv
416.092 322.569 415.83 322.499 415.57 322.428 cv
415.711 319.921 415.756 317.522 415.693 315.272 cv
415.406 304.869 413.004 298.795 408.744 297.704 cv
405.549 296.885 li
403.475 296.352 400.807 295.668 398.137 294.982 cv
397.75 285.946 395.76 279.753 391.637 278.695 cv
389.773 278.218 384.699 276.918 379.744 275.647 cv
379.178 268.348 377.381 264.264 374.365 263.491 cv
354.623 258.428 li
354.293 258.344 353.949 258.3 353.603 258.3 cv
344.6 258.3 331.641 288.631 322.928 319.669 cv
321.525 319.373 320.121 319.078 318.713 318.795 cv
318.451 317.43 318.148 316.103 317.949 314.876 cv
317.523 312.26 316.955 309.971 316.508 307.629 cv
316.275 306.103 316.117 304.522 316.115 302.774 cv
316.109 299.06 318.18 294.169 318.992 290.745 cv
322.193 280.213 326.148 273.375 326.139 260.637 cv
326.137 256.654 325.691 253.041 326.25 249.247 cv
326.459 247.833 326.762 246.431 327.078 245.021 cv
327.607 242.673 328.178 240.304 328.42 237.832 cv
329.189 229.904 328.727 222.518 325.797 215.074 cv
324.887 212.759 324.213 210.442 323.814 208.238 cv
323.875 207.874 323.934 207.514 323.988 207.158 cv
324.154 206.092 324.281 205.071 324.316 204.139 cv
324.539 198.296 324.016 192.82 322.961 187.28 cv
321.941 181.922 321.088 175.876 318.863 170.854 cv
317.611 168.031 313.873 164.163 312.279 160.931 cv
312.353 152.583 310.352 143.056 305.457 137.377 cv
302.492 133.935 298.945 131.402 294.973 129.621 cv
291.93 128.197 289.975 127.449 286.684 126.845 cv
281.16 114.163 261.037 104.594 251.883 103.909 cv
251.83 103.452 251.789 102.992 251.758 102.527 cv
251.707 102.49 251.652 102.452 251.604 102.415 cv
251.547 101.978 251.49 101.542 251.426 101.109 cv
250.721 96.2788 248.922 89.6968 251.156 85.0376 cv
251.799 84.6846 252.377 84.1104 252.781 83.396 cv
253.963 81.3062 253.35 78.6606 253.682 76.3218 cv
254.033 73.8408 255.424 71.6411 255.287 69.0435 cv
255.207 67.5127 255.166 70.2466 255.207 67.5127 cv
255.238 65.5737 254.234 64.2231 252.922 64.9214 cv
252.818 61.3931 252.461 58.5229 252.098 54.9194 cv
251.748 51.4595 250.82 46.7803 249.691 43.3633 cv
247.117 35.5625 239.525 32.3315 233.262 29.9341 cv
229.031 28.3145 220.094 28.0552 215.018 30.0156 cv
208.762 32.4312 203.858 36.9912 201.209 43.3633 cv
199.829 46.686 198.558 51.4595 198.211 54.9194 cv
197.848 58.5229 197.489 61.3931 197.387 64.9214 cv
196.075 64.2231 195.071 65.5737 195.101 67.5127 cv
195.143 70.2466 195.101 67.5127 195.02 69.0435 cv
194.884 71.6411 196.275 73.8408 196.626 76.3218 cv
196.958 78.6606 196.344 81.3062 197.526 83.396 cv
197.931 84.1104 198.509 84.6846 199.153 85.0376 cv
201.387 89.6968 199.586 96.2788 198.881 101.109 cv
198.818 101.542 198.76 101.978 198.705 102.415 cv
198.703 102.415 198.701 102.417 198.7 102.418 cv
198.835 102.582 198.908 102.803 198.838 103.078 cv
198.761 103.385 198.669 103.681 198.586 103.983 cv
187.515 104.692 180.104 109.802 175.05 113.485 cv
169.011 117.886 163.188 125.538 162.365 126.845 cv
159.076 127.449 158.38 128.197 155.339 129.62 cv
151.364 131.401 147.816 133.934 144.851 137.377 cv
139.957 143.056 137.955 152.583 138.028 160.931 cv
136.436 164.163 132.697 168.031 131.446 170.854 cv
129.221 175.876 128.367 181.922 127.347 187.28 cv
126.292 192.82 125.769 198.296 125.992 204.139 cv
126.04 205.383 126.25 206.782 126.495 208.238 cv
126.097 210.442 125.421 212.759 124.511 215.074 cv
121.582 222.518 121.119 229.904 121.889 237.832 cv
122.274 241.787 123.503 245.477 124.057 249.247 cv
124.616 253.041 124.172 256.654 124.169 260.637 cv
124.159 275.647 125.981 276.963 132.02 292.306 cv
132.833 295.729 134.198 299.06 134.193 302.774 cv
134.187 307.963 132.855 311.735 132.051 316.68 cv
131.852 317.905 131.551 319.229 131.29 320.591 cv
129.88 320.875 128.475 321.17 127.07 321.467 cv
118.358 290.431 105.4 260.103 96.3975 260.103 cv
96.0503 260.103 95.7075 260.147 95.3779 260.231 cv
75.6353 265.295 li
72.6182 266.068 70.8228 270.152 70.2568 277.451 cv
65.3003 278.723 60.2275 280.022 58.3623 280.499 cv
54.2412 281.557 52.252 287.751 51.8633 296.787 cv
49.1934 297.472 46.5249 298.157 44.4512 298.69 cv
41.2563 299.509 li
36.9966 300.6 34.5933 306.674 34.3071 317.075 cv
34.2456 319.326 34.2905 321.725 34.4297 324.232 cv
34.1704 324.303 33.9092 324.374 33.6538 324.444 cv
30.9922 325.17 28.5894 325.824 27.5596 326.102 cv
20.4385 328.043 20.2236 344.041 24.1309 358.387 cv
28.2686 373.605 35.8149 384.649 42.0737 384.649 cv
42.542 384.649 43.0039 384.588 43.4434 384.468 cv
44.3403 384.227 47.3159 383.418 50.3403 382.595 cv
55.3052 391.834 60.583 397.483 64.999 397.483 cv
65.4531 397.483 65.9023 397.427 66.3354 397.316 cv
76.4116 394.728 li
81.0024 402.815 85.6768 407.979 89.8057 407.979 cv
90.2158 407.979 90.6211 407.93 91.0127 407.828 cv
92.5591 407.43 98.4434 405.92 103.538 404.614 cv
106.568 408.884 109.468 411.368 112.043 411.368 cv
112.39 411.368 112.733 411.324 113.063 411.24 cv
134.083 405.849 li
133.998 405.633 li
137.571 403.361 138.975 395.243 138.156 381.405 cv
137.461 369.645 135.184 355.067 131.657 339.561 cv
132.489 340.171 133.617 340.629 134.766 340.983 cv
135.815 341.307 136.878 341.545 137.737 341.736 cv
137.76 341.741 137.781 341.739 137.804 341.744 cv
138.878 341.958 139.903 341.607 140.874 341.316 cv
141.549 341.114 142.2 340.944 142.819 341.022 cv
142.819 341.022 142.956 341.908 144.051 342.573 cv
144.494 342.843 145.088 343.077 145.901 343.201 cv
147.301 343.201 148.285 342.333 148.43 341.597 cv
149.867 341.356 152.901 344.859 154.848 340.663 cv
154.863 340.629 154.88 340.598 154.896 340.563 cv
154.96 340.574 155.017 340.583 155.079 340.596 cv
158.34 341.215 158.994 340.189 160.618 337.429 cv
161.436 336.039 163.396 333.835 164.057 331.919 cv
186.646 328.773 206.382 327.748 229.916 327.748 cv
244.305 327.748 262.137 327.81 276.31 329.027 cv
279.545 329.434 282.785 329.863 286.02 330.321 cv
286.742 332.188 288.594 334.284 289.383 335.625 cv
290.609 337.708 291.281 338.804 292.938 338.949 cv
293.52 339 294.217 338.938 295.103 338.758 cv
297.047 343.118 300.123 339.55 301.57 339.793 cv
301.717 340.529 302.699 341.397 304.1 341.397 cv
304.266 341.37 304.424 341.341 304.572 341.307 cv
305.082 341.19 305.492 341.028 305.824 340.844 cv
307.037 340.172 307.182 339.219 307.182 339.219 cv
308.711 339.024 310.416 340.342 312.264 339.932 cv
313.123 339.741 314.185 339.502 315.236 339.178 cv
316.383 338.824 317.512 338.366 318.344 337.758 cv
314.816 353.263 312.539 367.841 311.844 379.601 cv
311.025 393.439 312.43 401.558 316.002 403.829 cv
315.916 404.044 li
336.938 409.436 li
337.268 409.521 337.611 409.564 337.957 409.564 cv
340.533 409.564 343.432 407.079 346.461 402.81 cv
351.557 404.116 357.441 405.625 358.986 406.023 cv
359.379 406.124 359.785 406.175 360.195 406.175 cv
364.322 406.175 368.998 401.011 373.59 392.925 cv
383.664 395.512 li
384.098 395.623 384.549 395.679 385.002 395.679 cv
389.418 395.679 394.695 390.029 399.66 380.79 cv
402.685 381.612 405.66 382.422 406.559 382.664 cv
406.996 382.784 407.459 382.845 407.926 382.845 cv
414.185 382.845 421.732 371.801 425.869 356.582 cv
429.775 342.237 429.563 326.238 422.441 324.298 cv
cp
f
306.047 318.787 mo
305.918 317.944 305.777 317.107 305.668 316.354 cv
305.666 316.353 305.662 316.353 305.66 316.352 cv
305.613 315.984 305.572 315.644 305.545 315.354 cv
305.529 315.179 305.516 315.017 305.508 314.876 cv
305.35 311.851 305.35 311.851 306.115 305.763 cv
305.813 306.978 li
303.926 312.134 303.959 324.159 306.373 326.654 cv
306.891 325.489 306.416 321.834 305.99 318.777 cv
306.01 318.781 306.029 318.784 306.047 318.787 cv
cp
f
300.715 310.88 mo
299.98 316.09 298.883 319.647 299.404 326.418 cv
299.709 327.026 li
301.264 323.425 301.471 321.751 301.594 319.367 cv
301.779 315.772 300.611 314.468 300.715 310.88 cv
cp
f
308.279 306.37 mo
307.81 313.598 308.137 318.272 310.645 323.684 cv
309.746 320.929 309.633 318.373 309.668 315.767 cv
309.732 316.698 li
309.703 316.392 309.689 316.071 309.668 315.756 cv
309.699 313.554 309.832 311.315 309.695 308.89 cv
310.199 301.156 312.135 292.618 314.775 286.407 cv
311.547 292.298 308.543 300.879 308.279 306.37 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (??????? ??????) ()
%%Title: (1505.m00.i121.n039.P.c25.256255714 Vector muscle man bodybuilder.eps)
%%CreationDate: 5/5/2015 11:42 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJZ8VW0T'MjF+R`]'Y,o;:gB\+%Chtf`]ko<r!bAZ@Mn;+oT&9Oe*Ka>O#mlKWp<h;LICdH/jVF8HYt*BYH^g"4]j.P/
%D)VAsbnui`gG(JYfD,*TmbN4r3=+A@[O<t)h-*qLm'dn0YhdS`Wf:&+23\&?XCkiScfg^)k$qMq2ZCp:<f<d^lBBtBNjgOhE4aMt
%'g!9lCG=*rk0@o"e;FOHT/D"o?E/1liBHoFb<%TX^!4<:a8D:AYg]<-dB![*3dA*$>RZpWIhk3iKP-QnVcE(_)YGbABU[[qA^\K#
%=d1"A0H,`G=eHimL%)J%X`e54R9hE?@qRNK+dOm19gIFfbGC%0s't8BjDW2%!RX+^$NK"!G54r/Z^J'R[`l(m?bdYY1iRF=oWtMY
%W(Rd(ZG;C:*Zg$CB!p7tq%-9LaZ>h)q4H_TU;h:9gi14gZ`]d#EG['B\/E?J^T%9`dqsF7&H8baJ$*CTLW+;ddc[-9FUfr%U%?c%
%UVR2kC=mi:YB4I49SN^k&?d#6YUTmW]5Lc/383HUn:,S=ULNO?lk#F?Wa2.4C;r3,hd1MB]>\,cWuVWd*:Gc&qGH8n06G1AXGgl`
%)-Ni-nH1.".*(p7b&e:E(la@Qcoi<"_r9qq(%/IZB9i>YMXkF:*RiCMqQ*[GpB]8)1VWdBEQJ!5ItQrl]i7>2dg>?fg6HrRJ(5L[
%0X@kl1&"_^S8Znr!k8s=2MoN@7/tfWRJsVg(]KDKkVb:R$oi^lTFR5J#6+A3?H[9dnU@l=5<`j?]$6fBC#e+N>0)sJ-Xl.C=R%_H
%FJe0DhT:!<b@5(7Y@6Rl<@lN7o_5ji[TI5r?8E__fa9P+/+r#=7fSsT5M]1G,eX3]\lJbJ<ZB<%^sXj[Lr<ul`E%_CL^2_;r1m\W
%Zqn@Yd4jp782V_k99Zf<8)Z?.j'U1VnPbmUFt<5Y6SPUolMT=K?/WN@@Bmk)dgUPI&U$e0K>VHfs"a(mZ#`[7+fq$bnQs:DHi&c8
%(Kd+<o>PIPEn2]ucRYj9AujZMcQ"e\eTg^0^W/,VJ)d0J1F3s1YZ9S]$U0nieI;^1,Ru2M-?uu/f<C\,a(^tgg6f!_Kili\X*A3F
%_`s&Io=L9O<5a%VX*2pi<nas+oH[t>DGI$-%1drr4(0VqFBIPA%GRZWTAk:Ii#D(3n"'^'G$:l/Srbu!<]X[XDDl6(W103mo3sN:
%*K"#Ap4d[L8ZjB$f#l.C&ks87j5IU_`1T0<:`dT*cE,IO5.oTt:$Mu`\PO_@Rjb^o?1ZNKB&Tps[8&rhcj$j,-f%NgN,4n#k$"nH
%@%5SiV-7bjF`(W"*po%KM1<Hn3kp2'rO?7j>Kf2jU`o&:rCq_VX'OQDf8(dH@SL%QeA#NOPD[4a.8]eTHmgBf%2+.kb+8,<M!0#G
%NQcZM3BQ]*^a<eU/p)+qa15sV]QgN\8#fH^JIi`Z$^h2Ldg97UHCR`uGHi$N!kH%rbNVik1nN@a[SFncXI$fiG=Qsb].NR2j5H)&
%_mphRP@?W/DM:<dKR"K%5L=jaaOM5bSI4URf-Ar1G&TO=U#`r=j$M&(*ijUr[TD`.J#5O^fm$a]iHedj<\&!1X(gW^e1`2T)7=(!
%eXE[SP2Xf29I$h)X*9#E&#E/G7?Dp!%^!`>?&+DWWt[`2j#RW=W=Tsi4sLl25bcX7>=C:k;kVQS3p-=V2HZHNZ4tpP2m%[sQ0T7U
%W">P4f&ijb7%c4mjX(G)kqhGf\LI:!0]c&678e?1Y8`c#lkjdm*"d6rDXqVS'MN.WbKXn7\LfbLjlX#,5MVQ/0k\:j98CH]gN3'>
%flO-SR3m8u1]/+k&'p0q`h.a)J8Q:m*Kc_*jN`:g9VF2M468g(ZblODW=4>go5W`3;XKL-<)]kU5:^p3m7OXt3?#NOesk,/b:MG;
%EZ1WU*i%4ZK0pREV`[HAVf@%:%QdbIL+0k&H]6]YhXW.<(1d$%\8^KSo?h_ST:G^W:#d2Bm3Z&C9KW\UOfd("[SDaWn?>kcG:n<g
%a+Y<Bm.\)dm`kdQ&&r*VUc9ei\m$bpnr7t-;lln5l>i5riFerVE9j]>UE87t_-WHW2)nX$62rnBXpQNk()-,:=>A8F`d^mZnXm)P
%)#K:b]sF3R's[]6Q>rk,lE8\WVGcZhTjM3e,6OnKl,9V`^G@2jfgdi82UBXB*0\AC;CH8rBs.ER(iOg@*3:tV=As0%VLT'#>'r5^
%l?"c'1Y#!&p132;l5oWWTZ2aSYuU%Yf>:9$U7*Rb=KQ\T\:6+Ns/4,61td0g:[_#Fi&D8><S0>?Z'/+cmA.L1Z[!V,FVXL!T>/QV
%P:@S_ia$1GE0tUbR8WW%T2F675a"pWdAUrk_XKc=!d4+GNEN47:tZPJc`LZedS7%m;8_qXag7.q<Nb8:^DXB%dN$K,F-[M"9Uf2\
%WmPRQj(6%@9$d^0+g]/-k0.U-R9,hlT1N[%1K[+)jif5T%G?DApQ\lP,X%QLQcIMs0l7_SMR-]'Z7nIrZ8F:oT=i&9<;^U],u'8]
%jf,<K5=ojg-=?8<0u9_\n4`W["f$*[P&)[d?N56`qGZ43a\Uuc#nD?GJug;k>GXSoC5P@g;?R3qkJ_a1X<**rrgZKI38p\dj2*I9
%,'\HUr%<12Za;/\g.cr0$(l]m<GYF,aJfng\.kXFl*,9hcS&i^rDE7dnTolaO(f<VW8T"C`lXQEZgdNn)C21SUR(A#?,\'9S%kdD
%X@^/IBo5K[o"C(uc@O*PodQ!t?+5:2DVJmJA>I[H[@/^XV`MPEF[et&A;heYP:k9u>\MV+ob8cO/=!fSmM.J7,X0>ij$Kd]ZL47b
%ZZ<U.O8#Ke.rIC#XAZ:m,\k`fY8N2_n`t*X/gQA*5E!9S>V9K?SRO)qgQ\"6ZTM-YEtY(@dPQ'XZ*CtV`aC$N.G1#$L$>tpW21(l
%gh^5?<%IXGR%ei&<32DTn_OrcopUokZ7+9S[8b"Tq0/rK(*7(W!S_5*T7K\#dO\q'Ud8JDg_]QUP_ntWcG-it4IrH"W>OEdMjcJ@
%Q;(X;8nf&];:6RAD5([cF&>i6AQ+bMP3RcqIP/c:Yi*q\jJ&G9@\/K5cUF8bU>5+6Aigetr<%(;;R,tQQVk)NMin:$C"'#Y4VoCZ
%@86UcR+5H+dOaIRUd8JDDZ/H1V4#>nRT+rc"0OB(Z^gI(o2;EcbthgF?JLp>KD;RL)!;6<lM\TTc>eEm;`XiHh-JJX^X>*bVWFYH
%=aSfuGJEu1<lTHl=(^TBm3[5*Sb'6'>;55UF1sQqCK&($[TWg%X(ud!D3ERU#U5g\[5h=#)-<:XCNF'(cIM&^D-"/M1*Ui<2[AZH
%Oh%=@K)[\R4&l<sq),bZ2=fn].)ctGYL37dp!J_.A=O>?I"LuVWZ8`@gMpq<`#SJ$ItcGOC@TpG/<i'<^Fb[ZP?MCs1%L`kBm[K]
%A^m/_A<]I]2)=gm)Z?*'GE%'mbYZ<]9(VVl'YI=BWL(NO8q$>e;Yr6%RUNI"8;1$;mC5u^5JT'D&+EgOWTUJR%(g$@f6@5&#G@N1
%oAt:?B)BQ68Q1U\lU-C+#DVYknoN9.BRJ6fQ#p^;PLK<),O@2U($-n5bG;JNOUM(+Jk+k#ph80GNAd1kHehO8I#8e-5/M1e\NgL?
%fL;6eIkeriT*C'JBg@)+=Q@<XL)Sa`oAZ7qq2+:V.=C+kUV`=F,\Bh1%\p1)*tE%E`dXu:3Nn.-1`FQeb/bHJ\+";LP1(8(\Dc,d
%/,eUqIe3@'Di=Y@_Y\rVphu$aR]6'8?VEk<9k,d:-(W)(k:tk>b]b-"S]?-@1#N"0<9@Q`\7Y')_8A7k%_6l/GG5P2H-CIVGsH,j
%iaL!-d/."-MqEK4eS=-jlVX]`cH\N$@&8O32cF*CfO;((e&:kE'[P%3]<,"0aO?;ZJ+KquY:6R)b3<WL*Te;`;D[WQ=Pfkqj2+PE
%A-R]bC/"UUT=:@?&",t>[BimNf%5^fL23'#\T68'qcRW4_p2F9/?^p7`VRYh_,S"kB&o`$F4]+#FZ'Q/ZW&F6gj_6VT?[=Is"sbD
%Rj-o/<p=NOrCr-WA()Ls'K?j-;lOn$UHSe5a5!DT@s6<8.Vpm-JsVNU2l.W$a0$1-;b?\Y2U=N:PO;RNZg(_.2o?7W\ujjj3A@=`
%LD7e*0u&:_k]3#HVFS>RXhU<8+l*F??C/4_Ac.Q)m:HsNMtY#ls(1VCR6+a;NgI<:AaXf24'q'0Qau-fmWeOlE4h-jHiLbkijf/J
%(36>_SuME+c!"iQNI2?PmlHoJf-YsYb@mE9Bt>CU85k('l&SQ7_-tb6Rn01"2>Q$Pf"N1[$SP5MH&uV:d_sd[p!/#k1=G&D(QK/V
%BdR+FcGE4J2cT5n?9kC&mrR/A+ZR\Wj-];XqurtNH@b;bk;n*@C&[tW\B$M9F*r4=/3!QuJ#)5!njq/E<TU-'>AJtonu#2.R/1js
%)9L`0n\*-:.-B3L8G:YGj,i8qZ.s#/!pfKc*HlB@>%'E;9:iRR^W/>5'5`:"k&b7b(mq[oq2HPfkrG!=Kf0AUg59q=>u./."PjpV
%>WO.YBH1M]30\9U5iU*^3E69SDDsIaX>J"gLZoH"ieHJ[Vru*f5IN]K@n`Rbk0EoB;e4A$r>:`<C]#(>A#-qLm`-1ESY,d6k'i7\
%4.3W$A+%C)&jHROZq`>U!mfXcRg&]UZrJZ"MUg=<8t*DBl$)O7`5@W`P:i?aQ'%8>45=_-5It::PX]R1BKn-)lA`\VV,J;o]'?Uh
%dI*r2:%`<l?gD\T=8JE8YU9&QT6duT8%7o!WhW-D*o"f\K"ioI'(Zp20+#S=IqWNpjN]WY3e)25GMSurHu^ToC,CE[B;e?<o8>]`
%'OO)i1t!fAN<r\D:Krf^)S*f2`eDP4fq@6dFpX5@XcmXfGgnQ3"_[#kP>imGU`46eo?ibA\nZ.aj>D.GVN=^MVEWfd%18;jlt+C=
%Z<&MdVCC3!-_cYl<VK:Q")/fQ8?kaWldW6)$RZe_Gf!G"'2moX9V!OPf5()cG366g,rmnZ>:pqYc)nOe2)i#,k18>CRet-.F"%g_
%\MZ;Rf%`rrLS]6Z?uF7aSiN.sf]M>Ogmjk'F)uD?DU/3Uc++QH!sW$l,UV?CF(WOi981SHR<7m:NUg5QR"hrmmC?B(k@X+^(b'9Q
%)1IZUipYt+?&=CpE+\0:M>@%9POu#r%'Zf.!uVcs[SEm!Y0)Nm=&5j8d`#BZ5`KB\<9a<a:$()GGCEQ@Gc>htERA7<mp/`eSP"aZ
%ZsBGD&DgCCUAsYPR#-$-VS+XHY11\PG?=UZa8Cn#Z[[Ra0_=2FPC5VG'iQO_IBCOYGCQ3^WXH#q%t^ui`=A*Q%<e+T:VjtjmhCU5
%m;D6s=:3MT?[qZeiK`D#l&Q)4)teBP3:aD-I5^D!O)\Tprk$47/tPsNnkXPp`(fbA:KXI.V0!4qg5bPQ=t-sTnNW:B2cW[+DE0=s
%=9STI%h+FrI4A3`SaE9^""sW!KeP=8eKTGl[CNj)1Y6unW;#*2UX/t"9V#."/jfI?lJ1JRA&BsRd#V5>oiJIs%r[,/YKL0"RO^hA
%;(7t"7">)#%eUj6C8GUp&sR;[ALCe#RQV2\moG&&cL1`+BMo-,M_s&c@Z7c\%1]/)O6OQu)BTIR4c#<JNFsh51_"kmarBT?070EF
%[Yn""qJ]9k_kG__FO"Z1WfKeHQ$fZ63r?n=8/$"r*%1O09Y,1:K>XJm`uD&Q'/(KWhtOZtS.H\&Z>nmmb!/ob:88&>ris:2<I0+T
%E13BipoUTa8rB"P2gja`ZEde"I;eo)f&tt(nlp%a52J*73nol`9N3OjE%0X$QjOn;15>d@fUlWop"8gWe(h+)iAB>kM<B<5W-A,r
%>coO<&mVL0lDhHSfkb-+K^>d(nM/cUA5iLt`p`M9N9<('=a2K--&'l.nZQNjr<"N?VtcC2s5nR'+D,`uF`$,`futbp+d;ta4.=:C
%J>YJci+?UXnTRL"q7>unlI3k-8l8;BD7=3D($\qb5bPLqVdXAQdMen\A(",^;`mWm\l7RY1c$S.qi($V[-kuKemmhhgYI2??n0jN
%/.l%9b8?XM-aRH,1)i0?WS(orRq#/&@1rkl_+1V:]mZ@39*u>'o/A<"R!>gTc1JB"=$('CnKCjj?;5b6qA=B:SFVuH<p(7DInR!:
%'[,Bt@elKoE5R_Zh9516j*7V2N^&9:0F+92f8]VjNP]TBX_@KAGZLdkJ,/iR?8q[=?[gb5G3Qbgr$<"[:p/S5#rA'QDYlQfW`UpG
%KrrR*X%[<Am`1:aRP.^BPqs$9]'3(e;11k4m?Z%Qr;:4_PLU$b,l3l!)c.KY5%$'ZKo8!7aL!bG0_f#Q@nOJ^hnT(SI`o,[LNjBC
%:"SoH^%#a+s+WVGn<q@k86kNi;9isO'#(Z,Q!1L4`f5r$*rZga3T6S@76h@H5M8;i[V'63XQOr5l-LMW(&/PILY9JL>u14lO@,'W
%8*[uFr9X[dkrZ`\Un,T>b'a1tABOqL*tN<.BTb-QL%E,HYXutHYSRVIY2>iL@Q!Lo6G[13j9?!!pj>=/Zo]j_&^roEM\#j(hY$p<
%msj_kkhjYAEoKZ/G"fM)B]%3B``\c.QW-9FSprm#<BFno1"?5ij9Ge6;)@E)(E0,fNJrWZYsU?fn+]`_!9N.BIF=)T$.1]mkL"m7
%)TST5s([q9BpMU9s5*:2')UPU_YnfXph-k^?Fs6C;e,`EXn`p>VVV:(WSa^:fs#16WS/b+K\*q#`%-\5/l)V%-^?_V%X*7u.CCIj
%3=J!Q)4M=r-Cb%+7.J$1b*>TH^#O3=;1ZJ0e]gX+dUOYXRkocKTBY#1g.hjg"4'lSh.b@cJGoFI&m]>jTlEAQdQL9"WW*e/k4&4P
%W;l2Vbgod3TDghOoK<AJ]NqY(AquALfT))>F:]4g=.jqX4t&)Bf7\,0lg_MD8QTMr&:Dor:o_kAneufr!1j\EdX;Lj(QnJ2nG$uJ
%7^Lc]>_Uj&UI.YmDKsmgCK8Z_pN,n7/pEa$rIGi]\9@Z]_NUZYOBe92Fk"9'YtUV:hlrL+IpU?iZ?D;)U:E[-#!()-I9(3T'WVII
%ZWh9:M2M]>]3,T\nkl1X/hqMKNsE2!UONK9-\$84g[mAo\XajACirJk`E#":0@4@UbXo"?R:t2<8@_l>Tdi3HeuFrjmE0nk;p%Nt
%b@\!s[cl=H\(]$EllH,f8Tb-eE@bbpaqW)=`ohP_j&U!a?]/p-l*[:XggD@jb>k_,>B/]EZ'I&oIhpdo]mWknI8h]&h[8+HlXuSF
%$NKC%[`Xk1nYB'bFFIL>;JmPflU\5I2Da*pqjjrd8&=5-1'sjD9HmU6X0@#D3@M<t@B8r@5-`<tfPX[#SK[W]%X[#,ZeJ(!7AG3T
%D7dd`=grVkB(d1gDDU:WKCZu:U+sg88iDiV)FV1W&WYsBX(rKoj[#'2(#'OWY[Y#g*o-=0ZdJ$nfA'+JfBkD(,_o2WTbUku9SJQ]
%G!_paOBjqL\%\e"8f%rj_R!8f7R,SWaIL8J8+!=AHC3q.&Ie",%RV<oaP]e%#jTLtL-NT@OAXiPW5X(\P+h$WBHJ3Y53)UGKt#Jk
%Q(R"k]'.1B+^9G='$P-5>NSD'N>IhO<S=1OlQWgEh5s^&RWq=id';''UBk9nqAtCAkJ[pRVbIG$4,#Tm4Bte)D0Hqq@MMt;YB@.i
%&St?=4d;"FZI1GBB<OG%G,Nm##VXTY5jN$(aW!I^<YLMhp,1lsWg+nc)7UR`,2RH344V&mkE7u39Z/GGl(!PcOgli\n[I?U_Qq[)
%Q,E0Sh9S30h<=M2*XRO+)Dn@;hG.M3d1,?q,D&EK*UD,I`^r'tT-S$o''t^X)JmUO<30,q54(uOnPTn9,nhLB,=ZRueS2G/"pZj2
%/`N42m>FU.KJrbfR[K#)JV,4.&;pP,b[*,$G3Yub9S,7-gZVM`S5_PW,%tisIo!LkT%,I!-QrE.l"O2*k"&=/CgS^$0%uZG&)3ZS
%iOeK=mN>lEkW&H+R_ql9HPZ01,\5Z6WS3nX[ObqYZ,MJ[HsAM[m1NUX'lBH%)JOTLHMUVubL_b(%b"b-@7T$f[WK-^2OYQKGp<M7
%3*FEEHA9p-C#8]pap'(pp0!<kBo#qmC39?Y<K\Qj>':h/<9oe"Xi(jT?ELU'UWWh80]LXEbfR%^Tg_;L21j?)^HP&:l6F?cbo>L(
%qMg]TU2Sam2r%fQ9/OH/=GOYG%l)m!:+Oj\,@G3&'5aOO5@h#NXQNbfII/Yrb1T8M/:2g\[aeCo2tECaV+."N]E?FI.NHelQHoEI
%pT#5(ng^He'X-Q#&LLAB#"^'bRW6;EN:O2Gr`:mFL\6ZXQIouAcmb59U?U>W@F<QI#F`(R2>*Ku/c0Z%2>"nsZd<+F@Jd(2TiOSV
%!tDBk)i;#d7?[#r2'Z-:e>qS/pPE)$*d0M@I<D;'Ui$"7>r9p4*hF+?7:4$SgEaKVnKTk\XM/'?^XV>OhT<4<-gdt]6^r,(ffF!B
%o[.)?P'2\_Q9m;s1@,_"HdX$*j(j?BT?biq<dOErn#[j(j8P;P=+8e#E)LLX8WIK:8u*h?f+tB(Ks\g7-Z:<Y\O&B9)J)WU,hf&#
%^ue2q^CbK#Xbk;H.\5kTMNo`UFdn%@)S+?UP,YU"'\6^QQ*35;B$/%2X2S\pR'1@OV(A?aSP$<Q'Gu"SKZBGE='eL5e?"r[#&p][
%pj'iCO9/ra??l`cNjZ44HG+=[Z>/(6Li%7ZA(>mmhEZ.j]1lmnr'ekt!f'AJSisAggK1YR`"G\M?WW(s>!\odmU":-B'n/B=5ZC9
%_)eOEYM'eaWdPUVnl5QE\aZ?G/ClV&nKAg*R<]hPfk-T9-mK#-2m0\8]TuIUqSV_W-5Je[$Hn]P/`GJ(AW"k<f2t8Ec>-B7)?Xk+
%p.G#Rd"Z;#jfi#NX'`m[E>OEg2:!5Ds$T>qLh9m9d2T4F"OBMR1]8AhfL+]kI%:)!^V]8bfK'I7IG.]^5uhMD\!)*g.[HbTAr?8e
%p;%5=[/,.:_R#JB8MBcF?g?0+Qca.3+5VB#l'>ee)nUBZS&QlDBn+f5:Dpj#n=lN+\@<34:EYjRb;7aG>UgW$W&K#t\4iaE4uQ\)
%e$%!8q]jtV8+4C$[Q1;9%`e1FcS'N+W\RRX>c%+T4\`)Nf5m_+kM^O,CT$4/T[PX#dr:ffhrqerpBJ=%l4OS.9R42=nBFsc#Bjh8
%`8V;c5JpRYC8XB3jp!r+\kleLYcYAV3_Z=%OYueFk)75NAl!kJ*g5^ZT0T\b+p@Pq3;+ipMe]jkl=@B\);ng_ons56^lrRb)2T<B
%Yp=\5lJO!"qY1TeYo3RTZP'AsGF7:@nXT``[`l\qp["f)pHL=5^OQ/hXnZ?#Klql`ATOX>XEM=(<kn<:qpt>TK7'M_D;TKn52UDL
%XDY\!p>hM;FER>=#Hp$hh3,7\A\Ra(.GMRH)"#37_V)57G@U#Up>O$fEjNI,IVD!?Bf=OcDmc<?005S8cen),XP;]B^@M%jWK>@g
%34h$!DYYMOkS:PpXa6V2FUI$@CtbL^Q?0IRDOW&JF2%:b^!kdifQZ4kI]kq[:X^"QN>Es08%\'jVr#$ETDutQjg4DFc^J[ZqIO18
%@f+?gC-,X(.P0KCDD++&T@,R/?eaIupUZ(-0CQU!l:1HalKRGV-\(Q4;LLXtm=(b)G(4>05CN$-#,4Pqo3]hX2X!s2Ih[(K41@+L
%r9niNLF[T6ZA9%1EgNX0^+V%&[S"i7L&AK0]XFEDBAHqKI(fGpBd<Z9m<1\[5()qh`LZV.;Q4nl5?4#X:3Y#qC1TLWHEG?GDl]/,
%0?Td7HVY`b[$L^Tk&q:(rr<+Y)f%+P/Xj[bHhV(r="c_8/NnQjp;j<5n[RS(O4pL4Y#X1Q9,FWY*jSaid=+SIk<0*apQeZ_XlLQ=
%l&aGr`sXE@iF^WpY6b[\GOKD0GLl5qhc^L0'TEfM5.c$1GkoA2V=f&oc`?3MSM*+nPPRF/l&#<,%Z]YWqqca"a&Y@V]NB8W1kE@k
%mi(K7SQCM8`V',_\!B4c0TCu4^@E]-KVgJ!DXZ6UQ_c(alhXECn$cUqqu$$92]9m<B^QE8Ik[1[4P<mr$W#(il[dnW?=,44J,PX.
%1L;eq\$tTidnm*i(\&-PoTl-c*Zq%TBJ[lC[95KOm4O(ZVmcKErEdVe'tu=9:*71IYuN>=\@_!s]R:I[htun$\!Q"-0:X(aIVerW
%Z?f!hCt]tlNb(RB\`HUka(jkpVYq[I[pAe.r]"9\mQOf9Xkc(ncC[:"["hGkH/:itd@8KIr)%g/gY7/OEkAPXIOVlBmBp1"O?f_3
%IC&S<?1E]CoYgE\)f%s7gUX'qSaL(M"u\EF'@C69B\eQ#3i!_%QU_)$eu/)P1\9Atdt4k'a+hQTYl8Kf]0J4DE-Z0(&UYT]YPud@
%*c?':69\2kgKiY`@$BBG(VA"6a"J.Uc2(=ZmG%?Ol-!ng=?lXm0&HQ</h?2D&\!)uK\Hn/Ru@)`pY]LrBfEZ[UK>#3*uiF?%_'S'
%e.&up[JPX4S]1N[q,Z6S/%n*eH(W=TKBKK=]_\dLnCu9t<gHO5@E0!cKJ2pR:%%4FH&7p5PG#.jqse.JHF[aah6W1!.:&MsdkIEI
%Y:c#7B7G8J^UgjZE'B[_:S)u%M,=d@_Q.di]iB$a9m:1;*V5l(HN%fMB.Z7BepP"']i2(N<pT2m\YJa,GA3#&9CW#,Xl[Q<F8Pro
%pGmG:HN&H+IC[,W0(#6Gf""mBIIQ$goet*L-#UEnn3#^o1rIKi8(RCRg#EV$pYQ<*pA+U@gO#c?J%PTgK;6ams*Jm"S[hs#/mt,S
%K>n:/IIgpA=kR,2VA9fGrmS^$@WG[D[Nnta1/>Db$]feMmn'+%?U<$H*Ueq&(`m!ui."s7gM*8ms"<,I2H@6_3Ht8c7:-!4jM#K4
%5L3uAagZK4%sID[W__I2ggTrumet:f_:&ZfgLujQn&ph>0C#<nlVI9GFjGD;]OSV<I,6P`0%@>n5NPW"V(1Zh:G4mq%d6\1Se/!5
%ObB^?:%!RHP"gkGkKARcI+7aLrFn"=QVP,=1kQ2^UG]N[h9uK&e+\GNd>aWARWsBsPoPUXW>,WX81[!nn`$9Jd*%P/@<F[>/V9l4
%9R0/[CN8rB@!XZLMl/l8_-Mp74ZMcq]&"GG:U'Zm1su7jB5a>E]mWNQq4(+G-I9HrFX,V]of%_%O=gG'i,pm!f3E680hq[^%6ra>
%*lbueoVO?]4cB#lQE&\hIM-Kthi:7>hHttMR!^U\j[G-F-I&eL%e?N28H!>]?U5WY2C$<'$JP8sCH%)OO'XI-(]V;"%,3F$QT$/C
%OTa6K4EOqu5S@2b4m[%>+QCmB:Df/?^RW5Z'nee9l'iFJafHSUaM$gY=oZmlp0gL+:Ra**b35=ODR]pC;WYI'la&m0Rr7u.7)QY9
%6'+`9>($1[:3%H&o)BFZo!)k]A^gELA+i?80DZ?W"@NCE#ClC3KF`,omp=SS2]dWBA-\Wn8bitZl6JO=G.56"qRF+blX:Q<bm7*G
%rC@#m\P)cmiF:jGS[W8-b1G[5XjY1Lq]ac-3el,:+)UEkFciNpD!o)BlaM+`WJ.[D`M]FDmdD_+d1^hSp6]i4j5#?A+Fi62pf)M6
%o#G>TV9S$SG>KsZD&e"ASNs`fDU_Yc1eVXgXM-Tma6P85[Msk65.\H&R1.Vic)oFbdA'E[fj%+9Q>6$PX:RSNHJVT2=FkeG%=3Ar
%[Bi*q]nCNpe1A[iK`N/m[i;6>[Tsg0K2(0&)NS2Fr/nn6TKnVlmsOt=N0b6E$S,'RU[aMaEf&;^Qr$k7S/Bh*(@p(8Sd".UZ`WEe
%*8]Pact_$b(RqMbp9pt[eBAdOCi;fZfCM360/q\l1rJ=pk*q@V%l`D$qpJnQfm*$\Gsf"iBrWl[5B1%B$Tm7Z@W1F;G[U.8&`i6'
%]m&#_UYO_\QULOh9nc&`.iDo>aHf#0h1tM`Gd^atcT\[P5h#ALK?HmspBo5!mY,c/hQ4Wn;5-9,GFg[1T*3!YRf0gIgt`Q#bk_Fd
%CnB_uWuF^]rTo:h*B`.62r<BuZoNL*0VnZYYci$VR%H#!jNmk9[7Vr55)r1l99p.7JdZC$]NQLHAcL8?0?Pd2L9I'_k2T[Z+(CZt
%<m.nNJYRP=B1]_)gZr'nAE-P"mB9k<hV$bcGB#djHU5mmqHCW1kd0`CG$f("g#(F@(I-JWl_SbhhTNTXIJ=:!H1]#On!;hm`dPb:
%kaq,[]?P0b=aMf<%87dJc[jdLm\sohQnl-0>-7D*p?J^Q:O.[Pj6>8V(k?nl1s#,2#2a3652W`ZRtb*qgV23^%\LMuK!gpqnIJ.`
%O)-*if%S^G7dKc+kM$L`QYg2;n&YQ50%W["*GfX90A\_pY1CVhak-C/q_q1B=3m3C.jPRVmnE-U?@BrGnU.2&U@n#FVR4NgF)1)u
%1lZEohe;8WZ0CE=ZUeW!c#ktulM2m4^;c"pi#7fefJq,Wg(ft1%kF8DWS%'0*uHbe2]sjCRp./^UMF\FBDIloDR-;?>HbjH(-h52
%E\BYWZCL%:Q`nSdE\1CR89!NGRIa466N6d$&Paj9>>MQa0G&0Wqo?usq!EO/\*EegUWmQI5gc6[Fk/up)O^3i>Q;mtn^i,[C&)DN
%2L]Ik?&1r%Gt`Y)KAF06BJY5\aIolAP=M5prL+2en'>h0CD":-"pN.rs/L@s0@-Jo[r-&:>@7,"N_*_`"7J6UgaXlnJ)osMi!ls.
%pV,hrH@G2*`qn/npBs'jb3)L^h1oh7c,9LdgqhCd2X\i'B4&<r$WV'j'c7N:Nuo*[54:[g#'.LRLf^c%%U6YsFT:dfp@4^N*t,!R
%AXc^"mW.:*_VtWt4?Y=4lG_Gi$_iU<p=ece_t,%Xg*B]0g072\h:&14_g+,#2ns7C]A)Sg;t&-hTA=NL]A#"H2k?`19&FOtDAbO.
%T<7E6@Zei_h,iK0:KK%WhRk%<D`P:4q"XdG0]`)a3D23Rg6]hB5H\bom\0Bd['hp?A1d_jGenj<e^nGLQ*'/f-Uhk";7T&,qoc<L
%kMZNMq]7P_9=/f=9sWm2\YqG_h%.j&YOh4S%M4GVIC*m?-C+GJ!M/l&O+c5cLGH0B_sd-b&'%J#S3rSpl:]`W]`$mdHD.q9oFtha
%OC.J3.\%Q/CZI"TmlEkop0Op$A>_/@OSEWWH[C`M1O+'=8EKPG[pEsRD)RSm\R+%e_FA;ek^l0?jLd/-f7h]3gS:lH@H[X*Q3Q5N
%%us0sq"c_s38](=:$X0p=Gu1Rrm=q6/aMXrJlJ=(G-,1P&mXM+NcJHF_#!,3iUfh`6<^mR?LRJIg\KWkZgI\1ftm9lO4?uXG]]&e
%hB_jbqo67CS`9?hTp&Rgn`;jA2cegkB,c<+Fj.#4+k(7qM\#WrLmIb\e)DkR?iMP?c`40`92E35cQR4UHs6CaT9_oNF/o`dru7\p
%n+SctSK;neK0O?_F:6cSo#eu;lgGVrc(4iTjPJarkB5u8^:-=I-:/<623N`C8+<2JkWJe>/_]X>:@?3p]l)g)f64d1I'UGn^3KD/
%>GB3"5;m;(:RoTroB%rfZ\qV\5cq!h@X@`2dc$3-'i'fnA.KTV[DZ)#Bn,sPm,%H<QQ*%g?TWtj7OpQRD?H&sB8[$*IFui;5.,^g
%.'dca0mIZpMX%TtpVZ`_@6,4fKkF3LKqrnqY'=hWmln/>ES%W8G098^JGoRenY$MsIt]&n?0^+!EL=gn\?P0YXgRo!/3Wm%gJaRW
%=lW:22V+KWmj'PtU`IjTb)[/SBsa3k\PM)9><-?XjVtE42.RVC`Cp0@D&s-$;Ra,ZlWY[5:/e?,(PhA/K:I/\C7EN-j*n.n4'`[X
%%IO-fJ(,;CUf84EX07g?P-%7KDl(%NIFPIHB%.!?rUr^9Y4GLRB:)K(h[jLM1U]mt>>AVeH1OPUGe!iDcP:2@p2QkMiQ"LN=F0o)
%du2-KOVmr#=nO]@ZDF5sU+RW'hSUsJa2.&`l$=l"2<h/domG0>XB(hJ#426jV'SP*aju<RrZJ2tlQKR0+]g7MLhYX1YfFg*1j1s7
%jh2bt8:eA9`lme62a#@`XjV(\$X#O">2*9\_=Kr%jN$kE>rJV4:2BUmPBHo]mAWWD[";At^ULLri0`X67:Y``f$`E--/-8?.p'-*
%nqukqbI]V(G';Nf1eg+0qi1:6p0poc*usZeoEE0=rfM]D'msKlZh1'l.HiKYYYJU!Gi?p,7p%IK+'%a1Y%q<%C:/IpIH2$YFK6A;
%LU4+Qs/b$B+FRgJiPisO]R!dtYD'%OCP;As@WL`]5AI9+15C<^$N!t=2s6eicOpkBg$bgt`TO$"2N5&mDV,k<`/TP+7u8:,N0u+"
%?B-*W3$`)5E-lrlN/7G:HW7_NN*WlNGpcuG]HS8?Dj$9hr[N-%]Kp1Op9<C4%FaNAWI+M%kHAE76WJ45LlCCn4l!Ctb%:>'gFr#C
%mqMcHrqpj52GC@0)s_FDYD&;rf5J]LkJ;&_e$b2/[l2gO]HrQeHa@7Mb<JV;oKQWC(d;g!%][hO5*fIOYgHeTE4bW1KgjL@B<sUW
%]1,?lqk(Nrj),lT]>H`+a+Z=i]tM/8rM/@9q=/E^bbU"Y[b%u]RODZP'sjlq4_^M=ei(SJrM@ORhX(@l,LB&sjLrHO@i_RqoBt4q
%Sk!n1>V7&!R`1'ZS(/6ro^'Jn%s9q&c=YE&-V[os4m?j6qpIVt#0-g(SlY."7lDGYo"Y]`WDQFOo[1g.3rQMq\baEN46CU46[gn.
%//8hD)h$b\,JEedQhKq/4^rDL]"MH.V7k1q^%ID3gD=+2I,?72C[_/USCm(Emn%+KNHWTLJ)*dX;L-#8+06P!*`a>IesAV8gs#T;
%3uIF8"k`=HNV0)E],r&T<rKHta4`*+p0KpQh"C"YG/ETMe!o);/&KVJ`V5A\0QA1OID<8)'f7CE?U('q-/Q!!ECftFmb>G$h_han
%h>UpFi7j0\[Dl7h?$%u3/M:):qTbQV2V88jfPa:sGd[L#W;>q[Xd+tHfr"`)>"Of@jm2J?m\nK]kl,g0I/93]kQS9+elDa'nL+ni
%j5-<-?9BifWI2@B+LcS<2ZH>QeOGO,]ucmbPZJ2Rebo:F28Cp'r,H@riT6qtZe>Acgdl6IT*O23GshfoWj?hg[,pr4ADbn/TM.I$
%Z_om*VL/a'rPFl-AX*)j1TOa!Dr6n&or#:m\%aMB0l\ZA.(m'4C@i8Y%=\4tD.i>5J\1d;m0R27DJS'j#YsuN(Btktd/OkqL-LiM
%IWtJ1QW.*\:2mkQokGqKgUFO`GNl'><I45+L3e3]GrKu[p%`KEp)]MVXmJ,rqUr'_U[q@gX8IHCH9$<MR=GHihBZ)Ji54ZJC:25r
%+cTObmjaSkf&2!cq`&nL+u'=/TV-l-`MU:8;$m+,Y!rooW_m]!c<H93=D7V8QO!(6jUi$*'Y?XOqZpG#/3k8X^hWuDcG&A^@i+hX
%eOj(>E>8PFNPF/Ie%'5NiXF;:a5qFa[>N4@SGGHZ<#[Eadcd_=;PFoEcb?3jm&3p`]gD6gMHr@2'^Oji/,^AEYH%ZlmB75Gj]ZX*
%psD*a?`)H_1S++kUT9_;mB?["ChN`0&*oX,nL*P5=O2Lg(V*mp*H9#d@N.Q*;Knl@33ns]D'#)DgQm;:"93+X1JK'r9V\0cL$3e"
%1?_lG;U8>-dP$fo+3POj3$+_f4-8\`0Mj4B<&gYcR&Ljth_.+l6)RKm..=(@n]j*GGc+m+_M6oT1:*R52S;\`DOgD9<,$!Voa<kd
%SfMhHUD'Gc9<ChX]"6D*6TjS9OW/S##N8gKOKN?0:"T/gGk/!MrgA'M7opJ,`D!=W(@Lg0hl`\6\L!O9>mAbtY@rp!"s20(-f=4"
%P33j/:P`,^)thJWc8W^o0L_$e^9#hfWr'R1NL4.nTum1$X6P%*k\C$`!tK4a%9\,]V%EmBkoU][?EN"lg+-^YcpH0JJTE:=2Q`P&
%d@ZEL7;=`8'?p49IJ%YD=*I@2E6Lk=XG,>&]gPPMVX0L[=7_"U1@`-5U#+lfbn4E4fX^A,4bh``j3"+Z6%("[C,JbDS_`;/0UBb&
%.S<AS9nF(_??-"A][;<Kfob?Wk&BmNHC6;3G04ntQ.&?1>C!R88[@id02=aCQZ(^Q1jm:&7+_!ri<OIW,/dU!`,B*VYte3YF[gDC
%Pjb8N6)"3c%&Dh/_#'X';Wl<hb=l^ihJp&Iol!;A$!m(9ZIE7'pm'9\(qB!j1VF,K;Gp'Eir-Um4%o3lIGL)M,Au0lFmal3oD>cl
%*J:_.iVIDQ?FWbL:3^m;Xe!t"Q0L5q'k9XH/Q:V*ZJPLO<D7;Q;;uT9?3(p$OSb6&NQ:h7bN<KtHS,D-'"Nd9OeBARhhgfi0E[ZF
%_^PI<)>r(o1<T5FVW6$1*'e^Drr'#(DOjX_RGBon`^IAT?@dR;;]o"A=s$[YZ*93tCAp,?UC7Mn`ogk,4#S2[`$06H.mAuWqGT>_
%lhhTA%1W,/]/&HMr##GWqX*q4s6B/QRQ($B&$=!]Le]PRb,fi"eo1\E3DD<N3f;XpGUfa&hp.=*b?CM'&B)XnVQU9bAmLmT>4J\q
%AQ_d*KT9r9-;Y+m*7LZp?IlN3O!1rAWQ[jho<Ym2'i4*UQB_Kh$f$7U^5J2M2$C'"6#83<kLI`4IHn-hWt.nEkL&ODWLK_tBN'ZZ
%*C!p;rNFNY;gFZ;6k`cWQ=X\<dif,O46q,T3]^EiTFjl@Tb/j6lt*<7((:4c"3!N0q9mDu":8I?2F@Ou\!/#B7o@#DE2B0o,>^0T
%C[h=K1gf/p5e/KLI*7ac!b=qWhfMQJaOCcTULAseC5?nV*TLa<TUQ+9*m3##H'Wr*_Pj)8kuP5C]ARspT$Xd>+.]hj*M'9?o)[QJ
%hm7inR3d0RAo<^<kr:IY/`eErj*FiC(kFkKU/rn<RUJGQZ1^-;<^-5A>.Me["_,h#!-)gF&#St7)?OE!`rr,mdZjCi-hof2+4C^5
%>7?,\.Vm_Ee[PmF6!+_%!U+d8*P35gkeI2j9\[gbYNqS(f4D[Kd9Hh\c!hN1-k=WO#goR#"ZT0\5<@FRTDJA65\sPC8qtc@9DrgJ
%#tQ?%ilnBskqa(.KFJC:Mt4P(\rP4"@$YBpG'J2Gh3?mON4\Wa^t0:6>e8P8NCGU=;n'V<+Gf@9ZMS_UI-rD">X.Q$Dp`r`lcY-;
%mpHqO=TD_d'+61Dni]JYmaD0G)n&ODaRnTZfs5r_0aL8$Es!:OEuU`Jd!$(kX@s$lUY;RbKS*=4_j2C3REMM.:Rc%Mj*df8:"Sn0
%[#"sr%S25&I+lfC4Pu95^1f>eo1\Kf+mZZ[P7Q;Pi&GfuN^J%@`H3Ih7VCmG"te**kgf`*m#n35Jh8O(5aF5N6iu?k.nigi*tY&H
%J3Z6.7>s2<P2e9U(Lu/7h-c<[=tq2R%SiBl%T7:'!SVWS>t\3ebf^mXOZ9><QXCF891P^AhZT$C>2TBH?S`5H)8e21biLE.l&4X8
%kG*cb]uZ;(*4bA=*h_G`^siC)j"qLZ`=,"C1f@]^6K5p^Z=tpCd)&s?T]=rO&Y"l]!E'DI@hTQsC^YY+nMKZ,\'anC4fq#Nad>8o
%KK1([,gB0g;mR7fnqhm^aI[qUN!'Y0\tC@<`$[V-F%9U!&a@Z&d@+mCJ[qdWW__W<3!>m,aTV)VhkEd240fR[9NVWi<aa)\R$tG`
%oIN;Qol*5#$*8Z(d]=d?X`'%q?;V9iSo$r&?+t-4Ql[tpXI*skL=FgO3(X/hHC'K1@GfJ!m\a]B19D#JA%FW.2iuE\OJ:th/a9dG
%Ea2)":+\/I;u.EN[eX`nXo\)&AMHt8N/0)kg22859eXB7U-F0)4Hdl"Z63:'g.T#J,k'f9kY)$mkgbgp_`^HVUF.WUaULKLFRkm1
%#74?D.T>#'S&le9j#%9F8SJ]cjnA<Ir#L)YT@TZkZ'dSW=Lh8((Pt,3'G*^#.bjCC;[DRlG!_Zq!Ne'^&fQg&bemh^V\LH=8-H:o
%^Sa4\E1(f=7M#T'aWdQT=X$@P$e,/I&8?*\-cA88cZ)Cu+r)6YB!*O&eBBg,I8)9PS"^B*^S0%W!4eDY`Hm*'<%JK71qug+"%bOC
%4!D!L&gSbb6#8o("L7mFmdL7tC'&;V#bH9o!PSqt0Y!no6HA&KXjGNskeq.]Xb8l*#:iD<;XFM3$+tq7"GgnB'IWr4e*9l<)!6&L
%AW46(8VN-I>4ILC]&`)!Wu.Lm)Bt6E("1$JFS]<1fd)BMN2/X`M;3f7X+7@.ccVUjoec_T;;>Z@!"cFj,2IiA*$(GLP0*s]+^'8S
%.TShD*!`t$8dYPJn<04KH5S3rWB1)^QCZBYW0cIF?D$5qXUN\FkuWE1#'$H1%RqIU)ha^1e-P8!Ss`F=YUZrU&kX5g:6<g3F[t3\
%r1:X-.mVK"@^Q?`jH`6'$dZnlQ;DN+ke!FQd";`>6Dg5KPmF$^U^9Kt'diSF=g6aOS<<Ng%q=)Unu6BCa<5IBJEfZoYeWuKoF.&r
%bnD5n'*-'oZkgUPAC.d6V.#0S.YXr+'YkjRe##EP=^Y7JL]][UK&FLTq1-8D@qm<PA([N2q7+)7_D-[H0jgRnk+Bj.BLPU!-"2+S
%LGNBKf"bRhO_iB$.:u<dJA4s.NtjI4S)Zun1;N:51`+pNcdiX?n0Ec'oEjVO)_:E2XXeh%TELAgk%tZEZD22(>GW<D1b?iAL#(*.
%gU8]VTIJB$A#4`)N7`>>BOMrl@lg'k+C(S@OB1NpYX*lf8I#[/$2Y.N-;2-d#\dnV2$C9;:PNLL)\D.nJ2l2hb=Aa-K"-%*SWAUB
%)G!RjK#r&dKCZ0UYDK9dfk[%nZicASIA1G;@7_`5@U"\>*_\WsOM#Q-G4=?spB*)l5ZgOuM[0bc&1jt'CMj]WMuf03^_<-O8f]%/
%mE&\`M&S)>)r*Vn*`acaPRiDc_qH=L_%qDM9MBC<Vls6rOiG7S;=g3%l0k4oF"MXZeU.B&!S'DBEs;aBi`RsPAqHhoPM%McBLc@j
%d3O>GB_=3nDe\gidoN]HPh3[DYXjB,[_iEh$?GTK##A'f/70St"n=ds&Dp9*YlJf]hIYHGKKm&FiG+1N+lMurJD-<J7"W7A<c##C
%!rHAEZJHKjNdD1HrMMOZ1p"Mb".%:YQ=0f*l)7:DQ5qkGIcg3K=76;1S[Q=M?]^p2V6TT.=dTj>![5D,gPlJacST/M[Um!q>!:B3
%KeUkP&3RIo0T/U1.`_Uq/3qWHV2>8Mk6Rtss-[>`+Z+s9@7i&u1i2m+Lg&ZiJ#6S>8Xr>9cAbEN@M@-:^!pML(IfXm6=NKg-<=B$
%+`^eg2V^I9k.gKgN&Y_:614t!NU8L"'55;34#Z#]:UeZV]nDfOa=]95D>)_:.\LA+[S#85,SWi:"\J%.0X\V.C\`D<3]77G?5&B!
%Ss?Z&%$E%*jbq@k)NZRo0OTW3<sLjsB<DfaYRJ9ZdQmHQ.]knX#?WAhU!"47K#&mJBOjU^10/6mKTZNUG#-aWCmc_M%p["k'D@o9
%@9X2pH$"d7<BY\*O]kHQ>U?I@;Pt^C2.9gcU#h0&VsR<2fSo#sWsl:FMdrLt")<0?14GL(8,F0laNB32+dRT'Q<(-h[qrqD-@1Nm
%]#ZY)it,qWB>Q1)=$aVb;]i(3/_<`W"GTaO<eP=+4t_Fu.PV*A!d49c8]M(,dc@W8/WW39k[F3o'kY6eBs!\a?,4ki=$o\qLqA1(
%UPl!XBs2!,UBN_*+?#r<mgOb(-c1\d0pkWd"m,eRcfUoqkt?V7AVM>%0n`de0ds[YVD89ACd(P6'pFI'L(%,P8f>uh/R/B/#=bZ0
%'9aUJ;kKCDGK",9FqW<?mD,>GP33U.FUYRMosnPp0Mj3XYU:*O!=m8(!YOAC!HOmW"6@hRO*emaH&CVb$tN6^[1Gad95b'JSX:B;
%(TeNV=UmP63&d?#=U%hjhib^.k5l#i44eud>tA?(ZN,rRBL+aj-0\&`VBbt+$Qqhg+8u:BG*=lu5aSoBnk$n$@BCp,`"sek*J=cD
%V76UJ$!k%N4&D3nTO<(3D(WkC2EUHMW[<iP^:qDV`/:n:UtHi'C3)BnNbp`kD!f>G/po?@\ZVum4a>:HhKD[g1j1Wn7g%qkk)7)+
%YV(i(Jc[1"hE_i#e9.:<a+GRAdm2+'5W>.^dBd"1k=2QuDFO[jaRkJ1mY'YKbeiqg(83lYA@8p"+$j@U8Ka(u)Zb3loK3+5*-@%'
%_@ST/iaai2/3+@'IVBCV"UA8M[X2Xo';/j?:Hp$81^gYu6HI7;+q$T.Pu9EiYS.72du#)$51EF8fV[aX."m=f_mW'(0TDIK-Ad_4
%L2A8.dYLl*Qu"Ea=Ge,Bb(44+V8KE8'>&h`L<i-.2ajF;+WQ6@m0FAY4b3$M]@qudI>3^g!1>E)'D%X4iS"DgHAR&bLb24SX(!oH
%@0ocbS7^j"-Y(DF`*4QP9S*Ce7iKs/OK]b`-`Wc5^h*VP)<0j6%p\qEk=&6LqU^uM*V`j\-BPGJQKg_0Kp';=4+au>p+MLa(E-\Z
%5Jfsq0N`fJLqsu_ibTTi[@of7YrQ4P"L\;!9dSb9ZbtFUb_.rR8eA;<AQMHhQuHR9aBBkk#o6a9[O%LR%YCoTSfmCcjGr^HYl,#D
%&p')sEWSbJFqEZs+Aj3l0b4\hOX;Cjkbnl-4=q`GAQ-FCR5\TO-G1/%G):Kq]M([_H9$-TJH5/0%dJ"tO6$TDotATo).C$M,'Jf$
%^2HJr+[I@`[_T:EB,8"3lnVi`LX.i^22+,HAOjcoQ8,QW2NEW:_/2jOg$l#G"_d_;b@DE70u<ZXRaK)0`A2%XLT(FE3RcJqHCGX[
%OX)W[_9J>o/@_l+)LWoebt^h)[<MkP:f^/H)i7a-,:k-I<epW7[ZZFi4"o:[UVuD"&q:Ja,Mj:tC>a>Fk:Bt^C^b"ulphe"'9Z43
%/\?%UESlI[>!bTBANC,=$Adqm1%1*Qg^GG'[\cpaQ'`(_Q0a#V,Bj^T'\O7AD:&=&la4%R[@]m%eqKT,.BT,phuYbr=c"?/(@Q%Z
%]?,MF2N'P2AAZl1lFq'RCUZe:"`aBiKE/dj/RPl$nN7JM3BI/W2Q)lZZ5RSn5s8W;gB(H2#/D]BihiAIk]n/V*!'NX#4&-+r$t?G
%gNRIbZ51b/:Gc*R_N#%F**9L.deD"rYN]h.caNKlOTOk]Y>lLZTb,cp+YN?6fAaTD5bXT#-rr'>.frjK!i5^^VP=l%5O`68,bqjm
%#u?K0;eE^8oL;YC?8aM,5_9%oPdCflXd_?m$segh<"'Ds1)`3Z<J\@3S-"d-I+DC_%[ANX\6^:9Kas$V/2C`^`#)a;'R2lNa78sZ
%B>C=#LEc9R+kE2+HJkM!4mXBKW;up4M$JLK#nSVR5e;a'3#o2c2o(;%(^Kn"?)<VAI:+Ra]sI29UEca5%X/=@9PQ(tOKLQ\0A]I:
%g#6HTj=clsX%^HY5dAhd[Htts!G4^M+l>o:@kGDk%YkdoAf=!h@gW?dTC=SRlY6Vb?&:g_B/#"P3C)<C][Mj&=$Sr"/m&bl@`W")
%_A7sR@\4c<Phj04::S\(/17"B@S#X?jt`+,!l""NnO`:((g?8^d"jKP7-YsSlU>,Jp><BW>]fZBE<+\BEBro?A/,3^^gqAYV#sPE
%_#4Q]$"nIE@;]3$,n2!X5%"Sq&6>%.A*Pk/;]g6tf8BDrjoKU(VW\C3`X'@gE+BZm#"Rd^K]dfE.)Z+s(0jnQElFdem7?B%fG([t
%n6p'-Qc,"lU^4f3#\M0c[AtLjK:;Bs*2I\NIZ>.V+QuTDq@K@j0Yh3L.cEM0U(D4,F5Vu`d^'$\--U"Cjq^6b969'HF(:\lis[bH
%?sBAg$iiu7E0+Q@\<2at.Kt>`O2E[0O``WIC1f0T<8m'GhdRpG-.GSrYS3i6g*W=<!YhqQV4I^.HP#h8^RMK+H+?dj(_,\'Ai]B-
%lW\qK[<T<Km&m8XFQ!$oSj!1sne.Dp=3*;\E&iZpBB$F5FI!P^!t_U9)2W857^Ac;m7iq.(L]XMB;P[j0jY(U1oRXKon/XB/HEa=
%KJmlB4GK6N[=uP?j^8K,M?DjQQK(Q&T7]6QLESsVI>dTe=\?"6"@,68^*.l\*L<&DR?,gfI+oF<'L![H';-.$JikL;P3_;8n,PlC
%!@7?j\rECT'QhMA/Zd7UGmRn,&=iAh#c3qi5NZo_>>>T:h4.U]fWfJ8E?Qg+K2@J,AS`T#m`=8kj=\FH3-q.o#R]Q%heG:NE/9VM
%![/,OO>2D3P\t&Y,K=8eC[$;FYFBN*N^lG6C=oDSMB5CpT'R([9ktZ'GTqZU&4ia^FG)nHPQ:1\"$AdXOp6Xi46?=5D#/SlF[NI\
%V>9ZaZ5ZCF]6Y^I<RX3E>!;ih!2lg8/<D#md*F-Ug]tQci2>qC1u&5[7EEb4<?Gk.2J>ACMYT2qAAuXo&W9`7iWg_0!BjA>,7tc'
%:A@;OH8:2oAhSG%jA?2YGUal0!3rrq&Kq@7@9WW(%\jmk+V8q`G!]^P^bbn;_9.Y6R?YJ-o^R;Z+et;t4,HCO?9AdnG!nZH=+H=k
%\I%(WiV^*6&H)VZW3?#,:X(S$aB;)OKJ0m,e6%fYTeEhpG;CPZ*:#eE0fX?P+FTJDY2XO'RkWm$Tr"MKd*NIS#l#=WU`u^ul3*GP
%XRC^P9FgDZ3[*uK=_qg&0e]Diq!Fb`#/CEl#n\tHFF,CL,hKI<,1&T(]'&d_U]Ck@\,'Yb)1\T\JqV4Y$rQlbqIDO8Np.lY]Sb,<
%@l<2mSa-s,2uk=lSQZFhcdVGkjJNUS`!LrO+GC8AU\&\d8$OiPF6S+d["'P@:<0jW;OA'D_SS,([RHng=M=jrCR$@b_qZds'@Id1
%b=`-5Ja"BXM'NR,j=:Jr[=:t.8#2A!blrJs1.3gI6*1$[^:W_9!mn9dN8.',fR6=N_Q:1WMojlrd4Ibp=0ulur'6WHbASSJadho1
%9gkRiGu;9W>Fc=9P/B$Xd#UqT-JSl]&:C/2iD;7'd3I;/Lmt.`I?2kaH^'c!5R+Z')H(%k/CGS&nSSaI'26Q=>iEPX@e1<G.=_`D
%!KHKpaphRkqX+p,e4PkDEX>6SCC#;=K*Wel[=PD@-$kWQ!q!UC1qiB!2>^9]0JbeWXXN#Y&X@t"!rjF6;N@fA&dT\:l'aY9+s)UY
%4n0I+V:h6-.jb[/dtns)NsuD8BrTME7@_]QgJ\beP^%%m`6D#=eju:jn3$X)M51r`UIOL%Ydc5U#;AU==r`"25\sg*PZA!jLGM]h
%ZrQ8Z,!P:jMN]n;D5>2KCV/;u*9.6Z.)?MpELZ#I&^Xs=,2Q%)iEDcB(%&Nul"F]"?jOgh)lLmV1;)*G3Nh"4==H=Gjgo1GLGltf
%<8uQh:le-gke%jh@q8-W8iXjIg,eW#+R4+_)bd9@AQt"4paFC78%FK:Z6MkbI%lq-S\`^FCK9'[TkhS:F(lLV[0I745<L]P$PgI8
%=?lF"^_Ac)cJk\,FVncqm!LZ:I4ZRP/9_%<Xp6GM-?KUSQU^1hXX9Wih8G*p5p$W!*Tg#[OLT!+8!4h%UF0%KJ8t"_l00aF%.A43
%MD(K)-8]4f[`p8S!#hFCB8LsqE$Q6RMhL'r,Gl3f+!Vp*.!Z,"jL0&NdW5QM$10:A%JEsKR07/Zq8@\B\BF\-a3A6s%d+boZq&To
%dE2aI1K"eb&%%NJL<p^7)"S#H8[E(YM[NoJ]a6P=MB#cBU.pkng)D@>l-5Lol:'rgHKuV?YLIIsfUO@hfXFDA%]lE0.*=pd;kV?D
%Co#^'4MZh`=LLQE"f+($kq8.>BQQMYM$9i1"?[WTR=hXBfgH^.31aPmLaf&>:eur>3"X&t6&lWBYWds3!THKL%`4^,`!U;jaLgfC
%[)E\jX2kr`#/3K7Cq)GbB?3K(Z6<@T2R.@ZX1_%)Q&%BA/4jGm!Y%LKDugo'\P.Du&Jfb<<WETKeN"9/Z_dc*5k88ZrXmei-n>99
%fKBm&<nOl^TQDKSM'QXlL^4I5%s/"/TVR4e'YY$_c3+ECL*.=#YWu1>(:2*A*'YDJ.Q7'0/<h@RfML$c%[R?\XWrq+Vm-?CN7igW
%'FGgp3;>IV"j$37!1>\W9-Sb..9rP[#fnm=94AIZO:\@[C^@KhZO3kJZ"R,sqg]\T3,dE6**M@"32T(J`$<I9)l@/"&/CpAe)I).
%1D!VMT.RW@O`OJ9(n`\1M#Z>`E<_,^i]"]j;Donj@)YfG6<0ne5`S0M@#c!q_T;3``#Ocmi[hrk>$"ot(*_Lfl#9"\bX:IT+@00r
%N[Zt3*Z^otM]N.kd4QTofo[S%N>-#_?s>/l<5Y"Y"&<3(Z;[X'Xtb>lKG!HO)I4"ZoL'Q*@;iLZ[2Tg8Bc5(C`tI.H0&p8h'l]!>
%OV\p%UZ:VZgJ^s>NW;D3,?G]^O4./RbZXog-GcUe_D9f/)[`Oe7>U<OoQ[cm7'`=)"T%0l@0dBBEkeDcTX?n*RN&nC+&2ft'A/8<
%;Zm/"9+29aJ?I4H&MRik,q;Ci$Wb<d"9"0!!+9QUJj'2%f!IgoB..+tK2#0[(9mh2ZP+$+f[?'2-TX4n4KII&5gF0'>DlVrQs/HB
%D4!lp=e$T74d/Z5pD):9(JQ%JM:jT[1QW"/.o<-Xl6%f:-A__UJ'd;>P[d.>#J8Le&etnuJV9%[R+)3fc]D=CI0IRFL?(VF>sscF
%MU5U),3^(p4!^:,-F'ECLOom=>X6-nVqjU!)"YrdKTZb2J/4=**F0h$l$Y<0&58YK)/pl7+YBs:#spuI#B,mu4iCB_AH;NB!(3n8
%"<AWh*JJd%iN8cRfFXpU\[fGn+SP,XIc`.d4K[O`EoBQ>\&EsAVJp+?/=;rk&)3'\LR==i$Rgoh5j9nIgsBR*V*\Kn&:pX-bqMSq
%eU=:,%Z("5[$)D;#'$4q5g3.EV!PT0=Fso&:m,0=KuJuSnk\q93Uk?+Ah;R`e3'rM'=_5NZMc2P*_o'^09L_)7BjL$Ll@W=plb%q
%C!S1-k,`+gl3o+5k'/EK>-.mWJOo27WaQ;=Ro,Rs'k&N&K^B;d_<rfa3MF%(e$5[jAKj5p>9,*6-\D8HZ^i55>,-&ledi;laOZk/
%R54h2(#^Ks[P"tDH<KTrK0BA"!+_Z(ggKo./0$GQ:YGMqY';jI"OgB)%>?PG^5`]?lDE'5)k=\Q+.%j[6?2f2(ZIK,e8Iti.nh,A
%@P2p9FERkdA=(5TdddO/';f<HBJBgi:ItO]$44KniQinuF_VSp$/8%M_BpaW3GAR2!\9FgYShP9Wl1YU"Te?;7^ULq3%UYO+_9@F
%J^_)-PT8)AE>^!sBnD7'%_H+*d`g<Fd7\9bd\D4k-_h[bKX3Dn>mA5VAtCsj<1lh&G][P.=:g/aZ2.]+;4JGn3.;(cAqEQ+2rgUa
%`_K>LP.!B_4=3Z86n1Gi\6LIqEZ&5F^:@@knX\Mo!/0R\ls1@aka8ND]MMk@`@dM@g@;$Yad\-8-gp<p?XQ7c%?'X7RQ9jV`Op_:
%j7ig+Gm6X(`$=+?La]M_"(DgSkTi0R5g:/26k,D!JNOArH4VIhl<B:N\Ya:;f0E6F%9#kLV%nnFU.I!9dOY#r@BPnu>l_-9aWT1o
%A6sGo$;^D=`j5&);@PF3\pd%q^*3=sJWTP`ZjRE/Ge=,((cd!Jo7A_WCI>ppmGeTeLVVjsdug@NKcgUJ;^]PGJh*DXl!eq7fRFZ)
%o`]_RNh_O-=SsUB'<'LAr+(qRS;ch!KL:m![c6W`hbgCLlDc6G/sacWOn/`d!KMP=_drS.&G2Kfcb_M:#WUd-n<-rWYK(eke-i?`
%>\UGa!Xp@b(i(YS#7F>XoVj_#1JX^+eK8TYHg5&\#nWE8IEE7M)I1n4V/R"..T1$o'L9/2!'=R]0;8;`cTi17XX.E`gLM$ZdNoX+
%C)UEnd]$Wl+@.GW:''<m@o%d^aS4AVlD_A;KRRL=Q40;cC&=h^0NcRIFddAG0WX/WWa@[i<5LAP"qQONAAi4HK3U;o'(u;m*AK;i
%GsHrTPEgB[SWMu=Nl&F?0-tSk5Ega,6bj;/R&f%?nY$LBlPVP]@f%W`r@jJB[ZH+]c,!^A9-IB`Z"6t#@eSuG+hNH'YADK%Nl>NV
%2)m9'V>Pr*i^&fP72h\d/DXsQ@Xpe]=8^n[RsI%AeE8>?@`1]dS,ud'.UT1lfFVP.7mX7gO1a^lNkl2d[MpCrXVaqCmq!c5iD"j4
%)9d@#j#et+#Y?f69fN]-#*Led;R\Z[%gB\).Ep>-d(!hh^SgZY,TPi5c=[e:Jr\Vo)T+=T)(7+*C]RJ&iiXt3jm-HmK#A[[dS*6+
%Jmr7@ef(d;7"kKR#Qs#P:`64NCfJ2W_NYGc9(]=o*%jXW?3\\b,WW247\SJ'PPfZ=Y\RSI&P*18FVH+>Oq')N='W("08;G'n9PcG
%>&8Ms.)-l1*K)6Q")2oEOJ(,sjrOkj@?&(5!F!M5Ea^o41"`"(9?knf**^HUfiCK)M\Tf=1B^1@V,R'gi+te>CuXM>7gOuXR=Qq$
%+8NiC@?)SNkt4AMlWlnZ^*@oN#$8#pWBi%F#GUu-gl9!X3%&&c0FEZ4-3h$N8=i-d[_b57!spuu.(K>1l9X>f1Kh48>")aR5TCW$
%81(e@lM@$T_Q"#W=7Z#LGp"YX][*;(<TdSV*JE$]F;$bC,pEl*b[<(p!&MdC\<8,J@^3?H!/ag0"JE\4/!"K<>/?D=7f?.%O4l?i
%*<9NS)OH4]]+U1+9ulUA?kZPW#/=n_E&k=s6.MgPjkF02*g**;6n/*I"Euh_P/]b=nA@Hl!Vlj(g7,Yuf@6H<8f7`eN2\AtoqoV'
%a=ioG+(8H+5dk4TKB!eGYQ`<F+$%!\8,*p%#W8T",5"<.i%Y?s&ls9#=k8FQT#Fk2!.bKNb-9n?&?\dR$Y,L8<\0;2.1SYJ<Y>*F
%as@b6;CBI]h\EXp3N3Y6K@o/PHu^J?+L*RO+6naY44.-R-4:=ufXA[t;%bt!LfOr9Z^Hfb%MtAGlA98p3&_c<JRrml"/H/6^R.U6
%*J/bNR!;m$$;dD[8bHtVXX'XVM:'Op!HO87M:HkeaMQr\FZ3X5keRZ2;e-H?d*`I3\WH&\cm#U1*5aE$-400j#';T;dTtNlL(Z?r
%jQEq%O@rJLk1G6&V\CLA_uIas$`M_s7/E$``QT;`Kd8rUUW0BiY>^EL=FpVtebH&fX:CUd?m(-)'jPuI>CAEqg581$&],[>d&J8W
%^EIrsTj366gNkhi,B*s`0Nm<I8ERVF=49:F<u)F%TS>pWfTP>`pJ`)fI(6=)d50:[XQ5KG,kBdB7FV_Q1_HtjS<pB5$q\iC[.t.C
%!C7(t`:G2ZP\-N9O#S)s'Ja;$$M;U]d/?fUMsM9e0<![U$7XZ6P3QjdXI:WI(0F#53&fFIRTKl-_J:2@EAK+iZ8aM(SY(]N5_UNH
%b"@O=mt*g:A:CEWlo]g^ia[dJOYn?N?U,n1$Ste>5X^'^p/cNj>Qok&l8)b5iaO5=n^bUuVX%25<8AtelQ`p_1(]]Vd'M[,G;q\8
%ZLkILE7qL":*>=-6.iS8>K:&iC`P'P3;^X@C>fN9<Qrd3ER5RGp?6R!91KbS=0UjalIEES>+9?g>Ikcckce1-:t`Hmft(c13X4cb
%1"1^,B>G2rSWH+.e;7@62(hS>O@1`SqW*_Idke"o&-ah?^eK?hYH@-[)+kZ"2\_#`KA]A[&;"Ou$"h-p"tldEK>$=3?koMj00e6r
%L=S5,EP=">B@+*+eL@"%?=Gmtfc:=I9GjrTdEmpuE`O<jGAunh=u*Zm&G,6$FtLt0\QFd'a]<?SQq8LU+q\eN:]h8!^W?`e7fmd'
%,bbQO<mT/2NaW$#\^95u%S@%ak[W\0%U6^S9G*\>]KC23>:B@1%7M&#oHj@rH?l)`absCLZn,(kcr\kbbm"*&1*F<QV-e1sRIY;3
%&E-gua_fs!$n//WPS@On?sE3;R)P>0,3@e"6bpa"*:F;&ADUdBge0n7M)Fq3MS42[c(mH3B8WT0/;.H-HAqeKP+c>F>&3:IEco!J
%>'Z,CYV\l"$;?DNYHSVH0L]#GNdecuTh%KN6s'FV^elYM0V%5GK@#l#R:Vgf?c/i)dSLR5LW1eS[TU,fVCa1[j/"J2!s1t&+1m;@
%-ePC*-u9UK;E9!F&@+A'jN%qP&04p8PkA@h^t+A<Ua4&\GZG@jgKJjT-'7=E._(m_j\[EV_u$:"R8On5r3uln6+h.babHj'J$kYZ
%&h1-g-sEo*IN[#XTiK)TFR@nM\03C<Ic,qJ/eZ]^!_((o(,BPkmj!^T2p#1gRL#Sg`+"dE%JG&X$2p3:)2T?cAhQ!n+@l$<Q_C(H
%!>&,IYGe.ibr6Eq!b)rJG1hV,_N09t%:\RbQbERKh$=o&o8th>`Em)*%(p-tN@Z+-[gdW+aQ>FifUbN!g`Tj.H$#3d:59A1eutHM
%g8J<d9"2IO$Rd$,+LqN(AA0eHXN]Bp[e8)TXouY(J7*Ei"O']s_h50Z!9*MZc(`g)3C8JK/Xmj4@`jP!q+@B>SMID%^Z>+#N]n%.
%3[DF6Q]F9JOjgZ;[?/nY+P&?R\^3gVWt6gIL6Qlf1sf(-e,&7c=)Wjf/%!C;*>_:u4**l.9q_'M+eUHo't+L0fQ"jA"9-=7)^*aP
%UYLeV7fZPQS=L62+\KmSLJ42hlQN.Ef,UrU!"LD`&*c>!--d*_\g'OL8@q.-rr`3hlj?]+NrSZjqOs4#WM+ANjQU//Fd`g;C%*Kh
%6_,+sAqd_p6sRM7Vdp+4+NbJa5rhmr+A:b7@1WGg%5O_G51.X`=9W+=lRWHq[0i!XNt"=;iTj/D3#NtHJ:;.:#@EeFQ,qW8A</T&
%i"\kEr4s'/ahsVK8edYD@'RdmOWm;GfST]#oK[p.e'sl6&%/-dILNMN&)sZ.NhXAGAro>qnY6?C!QU6O"/7SV>drl])Lu!g6Seq/
%<qQq3*W>+ST^4eH810`ONf_]LT["Gu&\TN_dR;eR:Z=h`%T'elagjVG+0`fbD?/bBB:K5lMnqP>/JpGV#qQ&fffaq+Ag;pfa.A>d
%ZKJGu=+&1F=5_qd\G%Ot&C]bZE4801d-F+).3:9SD8b%WCKMd^)DT;GDl>*X!_D=6Ls<9)c4?ZOan'%C.$1MY]Sg;,X+3d\YGQ9M
%!8[j3fco)Pd#Qca!hh$IFc63:ie!-FEXW[g(J-BBW?6g[?7.u1@sA(5H\@u8<6<``4X`j0*L.@fQqsr>LFcN5(sCM<!p6fL/KOnG
%+2KOgLRT,)$9LA.coD-TR]^5C1:2[qm4q776%,'_&/IK,AMH`uaXg(H5"a7i4\D6S"U?AA\@`Fs05pti;d!_<Tk\?!!iN-p(@XR'
%+u0!#fh.00pi/8daQ43hE?JG-@;dT]!3m:(-qSNCLX6l8<7&a>4MDGiJh"T/3*^W9k.2`Q!Kn7>fJh!q8T4Z6;CIMp'"#*(G7-f`
%+c$4"l)m9?a@QXai81?`[)fYnX[c1)d>ha\OlllYf@9VUm(S)]*3C)M%T$OcS[>6o%*A2CDhid\MK@\Mis]2;%H!jcU-98V3Ai:4
%eV"sfD@DB7d;2ZoS.-VXbR\ca5sbqRn,l@Q+cFJ.pL0h;%T#"I&o/,YAke4+?%eInYF]aLgG1`@*lV.KNf;pV;-[?-]"$O?gQ$p_
%r'hH$?20$eLJ&b5>SJmeIMBYcF<it@(AQ>*QKgV7bX.0]C4L?bk@f"WNe^"F$(l8KJ;e"F7)+lfgK96>+lBeWd$F;t5kp$;/eJFQ
%l/tW(#/\4QKkgfB9J5`hjDf'ddZknV`7#^/0;V@VbLb:2J8\"O#WOMtGKRS6jamN"?OTE&%,%3B\2$9_V6;BFEP@4,W:GBrQXOp"
%(VHQ"igT5eB=06E+]<s2QQ3,cTCZ^m'P!m2N'CADW^F1[U%?7nX;RW]=5J!S($4'2h*N%mUqJo[/()>2SHhR2aeI8C]GW>M8fT%L
%SDsC'NZ&3eL?U#*!=:oP99l.gcLPDe+X/NI--t43":0h_?:9iL3NgMMGS)rW1M-n)_=P\_3!D+L(F?mpnFh"Y'0fDJK`lWK(?I9Z
%-]e3qM'%#bqr),^Q4sPll<GHThVlj[:,T>PG8EC>`%QN6g+)f<TUJY7d)gk:k+8a(ODJ;M""U@<_FGHQ"=oS#N;8Y=SBD1<$P^m+
%BNDR(M<sN7J"'@WoV8AOS[=OP/?(3B^Dh)Q\dj7m@FL188IWnDKtl!q!10Gio)KqQ'K.(DPa;AE)_!u+d>B""":nK&VAQ4S+ANY2
%DA$D$Rmh6_$q0:n:OLpE="OJ@Se9p:B$$FH,mthK73)k*CnD(ZUG(RK+,4?1n'1<3=T_>g]IkK&$2dtG<'fW@RS+rBWfdbW!HeN2
%$6,[4,#=^:TK+gYOFda.5DEnq%M,Oo&=_!a"5>L9,n5[f"%+i1CVn!S]<U;V1+>u]_$9J"8Ohbc_+OM2(J(_gRFW!`c_XfGP!kB]
%cO#(U)9!,!C0Jg\47R,6'"+CMTU!0H(O\4JKhb,0#W&V(5OaWC0945qG5uJ>FXt$QH0ONp^)LFYk`nq6+$X*p,oNV0mrDa#D'f,j
%Nf(Oq_,!d0nqnm;LHj[HqBc\2fWK\KLn@!:pV:!n3c!5c,k$C2$!-uo$WJtsbprOTLb!a653gcGhB;:Xn,qZ2!@Z=eYLr+.F2WVO
%Eg'`I>LJN?90NpGMicj6KW-&a#1RdW:W>9>SF-J2bL9l+a3\*46W37Oj8q+A@S7<7YiD;r^Ee]t4BjIt'L!,"J6G!jM5:8@*1bX'
%fsoJMdgqK0Mk4oa56aUE@YjDWJsaG:auc(Fr;WY6bBJ6h*-oht'9Y?&&G.B\,P+[CoaI'T;ZSb#gDhY:A.Z@L!92A(J4uMTdKelH
%VY"&>bL$(-ljCQBW<UE=3)PWAb(Q&$FkrRejD!%^UOWe@3FNOCG&dWem?Accdb2s4.G58WrD[l>,l&#5q>;@M&4krj/WgU`Sm'.b
%&q`;"a_o8aA@M@09\aS_[`+IIrW$DKPsJ$$<9:BO"B-_5NDVKB(7C]XNC\So$\q,(q(;f*WptHQ(@:qh&/qfW?X?OjLN>&hS+_Ml
%E[hnjWIUX%Ii'Lc.Oe^U*mm7BQuu<Pnl>TqZP)X<0/i<Op!Y21(Js@Q<h/s'l6#?M$;Z<E$UjJm\ZUg1`$9C8Muo46Hi)$Z'YbXg
%&]5TR!>`H"/:j=I?eLtHM&]8]Yea@R,4EuL6;I7g(VL>,VQ8T;Ai<B^j9m&[Y^,;Npf>/ZDsBjQ+o.q*hU9+hhI'ZgX4)V$c/*\7
%:J;NjS%mi'Q2^^*S`ETk%*pfHnj9UtYJ#i`C["5eU`Qa?.aMl<F"m+]U-/(o[FkG'q[@V89U38iNjGuBI7ik)kE9!nRR#=aJFY1[
%ihC0:Q8KZ*PQXc_.Zr:0_/9f!l]ugqD)V1>;rC9JPrp20&!p["pgjJT!eLeX\-,(]C`ZE:4Aj<W\*0qWGuPZT!2%FSUT-e633TA.
%WS?tr^G9naMnc\IqZM8_iC@E@*Fajkk_j[(450NLMI-U$_)XLQd#p(/V%Y^hc#L.h(d$ijr,<fI(2jp3@]h4SOcM@F2jmUkjaKUQ
%JP&^5o8O6=!M"\04BR(2>4Q/J$:)S3'?qYA_I6NFJ`tJpk=m?`8U"EJ,\7N!Fn2$2c2\S(7@gQ5R+Ue.nV]"&^@>TurRV7G%UoT$
%^0Q8V\hHHg+Hga?X%pcp$4G!tHFK;"GNC,'r'61='<;Ttn%]/`E#^TVETG"?rCdLZ(JBpY=htMTDck63\-BhDq\UEE3C52-J)i9&
%q.>58Ed`QjGGW>sq28$pk<3f/F0^?Kl/8"URs:.P2U$V&Dt9f]!\Fm5"2s2E3mA$fK:gBKmoIPs[NKHMAOZhd;IBPSf5.bu>Zd64
%jn/C*=FnOt9AVG`^8<fI3L^iRc/?KC2V/4T"ueaU__9k&(P'!AP+5a2HD4fX;Wbb;X`iWD.BqKf[]]k;)[Dl6[5^\W-l7aBjCiC\
%hZSPK>dcFd)tMF^#A"W[=.g-D=r1V/V!LSi$U>:/mAW"B<#&JMX9&DJl.V8g`*Y=l7&p!g1PSMuQ`+o,1irg7l$Arh/#?2OSIeVC
%$nfsKOYd]!d7c'X!(AF+.AFmENH?2CYQ?(a7'Tq=%r6MC_\;l"J%n^EM.oBr)(3/&;6<Nu^Y"ef2g\.U&k\m:X(gr@Tgjm!`B$*d
%hVsU/7ERgb398h>YuSSbchu?iCc`d&6GEF2gDK,^2is9/Z,[j09d;.%LM#WljbR8TB8r@t26M1E%D>T`Z=eB['jG>A%=oWH@9OGA
%J2i_4%b)cNXk<Wj>>'dl,Oe@4ElMDi+XsBb_@ucsUE>mmI^E(KiEK%#q=1`lS,Wgq1@2S=ihaQM3^>,'7OcH5$og_s[2!`ZPkIeV
%c4%Yli<^sQ5dc<+%WHrM*UTpco.qsP&S3@ce\Y.G@=rtaD-LAeppg.CC_4eiIq.rq@nYB"C!B;Ns)9;2!Rd>*Fn)lpLN$oPUm,6e
%"lBTN%]'6+ZPuoR$Ium=lnNj8mtf%O4j.@"/)7W2]"D+NX2JK3=D/!.Q'd<f!dZbUWgR_YBi2#X\h=33.'DO8lFia&r>02NM1h;j
%Fs**FdVu;n1,%s94K0:./bk$Rg3unmXZt*"/'eZ8@1PX8C?H$:,W(3-;2GXcY*C,f3sf@(d(\2Mk,\;DR1+-<H=HjABC_FWPP!lF
%"DLA4nlhH)pH3Je%gPB:n#dtig%aCTo6m@DGWC3qV!%I_79oe*9jQGZj!HjbQA-5S=."H$:G\'8e2C!ZY-\jL9JImCWXGTI,,!/h
%2,]nK6rZYKH[_B9Vn2UkkuFHr"KF4T6-Z`Acm`S,<TK+2DEF$52gFF*UDG]`+Jq1VP]Lf'UpkF(p4[[iJ[YRsALjDAHC'b<a0k71
%3Scl*dnl.$n%/]\'n]];5?"*qai1+qC$i6Y&hDAd8r',`TB>ukg66u2ClX5hAjrk\e>'b'\ieJQ'8!A$`IbOEH]I4TasT-:<-3Wr
%o$!s@47\H5!jH2Wcu;s/`sS<idnSNOlDVC0_(7b7BDJA"?.O>'AsT$&]Ffa+Y9;'ee)V^U@b!Z[fn>M%0kBrMSL_W+LYo$%$]jhr
%oEg07%%sYZHf4ZJ7^T7u=K*k%[siRZ:ESfo6)ZE[X-Ji'?UOB-k@LcgfS=33NU#l/KI[2HS*&0iHUiJ>3l13==PDjl*D+KOm#89I
%`>5ToHisWG@=M7^aTADUX=[mXZ"n?\^96c:#+/j0J0FEbdh5^Fo]N4qO7Wq9*ZZ%qB=#QtDC\KALn[S98$6<3BZ(P/CG+F.SI&5)
%RO83R0j6MXCnEk[C6(h1i\SYC!kG<.H0slNlGT;YI@mF*rUh>'2pV0Dh33'Y4=tkY3SrnZgpBjuXHfLLBelREo/17:*QbP;bZ;*j
%Od>_f+>[U!$>Q\^DRefA<g6AP7'ka9*[kP<?DD7#gkU*'Y@R=7!M*PV.X/3A&#f/QfGd:4lmpi5R6PlEAhj"N2)8+lc@6/SVaj3h
%7Z^d2htK(_0[IJ0ajGo+T=&SN#Et^)@=>gI<BpfIC@_VOfon!+B_F*+\^5],k87#3`Dp@cccJGEUn_8b[ga.ml_Leiem3c"k7KY_
%G<n7!pk,u*Ekp'CHgLK::_:D(o3HK.+8bG)eHDDeY;9fE+iM%Pf-0N6>'<#'F+T`[fXH7hX4q`ql<ulb6%qY/2m_LE;kB)@;R%O!
%i%5(0>t]oI(m6RY`phW6>;:)ODbGeB/YOCpWBuHmfj[kKI[-caAsLfq6EGf^]h*E>\_7Wd/\H710^JAFLcKYulJ"7BfmW(&%1XJN
%Vt6:dd$F@dAl5_B=k[e[.O&46m5u_4K.X%8)nrt0=KC:1A::0;@#$C6g<1Es4iXoA#CbQhEis%uQgN)I+h@5Ip^5S*LD\lQ!W&ZV
%[X8;@4i5?=SqU^i&<ckMJnTXVZW"Ca3aUC=3RHP4o&6LVoD-Z$BpAfQs+n[[OfsQ]9#$9GX5BF!SJ`7q0;f4kY@AT>lh2]O,U\uU
%?/-X.9W.4m%r7RIVjkc"`Wj_0c=6"j'Z.leK1<G;I/-;;:VeXkpNR?MNLOr_&9"SP)EU9SlL_mi8hYlIT_)CO=hLM&jJGg46L):n
%Rda7M87^5HK>X94&2'Y!b<QGMKs\odX3uWp%_7@n-f#;+P4fpH%783K?6<0c(K\&f7`au6SYX,$DNVNeOBZk^W0G^gP@3?X>[^7!
%79SH2$9bmiMuJMg+dFl*2YG&8-R.T&2G-O!PI[9F&,Pcj8!Qb8q$<boZk!EIH-g8\NsuOd59'f?_bjH-L>%%[4ej\!AL+5'0Ihmg
%_f2RJI`ArE94S5s`h!c>PJ"@HA?MNYY&^K14KE'3m5s*9GPl`b>s#BR!U].ZC?AJNcdlgNZc[1sG?&rI\?5LK)gK'Wk-&d9d*V:b
%IP"5)$4C+8s%Z8JWYjXTr#2mAW^9$Mh*`[#M^J66k%N2j1_NKsNp%''6@#R.=cQ@Z/#de.pCOI(Y%^jlcUplPL\O20BU4%sAcr\_
%A3))HKecA%IDPRd%aagn)kuO,Sh,!n&t35!&$u,poiTd8&cCZ3*jFt9`d`B[r/Z@"lS[huV@%!FH^R#L.OQR@kjm>&oLlFa#ip]p
%Xf=-bd[,T$X)/#4&N(A&JB0OkmBNWs*N$jhE^J*/MM7"c%!AQ78G`L=bgj9CM=0^(*V?8=<bQ0M'O:4*r^`uWO1)siTkuOgaYKID
%EIHod!D4XuN(LsS4'TCA<m_]Cahbg6XCtUm^Qr/9gu\)K+m)^^KaUh(*9"`ZlV+Nq*Q>@_>$0dY'"n^ch\c[m;<)tqT2(KX0M?Vb
%HQ!5m(D[MdXPbb#Qcj;3N/qK\G5Mg*'`gfGSWcnMP;p$X8r?hKpHe<_^OgdL.:O*eY@dOd46Z\JrS=CsJ@b98NVXV\r!H*Onfdrf
%e8pbFnu`*oG>%_UKruR&C)OY-.CYTVUH^74!FLD`hl[f(C8AfGb4.!*4U_H9D1$rZLEIkT1($1TDN-.4Mj26K":r,HC*d$>5.J#)
%<Z%*5guYo5k+C&Yn@hOd_p`5sk)#n9l!@.0`I\p(8kT&*:Sb\Y>Io@%;(!=L%W/m13O;7**ea;NOXsRo2ogpWA22&RBbBrc/X9-m
%+!P0DXXPRJ#;f<(b%p`=f_P52ao/,M+Eq`?NT'Wd1H*l=H!>2OVX:;,]RDa+mpKq1G9b3,_XB._Ttn`P:bQ%-.9%Oq:P*:B9P<nl
%G$Ki#q0Z^'o=e!'4e-kWhe*?%m,aglbUal_TqD/$Y;g]b9q@4mph-YhTIKiOd60rN#L.Z_=6=6u#[qHVZ+$!oQ[0^%Q7P#tgs'X_
%h%;Y1bC3g5q%`eMR[1A\nLEtYNpn(bX1n<?4c*g(;6:)JB!6%W$E1B/Qi63:QG\0[244uCc*d5PPgt0<,LuaXIZC'h#t!Yr91H<a
%:*k!]Urq_?bCV6G)G?guF9;6n>W].6?[qg_Chr3q:g(WN[f)^Ahq+!O0tV`NqfA3Jn.-<;>m4+t/S)"a&<7E'1$pf>LT27>Vq@)d
%A`r-Pck'kGh*DA$S`1Y->5bo-\3)=G&R)_5=<iTUU)DY?'V,V7c,;<\DtKr_XtaD^J';*P6f_.T3ARd+@t:.l[bd?XdY^$ajhPPG
%DGkA4$L)lCV=F,3FJ/klM/18W50[VqF4JIM1e/&P><PDr8)c)<;CR\h;O*,_(ir.lP177i18=="VgJEp_1&45qYM\mIY?l@9%_Z*
%U$>SQjXWU$D+,mBGFig#0h9`oIRW>Pg3HMi?i>hH=o#N?VJIlqR]H`K,,ek2II:h0fbJ(fAT=kT)7llLbW3LMo^O/R0IUj&.P,Te
%A1gg/-#opeLN)o=FZr2dkX,r=i7Og)$e*t51*kG4g8cc@GISXY:KB`HLA'lV?@6SPV#Tq5no;O`$O2a(Q>q,^mU$NW^CuiI(O\Wj
%iLj9sE4k'EC1s0qT^0pYmdJc@+LFaK4u7!-10k$fT!lNl#*2f[\q.hpb(r,JEQoJAImIJk+ip3P@g-^H]iB;0oMHVhUP'D\.n(1$
%VB/#6G9"'UQ]ljti`Ml6[os-C!C9*3H[I@ecN?TW9S,0#_"l/J*FnH;5N7'?EaaU>Fi/g>/CD^\]47-WX`-T/3*h;JqI$-g.08dI
%'V73,fj<]#;q4SMb&t6'K7u`SQ@?cthN2pV?[4/W0:WNOEuImt_fe>Mp,1*L(e52q4k%7D\kZ6Dh5al]1=OM\=OI7>c9fd)b6QHf
%C^;)gs0V#E)6p[J$>&`p@(ATN%bfRZ7&/4*A:3-QU)9(XT+5_R4=_ak:BB-I>;?sCjNp#oPn)86jH&uS0JXT.jsSDJq@2RAUk3Km
%o>dIS`a=d_[^@tWgaX7uc.%kPhQaBFq7Q5`B1:EZd'tYcoZQoc%e4[09SXotpGq@ToInL3bgG2BKmcq(X<\)1#*J1&'MR47M]MaB
%WN,dS/E<WMnLlP<E:9U&8?&4n`AFl@RLJZN1&Y2Bd%]`^eapLm@I2LH0h;Qn]X10i#o^Le"mN-[`QC9[F.n8;2sq0/l#Jk3`Ean6
%]99F_Lm/?2V'XY<oC[mhceT`s;UXqCQci8S"J?Lb:JSdh+N-@i8S2V/#?4$H[<XtnK<"*5Qr"m>h)p6l/^fF`e*JF&&#lPFAEjQ4
%WT(E@a46mFG1KWBV+3WKFW(TC`Ik`3MiDR_a=;0qm!#uI$Nr71=hYS/h5O`/9VStZ],k"r.Yo0dh,.g2:_]"d'Laf"Dsd-hc%=>L
%jO+i52s6^-@$7%Z*ff%3/BMe<?5c&T)5i3%lJ)NLk#IqBG8e41bddV7m_lGBgX-\X4($AT5O\@RFG;3_\U&)[j*!#t$dnrm8*0XP
%W_u_X2WpeJp+La^-`)oDI/9H\ShF8`l[iH^f=_;5hB;1Zp(Ye!_lO45No!=-Z:'P4aNF=Bf:)G.qSg']F.u4o>HXc=.1&hl![)UD
%!"f%<b8T&"htD73:l,2K(nb;be,ehI%CH17e+e*^aCVcT`ToRq&\Xq<*)Nrp9R6>\P4?!,[f]F?eE9bmfT,!>Dl9Ks9#>4`bi7h4
%U6`]!ZbV87mtWeC[+fKDl)mV=3iL('plhb'i*#NSX:!`2#@ksNODgFT.3mr@h_9alO"hja/P2!YHN*2V,[a^)OhR2_kT:a9O@aEJ
%Cb:>^C@9%fdrbs\Q0"m`F/A37,tL;<D<tAo$<!$Go@c7]RIrHAhTed23tD.E_a6p\Lq7%'Wr?"U>d>2j=U3:u-#B,J.I1B;g<,6_
%%Wq58$//aG"#rKXbXFpo"<^'KjbbGM,gu[/Tk"=$P.pDJ&#%Pqn`8<$,hAUo44GGJ#!Ib#4.&Ca/H!Cu;REIJT(\MN$eMC%H`E9g
%IS]6P<r%'CrkDK*No+N@NC+D_a/<SKrhJc1N\pWC=Z$.\oun=HNV2Niojo$j6"dgPXZP7CJfr<InVN_</HE+.M#E0<oLM[U_t*Ta
%=sR1Y;=q&<76q7"QPoDHCl;nFGjHGJ-t\BoGfKJb;nM&<_(VQ?&qubgOlm;oCA3*2cVg5H.l!Bn\n8+P)Lf9AH&(NKF:a%_MPq*[
%!=G<W.m[fcH"C$gi#7D<VJf8",_,s4/fqb<G<YuaeSXk(@Pa8-X-*\H]7b`Q(46beGJqV0]$oYZ8*]F7m+j+p;_<lI)S8uQ?`><6
%>X&;;I/_<Mkg2*KiTPEAdI0VMrlOUW+'>WhI6R[`fglN*eJd.n]"JsQ#5eQH#DMbahp5)<Y_>9ee`ok6%KaM5r4K0s\S[pnfkGbc
%6*7pE#5;h@L$<XrkQkl'D/G5J(-#FQBn(H-bB"f_&BXP47bp"7H7N[(O'$uFkphQ^AToNaT`<FZeR.ZOMD@&C(4EN$9K.(07g\"h
%*V,,.Ka:RN$+G0e]33\6](#6p[NX/QBUNh(Mun!7r2I6H*Hsi:1:f`l!skX=)T^7K\Tg+M"ej?2H^L[/C$0*BNp_c+5qFr9R7pk'
%43S6s,1-IF1S\$*Rn&Oh1geln5mq1&b;+uZ6H(2/5e`.8K9PKq(U'7RdcV)2LN;'t'\WU@#[<@W%'W_QSf>/6S)LQp7*%;bo>I)!
%9a&OZ\^WI+UWU[Q.6==)jAGK,W];oFZbF@sCfS5dY&JhTR]>e<b5kM+,SFt\d=MDa_rQnoAi_t[8o=oQ<i$4p8nnT4Z4MoN"!0)V
%+'OCK5OQ_s\S+Ed`8e\2-M'Qh%,W/Z5D1';$E6oB(47Cb62^/VWBh/tOuP,t.#6?#9a]N;rgkMM_BXM3=(.k<on*6&6nnL[H2rWi
%q'X,B*u"?#nDd!Ml9%9SlZeLs"6Z4YPZpX1'^3JH7,b'Mbt_IH#e\G([iO]`E*(qcOWA!#2oGei%KV`V<b5-+VVC289&$_8VkTsS
%A"\ETFpc_MXVp?Hoab\/e;PROrFP=un\]$]D&g-][Ec%3%V;I]=[.dppH(K-lnW+j>QrUCCAme&G5Mbim,JD+N$<?kL%p'WGa_/k
%R8$E+17.Z^-(I>1Q80Up2WQ8Gn>ii';(!jm:B*;=+K(D(b'h`f7!!oGbHf];'8eZ:Z($c.,VZFVKR`lti/oQk4c^/#2*k4'Z]eYS
%:XS7pb6-?+.!$-=9;Zu1GXK'A4+>$nhG;^l;@fcg4a5!#BmJ(/n>ht&2:k\Nq![\;@r?dCK,.]T;bK[G$cF-:(n<&HJ_'o&mW0@Q
%rDU*\WL'k"Z+qj1d=OAO0T3]?LsGaAq;Y),rie`+l&['1C%D0T8(6GWVA3gVkfK!G[\D`g>s:*`!BlI=H"^.j$"D;O_X&X]@$QjM
%Cg'8>P_DFgM@f"M&;OC=X0,>6!*==C+c(:`fr=`,^j#9l5W<@Qae]+]#d6V3[uZ.L_!4D6e*CYdI0)VXqV_D5b7G^oT/<8I!,#W)
%8ru<`]YKr$:!7qG1:ZgR)Ei.A;oR2Zqpf2)HhaeZn)&FMiskp<I!i676MB="RGW(C7SpA>Kb4A$n]/]I12UjhIK;k_p2,!O[:\6/
%6gfo@rs("\kU-GC_J@,V(<Kd)PsKe"n^<^g#RBc)UTs\4&J_uq_bnr2$8=;cAA-=lWe%Y&%*T8PWuYK_XipdE.S`Y:@R2-Ionu>Z
%O"mT==k2#h=gFr2R`LWEims%PEa#!O7LG<F1]/pn3((VQcZ+W32-S(R<JIsRM^C8cmYgdM$JHZIeb@h%QKpi^mBS&$VX.IRR(BV(
%!?u['DKbZT1ftZR5Kk4HOJmRU\C+dhjg+/Vl0_Q*5$t)<kU188g=Ds@@iDXcR_Uf+<N+&g@g7dFGfNCE.5;%Fo:0B]$9@UZjX*_I
%n6QdGYji#-4LF@YDGLr0p[Is\W&]_W\QFPB%8GY::FEgj],G;3^O8k76-lj2B?9'(rU2-lBGt3G$)3^BOCTfNX',nn+tlqFdr'M,
%&nhO-G&8>QMS5JVG@uGP4?G3&B#rgd0UDSg7Qq+VGgEijE5&NUT68H7]>mblN3%(id@b&HJ0"kK1Gp4a%%Al\_[dUJ4a3NJ6GU,R
%QXe_r"0j3cm^f#1-#jOdS&B:oaYU,kDGLW#^^X@le/G`_/6A7r<]WZ9]*)F`cPjbI#:81H:?5`gph`qsom36H678KajQIc9<VOin
%?4oEfY$k>7P!en;r@/8Z6<<Ab92ScX\c;?CY/T?=[@&ph0rgoEM+5i5XrEBLDOR-bA#c)pG"]))aHod"_pu(ZPrtl+bH;W\O%?=O
%(!O=kXsM>&m>e*0.qG#l]0!Lp+.2IAhc4OIc-sC#+ABnC=le&9XFYSd-8'taIk99R/13/mWk2Z4h5Ft:\]G*?3g5\gE!I<C9$9"Z
%<V`PC[plDPTo?[!X7J+qpN*/u/',cDs#<SL0jk6%`?&$5&7emHq"RS@-\%YY1,>!XPs+ZB.+WQ-5:WS:J5sMIc+ge]pfrgngM]e0
%P<RH$V:2C98>=OY(pJdE(h[HE_c2k4Sr6T+&2s]g_2flN;\1,&.W8CdOUKo3.FrkbCfs7u$oDun4,"T_f[.:YcY1:KkW!s;8MOIe
%p9uiZd+;k-)1Re?L[O/*DNtA9\%CHdD-P/)Y;cnjdT/MiLml&m:qu5[8/EC1LWmV"&D-._1D[RuO8le;pjk83FkU(39:\7(DY"UC
%9,PA]buaO.BYNH/9<1IaNWtr8<$@4sb@3Z65AGmWqSq-LUoObZM8t*q:^8j$I_h!`oUM_E$E_++1I/ns$CY)u8SeslNDp]Kat@Ja
%-1u:Zr%9;W,L_Ll62o;pmZq-p=]Sd`#;dZK7:Ee`qPq:b?i)Pu%]''BV,j-*n6^G&@GE3cUOW!&"pVUV!b+<]Fk1%rLP14CIFWq1
%LYj<01Dor*`XT>-a$g<q0_;DsKAlkCASO##+m1K;nJ+>?"W7jp@Wgn%&CO%Xf-u_\fYLQZ@eO\'M775hLbdcU2"jHb%F#up<S6T.
%`jo,&2Gs*0_KeW:LZl$s*-]sT8o"cP>aDZ/T:NmT!XD^QlE4""?<+=uRH'&]2<nlBd<n&N7'm)#a-f,[V5s=WDM)g7;91Ac5)"5O
%7U0g$H4&&ie^QoY^Q8O&;qf5'OjOea<_\ecRSH6OaI]EQ8Gsp^13RSn-,UHUB%d=SSNH8(E7$\[.o@f>3_dt,[eTRE$WEgRe+QjV
%h8Lr/nje#B^"Zmi!NC5YR6],mpGgk6*F3lSqWi(>T91O\$ZX,L+k^$Bc(Ar906,06-S"nr;jJi]4]9+kI@eN^4+_:%Zg$;>2%t6i
%/2t>Lj@qlm=Z\KA_(\8'j&g;%'U$(K`i1-.bQNge7<@_)Hm1!*[hjD"k\(:`@QZ=0?Auf9>._+kl%;lH=JKQnLXk!%"8aHm<!=d`
%Y-He2>BQ>&RR$NseKG?2Kak:D7Q`!QKU%J^aq`H-Bmn`u<<K^^0(:KqP00KF;il:DphMlXoEo'PN9r[)7O'Y&6jC4:lkCWac"te*
%F1cf(0F`BqZqF(`I`L5S*[l+P"'C654Z.CL:I!'F#f7Bud#0DI8KC2ta2i,`"e,5j>s5$u<;m?S%3k:,1-Z>)$k;ppQbqCu/&S;a
%#1mp2SrV\G6IffrJ<tA1=^GJ3:C:)4s1.7JI=L!%=&E]3ZbEqlTiMM2+72rnXi>gY(DVKS[Qu@1W,S"%r3?^JN'l80a>'?G@X01=
%dm<\ZC-$k@mh$%!U4hqo(iX0MdP7L;YTZfe9-oP]6NLUjEjHC=@<ZI2&Ql-_#c)>P@dk7jF,$M*EhCXW;6*GZKlq$P7;,@Z)+p``
%8!]ckUnXDS^sh>D)0;5D&[ld5!$OpTBTC-f[a6U)5mADGIKR%Lb=41ti:hF891)=d[gg\ulAIl3a?7(MY<0@ZMNQNXB"/ne=-^Uk
%ig\fA..j'kP:5ua2;G_nqFDlb*RV0'bSV%%Cmte1YWSd7BDl9?4/D@`=4!/5Oj"Rr)@YD0,:)fT"OJU,qFZ3o:J*(E;fj]`KQE=9
%mL`E:JkBkJFn.#iRgKMU\:QM.Z)Wo_.aSV5kG*-qKs+)_6)IW^gATu3D2ubPEuA]e?-BN^rASNNmHTAS#-fA]-GS>ia&3,;dfIM(
%a#$8R6I!3!8_ch'TpR?Fka36GWWt#1ScF#k>#HFMUc+^HKF0hW(W"H$Ed0r+*@2X-+mn6:F<@X)`f,P=YN8)M@Y$Rc<lkL+Y4OG]
%W&r/T1su)nY3/=eJC8<X)qr2)@tnS%BOd?&`b'3Oaq\p,\,A\@[apP9)6_M'bepRi!fi[1e(rZfl:)eN8%Km*XPEg]l6_XUrbt6I
%NptYj>o`%f+UU*!jVXsA'BC&tAcOmNA8c+ocMQ8sbd9+i!SA1ARFab5ZQPH!P'Cgm\E0Vk!;:G<7aR[N6V^S'$AraL*lM4Q@asYj
%U.$H.@M+s7kBR.n_:s.I-*QSrSO5@WQf+.+?">pEX*q&CC1)K#.imFOHH9<1iBHFe]nJ6O5e8Gf7/aU[A,68<"\9a`U;GpMp<7It
%4!Ad-_t!($$A+>PT>1,TY5S8aqKpTO]C,"*(Pn%_kQo+@o;fmFcrmhA7R8,[q!U#ZQSh/`a)cK2mb!Z&E#h.=d^LLVrDC'?H5<MW
%]-1h>%VO+<G+-MGXQO*f>Xms<i1mot?*+iOH6/G:8J%Ng=3Y_D1>a]J!#j.&<F_F>G8^_oCP&Fg/',]^iI.N6N7-k`*SL0M=uu65
%%/T)Y@HMRV^$dKVg1CJ-X97Dh>u>ruc<'lMgLp<M6*E6LXplIlH]C@-31X<2JLXmOZ,J6,8d@]AN8u^[UJ$TH%73!_,+O#3ckK)X
%Vn]#raH'.1&B]>u6WXqI^[<jnbZP!s@`'H&'q3UEe(GtAb1eNrX.;,tC%!Pf!f4Nh6$/M$>"g"-o2MKGcne%q(I1o]S+_QOXe;8T
%p<u(JT^Brdd._3Q\/`%LG)U%)D*pgCI]Qg/a9:omV%n2/3hVC+!QME`3o%mR/+jk)IV*dQ+uMV9\QTUt<;Z"o^[i$HmQ4[YC9Jpa
%KQh!uELKn8q;Xm$C4;NS1]bV_hatO(^\LNM3*/OrZ'h12ZEVhtD.eel@k=0,<@&1Jf73*Af/J).m]SQ7.YF%qgYou'bR<n,N+OV*
%F1OF$G44*;(T?ia<7Lc3mpWMG'0e:IT97!fn\Hpqhd`O,(@"$;#FLlXkGS]D.D8i'WcpKZk<N=WI9EEJaKJh[$O;L)@mTDt0/MAu
%QRg9Db0unt.#P-FQ0DDf,UK@$&'5@tTI`O^h0'jD>\!s@/oMA(T.'ejNY&TF\ok&6ntM>P\`Z^##'.R7l5c0jF2]3R:/3T0KAPd"
%lec$A8nVX>S[s5lhqYI^^S!)7CSuf$#5@rR.rlHs-\$'C,K9LOGNa^#k9Q$c$;Ubl@YWmWI.,Bp:0UX$\1>(MJpO(flM_3`5.g!h
%CZnoFI6jq4fiWO+L>)5AF+/i"T6N]MV60=Jj%cKq-oUuW"hH9KP6WNnfLDtl1G9p>Hb-Z0"N/[LP-Ic$JBWt[-lbNp'Yu*M0fFR;
%$-2,;"*O@@-qtdRVa%;Nibm*79IIT<s/:D@ilm1DrAG<5W%4a*mWW*J>XF@+l(6.+nRse'NP&c?1G1>=mNQ89bh;F?$HPXs#KM3$
%:%-eek`)4\9RD@^WWULNKX"iN]o\:oF9D3$Trss!6P,1@8=S:YY0bVF]-0d*3-khAp^pps48W=b+,B`9^B,Q:8<1'pn`O:jBdMa?
%D_G)c+q'$/mWDQb53qWl:Nn1me>5rk<-.ED#$>K4Wcg1lDJBjM>#EEEW-kF3J4PD-?q9u3=+9QcD*1AcDC4aE+r"_11:L=Un*[mD
%j!^>X;Wu5/0oIb]:qHdsrclm&n0m*7K:QtJ'FDd[\V+lpF%:7Y5uTf8>0fB"b>;$ZMDKkEL'ee/P,:]qQam:t>3ohegB^9I:.W_]
%K[R@mn=i1rg^4@f^el&LHY6TcSdh:AN;ZjYTMR-56D'u/0^FP6T(d.WK5e8e1leOa?h=6d9H]"h*QjY?K%aL2cq:?&KQ*sL_TPDt
%$2QUJ<Hc^eMWIHia/_5"Xk$;`Wq"^+1!V"*jY?>9"KuiEF1UX<c+3,u[\<"<=7+("ZtmkPfk4V<R9R:KX$07YGB@2c@%R+!cW_;D
%Dr$lk_*ZkS<,6]%O$2D,@j572o>Ha;B+c;89h.!8AM%DjMs@<`fAcW$Lh(:0CfG`.#1s@FrbC.*kQcc`B0C=QEi#F=?b*BUZn`B<
%Xr+`cY;dur"!fl668/aq2_)OY$C[Y@b+bN5;<Rnc]nfVP_Gup_VkqS'G;o+dQb+k+9lf5DQ)fk<6;1.rkh0QX:QTVOo,4=)!"(@o
%.!dg;m$0*ThM1I"3^Nn_1=f&]F?A#I7fBkXo%1n7C9;-7h=\1`a7q\9%!OmP>bg'(CAupg\H]NU%6k=%XAP;Df5;3L+f7-ELM4@B
%peFV'1V8Y8JNA@UM[`iiDeH644NuGK+RS1MSFdi`1FhH3"K`^9&b`<Gq4'9R.@e++G1H?s4i*OW[uicE2C_nq7OOWlD3hr4=`GFY
%$iI6TK2C1=aD/HJeC%#)P(+_E-,:4-5^,m^pn5iH^9$I,)IH:cPeBZ=.M<qIW8DmUmNA/oF)G?.'sMsPh8HQ`<KJSMqVuL,WJ.iH
%X$,I(C-JBg$57B>E%2>*r7HC]\.d6]U<[!J\dH!<+E*<1**ep.00ua*jnq%o+*u8N2C;q3CPg8+U]"PZP#*79!ibNQUWDaZo"&U:
%cdD<e;A()ciPGY8"L?1)dO2.]@roNH"nRTdPItbPZr9U(+h]t'bt9$TRX[M/7@A6REecVPX9d=$1s1!dWdEFZ,M3HO(WuXQF(h#W
%>gRkXI7+%q_NUE0O_X`:Lf[L(LjJ-%SU"bX4;(WKrb88Dd`EOM'C1M7O_n!Yjg,5@6+!t3*&nBj_,JGYpYp6?W7TC>54ed-%*]'O
%EZt4f%/l-6%/i?Q=m/"(qDM"A['k0/BkJ).+3",gU,;#nqIPA`iNG=OL]X8dhL$#GA5O!90X^9C>PAS-B?<Jlf_r;Q^lB/!7qC,/
%p-Md*C^:+)bNX!ko0MAMK)/u1JJ2^c06MP)#<Dr\Qh)'K2=_*<Mj*.P5$[s^Z#s\1,p4)k//&0*Ut$0LnJ`99:'AbqO.iPje7Ro&
%H^,U[Mk]TZ5/h=t&ZCm-;GZa#s7<//]"A;JR9RZD1;g)YG71VBN1U,J@)g3"]akM)r,2/E=:+dZb9)'b%JdmE]g/Lkq56TFq'GG4
%"(bsG\rBP<'-nB"]tK0s+;<Xi$9/KSO;gHp@-Ga503,QRGRa!DqoXWEQ/;=c(!Z8[p?VB4=$UEn#H5QMPRI"V%#mN:`]a'=:Z6K(
%`'99)TK47kL9[UW2Qpn&&"0_Gg'"Edf>u04R(GU7W?@ZWobT+.^"cbi.`CH[FP2Tg'1*3adq)&B0]C6ZkM$33a5NG@kpBs.be60a
%Z>s&@\;$H7m?#N$r4q&\8qIc:#E#RbZE3YtM72H!2t'(?+E&F8,4%R34d5M%EhO`%Jm<7_jNN+u_P"h-mcWo+=(2Qo/sUKA&m@7^
%BEa;9aAn4W<H]h;hq9"nm^5rsTkLUXKR^3Q?8U7E8gHDi.^ZsD+Zt"q$:+C"V8lf]ZO*XgWCTG`@!`-PIJoP9SjF8KZ&@Zi1\NLE
%c[dn>$R)Kn"+SMG5?_7ea)sWD_VmEA,D+X#>!XscIP+g3oj3Id/X%Qf>FH7*OjACO&3+BcG\7KT=lJhWXnN/CS/DWuaXaVee(YmR
%oq0-RciJ.3&9EaAE##bOf7s*9%h+$@fiD')+"*8UlfZK7Logb:",-(uZ<]77g,M9+*F+;7n&5A5;,"p.TsT0@ZFf0R6YG=nXNp[s
%^HC48^MFV>CF%On7(6p+i!q']`7nLm*+O/FRL^JglCaFDN"5(5!kI?"BoDhm-knjWn#W4p3L$,0>19<FJL@T(D#uu/QlB_`c.MLi
%[d^j/%7f"b$&t6bnWY#2Fj*r<I1*HS3mEHH#-F:s:QV%r";08/=KHSjSlbdI<GWn'j]/0Pc"s9k\NN;aIY\->rHRNTK3X^[<M>_b
%#0d9/$rr=V3@r/Z177:JRVtMm5(P?4:!.&40U^Uu76mVL-H&XF*Po:be0ZnA=^TDA28]ud4J]p8">Ni+>5jrs8!H3pWFHTtk(qB@
%^ED`b3,On^DlYp99K,r#qD750,X:#Tj*B[HVKB;mDHLAA1oLk,ej]dZ_R;FA&sI1D.g"7-=s-Y&5OuV-WZlqt@&=p;%u@5a\5.)4
%eCPVq*r<Nq%6`$m`s?TqN<n=WO(5e@3.r0lS?%Bn4F?9l#g<S>gCLr%Y(M&9fdfA<bJ4s'FV&kZmL)B]fTm<_;TAI!Wt=H)Ceq+G
%)4+I]4dG[aJ"]\DcmCS!W4J(D>,2KOR)LN'Mc6cAp.DNaDVK*%[RY0Cm8D(Vd58@s'8+@A`_FZq6%.TIZrQCMg4&+QZ[*gL#DD1:
%UXR(VE<CMI.V5NFjD*O0JaUdSWX<^[!;^U$)S<F:L-%$$RR1nPR<Fp2ge;\j7%JhIo!L_A7)'pAV.(.@*a9X:dTB*r*[@bXX49-F
%Bb.$Q$O2]0W13bUYes1YZ6dN"_U/r:R:^KbmF/!UAbHr'UnITe]>hG^8j%$V641lDg04n'<s%hU?1R\,CNm\oEm)dq>5$fXnKk+C
%s024(9+*mXZUHaL_GqlF0ILm(KF#p$q.8C;R(1%&hLQlt68i'T@FLE`b8^dKh);I>aX`KkoopVA#@3KpFTgBq0h%A",U?*Ie#X,K
%WN6YHW(6*']#Jn?X8F\TL5Q?SkCkl-C>B87B?$Nk]#N*c<'V=9&R?P1SLp'ep6D<g74=n"$sX2b32Ytc+qc3#cHPm#'cA,?<7EUj
%?s+%4[^5hb\ck>^FPH0aADU.Q8bK#)o59AWp-&QJaYMGD^QQ%"ELfG<NeJV#D8f6Q3VqFf19$F*eSb2@T4WCIo]%QWD^WIQ@Y,^X
%8sI9-@7$q-FYTc"rhho,6)T(o`SqIB/a>-)&'@KX;-1KaMLf^^dqN/)BW0RBc/Tj_<#&p"Ai8s)"/C\$r/E+eVs^/)N#gC_nE4<Z
%\-O"+j8d9ea.<e`e+32`aHGb=]_dM2aVJ>m%dIZ-Z[;1t_3]Pp@[pNA!d12LHtl#K#p<69L1/N>[pHS'S*.b6g]_<NecN65B>3""
%?mjo-M%mf[@(Y/cO@q'Sidn)rbfm&7Rfa+sj\2uIVI`']+7HGfXF-\'qC$pXn9&B9Gn;@Rcf\P6[rS[/4ClRs%jI?18Zb!m"aRQo
%.2Wk#NB\'18NRCC*\pL:m]mBk8r"S3isH2N^sl1>BEDWTW/G`*4L1M"j>0u2"O2g_c",M$&3a;=rU1;NNa]Kj5`p2t\dTeH(?MlX
%$PUSi(7tgQkN?hF/rRS9aE9XqHe5cPWr+,c(tm_&1+W-Uj=!jh,+ZbmDf;.<m)-tSr[r"Ia);a-&WkjKJaU2FGNM%0<>e?PeE&oL
%ns,mUQ`0:5.m;0<:ojDmbtM!kHhP,+;)NL[Rd<-jAX@']m<[^QSAT3XD(h^O&H[=8_Ee<t)X7Tp+F@-SjrI?M3LV@"rmX5.V1Gt>
%nFP3$^2"7*,'jmo[KWLE(qXW;CVk-&&`7KuWo#h@Nc7rH3e,XVN)lr$7rL+;RLWWrhIk:sgo9k?%U+f;Vb(K0eJMK2?)dF^-3HQ8
%r8]B6\/Oql*h0i8#+e`Vj=jV;L+s"31/DJ06B4_0A$2&:iPQ$17<V=KmAJ"u\5CXL!]&T&$s0G3"<lQ\iO[LQ@s#GY?_QQggmO1\
%fY(g`B$hj2bFAW!8'=nB+3t$I8%iG6iiVMejG6BEVVZ[fgP<<Do-LB@Zun_i:sc?QOVJ&je+I\?f@W$(hfWB+3TUqSRL;Vg7[suS
%0+06iTT?"^@k6*rrX=gum!Kt+Xij0\.=lD)7ij:n(i_k.4PWl]$<hM"SL\4%Q$Y(9Q%2Of4<1c1Z0.OIZ"5]n=e\6[*64G>Z1BA#
%[-+LWEK0f<g[f>G0<]5j$XIPJY50BGO(]Z>S^ds:&("HK[%fEuUu*#&4@?#VGVYY#+dbEucrf"We!ju#kC>=>T2'<rm4?^l@3e3M
%ItRS"V3sUUhs;/7GBe/i[PZr6kg%O&dNKrf=X2*h:s%%/-:_3.A[8>3>OGTT16@[-/+[YV?NMj?4(j2P]?C/_4pO]CAWg[]87Ojj
%^N64-ZsUEkpZPD$q:,B)D7-![GWT>77n>:[-m[Igm^GYfTdPLDPaJ5]`?qGAb0qt*Y!?$8U$D&pmM\ZKcF3#8T9%5::<j3Yc#B#;
%Kt!nMDdKDiK*tMP#N@f7g`.'1=!H*`.!.(=64c3&bq"[bSI<cTc85!2<JI4GN/Vt?,aM=2,&Oc7JBHDg2g"/akm5S&pB;"J(%h%Z
%r]Z+t1_K7Vn8O^jcPUYVB0l\cO7J(QZcItn@unB?';3kua=^BgVr:Q2;+Jf+IM/LX,p]KucLH.7%85'C8-@#>"PW1Y[0iA+>k>LI
%Tu0b!:?E2KiFD_neU(a!HYaGk?-j;'VLM[LU*/0B"^SjYBbBV=]fl<B:ciO/]jr"[`50%UOeg.#,Q/\HiGpkRf3AYLl2l!=I5d*B
%2aS#V?E;)#7o0(mP`MkVd[M-H.[L`#/%%R5WEg+)U"`<_:c([?5QGo4RAm<uYNN?s,XKBp]lcI?^#R9ec**:8C>-ZmpH/3TP,n-I
%\^:0dQ^^-5g7j1$M,Osg4@,K7GrB=5KXq7RO>U)`rsl=A]$JDL5@tG$Y.qF3Eb?InM8YPn7"q-R\>_6l0=!\2n?.\;&&APd^6jOc
%3(/>e5;P3d5I72Jif%J#&?0=c(pF-?-N2D'U[\QBm,P`G+$898Qa:_n03WrpOB#c$gFkkJB)ldJ[;`/E'Q[c=ar0F2JK/o%Xdcu"
%$@I0<5gJNWIl(s!28Lk[6,rD"dlX>]b=[G97]BGl_Fb$thkBQY]5+LcTP*IpJ4P425NG=.8*]Z`2D/Na+A?b:K`T#*!(6i8,jP,K
%-@o+NnF*uG[jO6s:\W^r3/&jF@&Cd61FTRKW"j?%6W1!9d%#s!)UJXj?q_>$rN3\2P275PNub5*4kn27T#RJ-a03e,=j[27Ze_ib
%AH@%.;S%V]A1#$%Lg=6*F*.b;7t2%agK]MWh\kh#nn]fE6gkdp'pS;`-Stj7rYc`bN_e!gE97-`<O'7EDl/a[hT"DC'>+j(<B?^3
%NW7G7dl[?""u6SQ*m$>1c,`hU0a6jecWMYk-4i6O>sE2>c]f')J&W7Iq1lq:3Rd)'L`(.ulVrcdq%5gT2)DRO+R!69'UFA3LWd(]
%ZRNZl-0jr1llR0i@hu\I.Fc/)Ts<er#4lbMY*6(.e]Q2/iK!CP:6W]rqR!j`(0J2(l,RK+lIh,*X@>sf2V#]kQ&9qF^.5rBr=snN
%GP:cpKlKS5UC;^c<*gTK_ih[,.%"I&@Nds4p,f&+,3*mYM6`InZn#[6>rEN&*Rf["_nSEuLWfbFUFp)K'_JSOi@"7Je4(IQ`M\$O
%:*/0966g4sCp@Zt%>qr&g[ett(nK&ge/.T)hRhg;_8Tt3c3XTu:BqC@;p_T`G(WZ6.V4@f[mrF63ioEbU5mo,aC\5kb/NUe$Jg8(
%.PH=D66`+nqP`6+NbnEFZEA.5T5i[o8r5Ft0$uK9qM:#hJm<@CBN[5l<n*%@?p"MErA]*IWm&,`bFVA=2,L\%S>-/=;unl6FuoDO
%I/NQ=8GlE"#<Q(/Taqn0*-n;88qp3Zp^B;dc3q9`ecE_7T[j+@L'7=ib%sj/e\@EY7PZaU6*,O:b$@HC=a<dB?=?L*^u]aKmN!2T
%/\\Y\!#lE)On/%9;O=GCS56*$_OmM0*`Ad*l$pG:Jb0cY^8@iC;UourrN`AK!CD<ifkkWL_t>>khEKnq'PZ/R]\VF$HC5^iqT-/W
%/)&7'^IdWXY^IK'3rmt]hAnL%J^t='=F#XO/"hSaJY:U/<6'u>E.TKHXg)Mc3+o^])k03@pWJCM^/bMcM;$Ll+%=pGZi6sVr[tNc
%P\YK@$mrNCB(eS,\!ar4!=a)PG\*hnl4-bH9F+?A^#9cH](/6,85#?m/#;AS:#3h(+!j`]gBTPs.cs$P;Ip'"k+Yn-Tp<3IbM:2_
%OOS,I(r6n$C3@0H>]sjqOk1Wd,SRQ>I[(8qVH,Z`l$djkJY6^&1Y^,aR?SRRpNGLtT&t&ofBFG(4)#u:c6W!;$6>scW^"Z"p4lN6
%/g?"BBH4SS_b:c"%jrAhm`$%<+\C(R(/;P;ek#:KG:pf:"1%dR<CpE"=<,KMC93l$&ChNWV1jSEm[K;7c,OKePC77Q*Otd;4t4P2
%0\;iAbL0F/7KCi^a!'e>L:67.+!CeDW:Xs[,sjfXIdB57d7Q^]<fuTA38,d&6\QF^n'Ji#Kua%9+a&WK+IFpuhW,[&?bCG'a_W*A
%<V;Vr\IlSR#Zg40nH"-KekVTsU";=MTp(g#9m:7,#'1A0$et9$P>D=7AHqRV^-^\.r?\D1O^rfcA*EadhJJGX%Y3RjTnSM#I=!;;
%en1dKQs+eBd9slfA"N,4`M)X2IK_<N^FX`oK&T''*msSAg,:&ok/8%7D$*B1dJ5T55dab?RhqX_%qlofGRe5+puf!6]FSbUSSum4
%qna.T-NuHD#L+Wf,oX8*otC<e?7N[Ckg&Mu[Cjj7<cMlQ0e!Af/1YDV/pOaMUbJ]H1]b!'bJCbjd?5rZ4_,&MX$-$1.1rGlofBrj
%KB&al\D-W*YG;V@KSA#L&2bUrGO\Ms,V.BA2iF6Ll!X-t>MV^(ZR%!:OM/tQABoFNf&/ZJOhMX\!78fn;4>a9^7@]E!6[br2Eai'
%.8&t<)m@m1&g:UF[QZ+R.$3W8m90lb0]<A-Fl-N$F6YGd.1c$aD-A_?l_k&fZKE91#LI$cdAesDmej13J"9,(%40s@g2c#:q#q7i
%$aRb3*qU@BofMWf<Q[Jp>p2!pBZLn\QPI]Q3K$j;CKY4=e:1D!lr/Q8X?!l7IKhGFl`pJUI?6HZQ71NYWS=5I`l,lsC:]HrOE2F*
%A%V`1bN:Re.1,I;`qqb</@0m3jR,$!=BFe-X6DK9r_+26G+%qJS[6c:'f:6_iKdMibt[#CHhcS(Pr1=W,:f8?%'&.'g9jMuPd]8.
%d8hmCO1QHiS;F6?\^8;AU4]ap2X8d3RAq^ciMj(`3S8:8M.2I=Gk=P"]%4`qKP:$;KT0"iO#DUT3nbp)&RoP'.I,ppkn-Z^I3)X,
%er=EG<En(K3q\,!HRq3D/Eq^WQ!,h<o?`kX;8n!3D=9;>T,*43Psdase!T*O^Kj99FE@H:2*5@^+T[@`1`e0h'C(M?2!VXg['">o
%_h0M`b1_873SgQ@*sg+q*6M$>O@=[,Fu(.VJm=!]M!3Ab%rJ2@(ZW<O6K]BbW"sCUKU?f.$(bT!<hXE&^<2=dm',LCKt;[/4BW0q
%.d6NXZRhFhkji==WZu@[5W2q<Hh;kSLM>>N9gSBNRq6`P>S=`5(B-NjIkii=P#-k[J3mYDe26VG.4.D+,03jl+Zsr2_BO<7\3%co
%5B]P4#AV6@je9">W.@0#4D,gr&''7"K#nMqPT$SD#YUCT;cLA_>S5-R@*_d4#.ip.=:qaui3%GOcg?k%Nd-N1]]D23<ZYfimKsi*
%ju2MV0ZAm#NeK%Wl`57=aXRtq\ZU=b@VU\0G[+Z/oPUW4bja8-#JL>kghGn?k.][-^nCH+K!K8aoEq6E*gfVnS5/84KKbh>j=*>p
%WH)f0%L@Y`c*A51Zj<>BQ<MqQ"GOYioZtp;6n#-_/q3YR5J@`a`=^!eO6?+5D%0[?*E>9:lLedZR?*>_;5HMB_.&cd,@sMZK:j1o
%-kQ*mQHipA9i(5n4D'#njs]\4L%:f-ef:u)cgsJ=M;uG3h!;+(<o>")):!jSO\qp`F8FK$J(Ngr51:$dGU_@C#EJd'X[uC\Q("<s
%rPS<6H;>%H.VM)R2"12fH(];ORE2_)"<;_NT"5)nnH9=!BpUir9Uci5*N"2i[*r^o^UG)cmVQ"*%V*flK_s&C6^^]RJfq`MLGV19
%Yktl5g[VnYSI'Fa"nO:5a*4mK0@ps&s."jYl*@UEH/s'KcujT6(1[jV"\NLV(=Xlp98iXmmb5lW#(!Hp?Q]M^J6]D_'FE>DW#XK?
%$ec,ujtkR?7?B#/?Up>\J7rU]SA>/T;KiGg\RW21>^)QUE*n\Sq.gV6h9sm=c[2sp?<;co*4U?"K*qfd!m$)HHiKCT?flnq%3c]%
%V$7Kh=>BJAjg0Qo::8OVSY;YS6K'BsE`?.uD7A\k\\1(H#BSEl#kg@0)nDqLE8N+Np>iiE[%lLGFt,]>H2dRG=i1<jq*G3$DZ<#D
%^E$$])XaV9([(gAWYI?D@+\j$"EtS(=#L@.qb.]iN@R@pSH;0.o6"*,L1ifP`m^WN4!b!`Bs'LfGJj/3hb,nX]l.(Q6t\l6``fAW
%q,4a95f6s1\Hp[-8-C!?YM'D&^L*n3%JWB3`]#^VS`XO/gG21K_G=@/Gu8$?p$3_,8KXQ/EqGiLD_3'JhR_W>C+W9.+7#mE#Bbu4
%^8;5[J]qT5i"RVrbR2e&qt['iU^qB&Kc/TqqT\Y7+gE3kT3.sfZInKC:VU@p$%eT$pH92Nn#;'0eTU>e_:@fO+6]draj7I:<irWu
%XE6_"q*%:p5KGSU`E,gpd/q'sZDoItc3)M/Y#NR2jgF+;OBl"!I%D$+*-cUoU7?$/](Ua2_a'u1NSLpCd0=o.#$X?>-2@<pK@R@i
%gU!04.9\-R_5nToGK<MSm'#mq.BO<:K3DtnfrmJ!h&CI<XE7B?4t/7kb^o"nKXWO"NKKAn?mEct5Mbu1Ba<+J4hL/Z'1MAYYB-*k
%JPTCji:k\`UC$&,mtsQT7)ncFR2MI<_a0EDbrrGZ'SpmirTU_G[t3b&gJ&Cj8e2"Om`K.i]c@m;O*2i[:dGrsm"_O*B.,(*TTnLs
%l#?=L8k1\%SR/,4[;9at4_Ac,*p_MidGi6IO[5*i[Sr?CZ%)\;c!pL="gLb5+LsHsIW^6;PN.-]9n82YikcW(m-$h\k;E0^4)WVh
%`,HDYFB:)`Cb<C>M/XHhmk:0%!k].c[Q4hnFEcfOGactBa(P8_k[3YmrAOLrKD[?hEtPi(ET<VT$?[-h)"Csn]Bt!2Pm1;R'=.e>
%f==<m"$UB<Fe:hgWi*;%%=7TRo$\&I/\lk]T<:Dsj@3i9'<9&"+;[u@kYdM`J*tO/q&[<9^-250>5\;K+0XI0iNW$'50QuYlfU)h
%BA2_\m?J#>,Zql%F\<i>J&a@rM&B&4\W*h&=1J?@iK"\L.hLG"2*%u%FR#BDNu$oAXKP5aT[*64;7a8aY6Hl-/u3ReoS'^`FdR"%
%HqWtGkDRg"E,<.k!U8Cg@r:m(g*34Z,Ufj4i9(s',BHP(>?Bef!?tU4Xn7SRf`W`ZSmPeo3?uB@/>Nd.e!s'_S5dkt8qBio-D<S-
%.EQVRd,BcdldYjC$B;4??+kdqPV*9`l((t(RXo`pi9LN\MZm1!ZP.]I%]<f\o4iG*?Z\C3D.Hka#&)f)Z>2@b^0L*aA8CjZ][a1k
%Fi[T3eioQ\"W6P!lcn0H*]@"S3,I:16V*q8]5-'dfet)$oKW[S7A)^,ep*2\8%OuU43u(T_V&$AC1PctMIY`_V,F&<?LATYI%>!\
%?e5!YQ,2YY1'`W8Q-P`b1<_VM^9HQP/PRU*";l^@:-mB']-\q)9U.n-kHCm';2$Di(I?oUl)P`g)=!MYMIpdR9V(dElJ6O$l+?Q=
%Nj)j&\T:bWCr_MrFVWr<.up*7'5ph8f$H?tJ%orOLYD\F4&a_mll`c[FlJ\If%\jCBa=Qpc?c7hZ'7n/^8da9IiTICOdB-1h'Vmq
%a0s/GC8=Q[H4&qIOBj179g7sIHuPutiI$%qW%E]Mp2ec-X@c'P]l2AOP03*Y;*J'YaUjhK<RqK(&;Ud.j^H2WfiRkqe<2Z[^ud2F
%lu[D8a7KD6P#^%.`-:r,VN1>LlQ0TU\%IS:ILai&H&[egf[!4umg:PU?*B<Vra.OlfG1sP+7>TR1[C&r0N[u)l^;uJJ$E4/#Un0S
%FfB0kH06gil*'<-B`XZ`d9J9i%>d'gCi5.f<&N"@HZ$A_9J#]RWZCsgc81s5N,=KYjiuiM6g=Ra.Z!9^hf]fdn6ssHI25c<I6K`-
%cL(.had%%"PPs0orCX"(mkqJE.2Slj_Ya,PAMCUrfu6pIHFaGK4eG]r5+A0h[M6p6cNiHN=.M\0H,#B#,:N-4=P1'@7^b.H>t+G,
%S)G@!@-m5L\+AbM!k:^\.IEbB?:r%#F5,e$iakd#QTK$Z&nH,(7(UAh0DL0;M="^Wr4((i2UUJaA2eN;#O86pC=Vi?*Yug9#9kQ5
%7E9=q8(2+")&#O5ZI%!QX_k+=)$eBg<mI@)ot-9j@D\4)3<GkS\n\1Y6VPF\YRu6RVoQNHj8O5\"0Dgn2>"OO5XM3D3LW6%Op:KR
%/T%(;-%o+;;"OdhLq\<r:mtFR`OIWX]c`R$)!uY9;h'\BR5g;PF>[gO/5G)tOo^!_8>Zb;P7p=:mNj&V[WN6b(%QS[/f9iVp<;FO
%ZT>bECYq?_:.l,:/451SM1kld?iH_;4&0@W%9g%Lf;N-.b':J/&]c\2fZ5`G\K(K0D5nIhc<$\Vl%4)W:.3'DG+cd`e9I<VVLm?<
%5ZO-/oeGhE\o1C?XlJ@?HL'XeZ7sc3VB'jAU7:F(c]ns\&m)t\"C$s_4KFm4oS\k]eZ+"!,sf(qC*5[`]?4t85m-tg2Y:dgEh((2
%U..)tG<"=+j!?E<_Wd`e`6J^mWP.o_7@e!E]QJrI9iL:6EgaU>g.]'A=ln9-UR"RJ%K/GgMu%e=TFDpP0l7OgTd^i/XmmG0MU9$F
%BLN4BfA3ui-),qp9C=>G%qYc.\H;%E:QM:^crhVC,B"^X&g><k)Z"39?/*+<p"/gln(]fh'sGViU$6ktK/E7ehHm7B)T]\ZXl#Q[
%=_MZE`b_:cMB_0u8?5eYWf?n5Y3lh-C+l<Pr6-8Tl`6n(*l`:iYNBs*N8ch/:%>.#Z>J8N7GIHd4S/9,qR!$+Pi8/#mfmiRC@5g-
%,3WHrRd.!'nVDKidMG"6QZ$5!/=2^!M]7YsT`KG;=mgIGI/C"F"Y0Y1%n2cTXn^OD_S<DoE)>mO-p+DhX;.In/=5MIW))1TGgt]>
%foA,)7eeMM#PIlP4BlObNUD?b]LY1Tib#T,L-"<G(.N64ob]6:#o=J5XcA1)AD9f#=V%pZbNQ/uEA:j/rTk^1@D`+,MUS?a1pGX+
%__+h>`gnI;rFUdrn(FPjB=IYb@0W_pHH0r+GB$QW%eO<j)`)G^!HrTq^IH&t@SC&\Dgj.%?%.CdinfJg8A85&#kUZZm64SL`WWuY
%f<7C#'5B^g+f$l'n\KPTeR(lo^&@g[X?MPiL==lHpEC`j>"as+kKarUVfN=?V4JYs27IKG[=Tq5C!)qEj:Gc/CV!g#abC(toc-Og
%rMjQmf9>p4#c4Lm[XQrJ"5.m0;9lYsFbGtboIR9`ikIaR-4#H,TVL.DTJ+F>(SMF>:JcGmi[O.hqR.sRSOQjqjC<+d%-]+e1Q0OV
%cuR)r*O4p-P!Dfg(HVW:.=1VE6WH*\%s^WEO6rdQB5A0jah-EDD7b^6`Kb]BHq^R%g$m0r.;uh%CT1[G8Z3ZW&WoqAIoXsO,E)D`
%.m#<&'8WuSJgO(BiPmiEa8+LK44D79*n*JlpH'C;I$HiWr*@'B>#P8O3EgthK4aC%mU!NUFH/+DF,EcF573fI-+8-k^g8o<%T3M^
%3*\_!iZ"ZI>tEQ&FOKrN.qfQ8KHO"N.!LTRG9<*4C+2ZXl*G/9d=[EX<&=hsD:ECM7BI3ZJtbOV1pjJh-DtWt;MlUg@[t0uO]/XA
%(]!05'Zg(L@`Gqmg6>mt>tPReBOI4m1,P*seT<j^GZ6;&2?.O)$7:4)mr.+UGfV8D>7lC%8r0;'oNdYon*M^<HMmJA#)rWrmCTH6
%<tJX2F"B8*SUS-+n1pi?C-#KV'GoX%F6);2_L^.*`QZsjG2hK##0IoQ&U!m,]C&'Dl0uc4($O'O)=2"DJqOt.S-52Y=Lgl[/PPfr
%]#n`$l#rs3dj^r5]+TWpORS%^<[Go@M"<o6Zop<u@mQk4T+iko7i@f`?*ktiqCf?:@LqlLER86:mf#>SC&1,VFKa>JPpIl&:E`:I
%,GR;@f3L1.e[402'9:Y%gJb5n1f*lH(B`m+Y8Wgr8],rGFa4DCRdc4/4.g1h5,o_]KKiqZ9Qp8uCqg-+B+^f>qmgA<r+.'"pM?3e
%8giTZZ#OO4H:XfadNS\alG5Da^U^);730teRKbs!7k`J0<SXb)K^P;:9NOMI)u<L)jt;DSWHVR?EBOtc;H(H(Tt?#LQ)ZekR`/E6
%KdK-']u"=7rHN91RI>=1b`8,jPN#pIY+bA!<M=WoI_N<_bu@"ZZb'F4HnfCRGo$@6G^Lrc'N>0C4Jb=3g:<#[eI2lpoIt-:$i+BO
%J>oqA5Vs2%_enBN9$GGJ`P+][,:[)<I+5JhLb51m);.`dd(4#IJS$m38JG@#[+#g>7*3fMfPMD:;hORf(I,6-?qM@:+uX.[Ii+Uq
%DGY"-JOVW'YN,*ob7QCRl9:i60m,p0XYL&GUlKsRbsa/5#-:-%=6h_%b?Ra"PgN$f_jn?#R%J7knoo?=8JdbV+ZVfpe-U9.R%e4.
%jLEDG!R6S13#InIa38\?_c^4?.-jE!p0AbQ4LF^CpUU47W?.j,FEq\C*i`\>3HD9bCp6Mi0k%78JlQ5D"IhZYT\8a\fNsh)V<E^(
%WiMY'-0=aj.et7)FZa1*AJI\HlU#O,$GKr*?TlY?<WI)Ki`Gbc?S@YD`a=.&:2pFFD_Ap@ZP()fL6>\=>'R5J[s1DS3dcM>]R>@2
%J@=2_0rgWPjA=e9+`RFND'HrVf/)uOSTB4mN3(u<MW%Td31hRiq.co_o.NJj("ioA/MIFb-$B;h<k_#eO'ItR2:P:d!jh\Y1m=7=
%)N@.]/b<!o"G?&qWi^qV1Q$ddjO$/b<182h&-k.)@26<rj7UKZ0>(A$_71%&4aB3O@'1uLYa3Ds/Up+A[gUZKq$!mi]V'H1<FP;5
%EWGbg]'jqQ0?@0`d>bm+Zri^jPFr<@]N^ICZ7emhEp&KI9^_53qIn"KSe^ipZCLa4cFZ3e1p?$3Y$o4T[(6qI2jaZShafg6&lSEd
%,)D'HXJ8"liF6CrI4h!l:aE',.8?Bs'BDj#52Zi/YIY.I)PD)!KuVq`W(dEeSd$.dLpr?D;STp<4"uDX;I:==)4fY<<)jp$9\.1O
%V@BZ4eh,APEZI>alj*ZPgCP+6(3[:4J=.^9W0?Ahfjl0@V'moYT\CY`,E6)mD-Sq21Rj#W*=-qjMjHA$rqrp/7DffQ:#K,6_Dts4
%h6p[0a"m:5$lC@56)co[;X>"Z8rLOOcW*!&/>B)AL.qtIlLj>Y=Gb/m)I$iL2)_+fVUu<3hL4HGb&gW]`kDioWrK@b_<0\qgs=;Z
%>JbR.KPaa#.Vj95MlU!j#da?4lrH%k#t=kaafOH]Q3i"D#d2d\2.*PLA^f@1!0HMX]K6+GQlA3SE\1s0"7!?=gK[#,nb>).*?3gS
%<3h3_o(SR*=#^V>`geoP[$som3TI,B*a+TWS)r,\h/tMa`uV8WfrN[#:(7ZZ[Nk%#MV39>2gD6a)Kb`a&RH0WimG?9fXbkqERp\H
%'7.7O.:lL%%\\WD^`n$DIFh:SH@nuX09.$U5kOuRA*:"qG*t&LFr>LAZ;2"=^^/$K3/9ZSL34.;rba?c0^>[!Q4i#.<HU=#EI(f4
%q_&hucC/8TU=3V)kH>>F9or22'l#Jlp(R5#NGM_SP!I@Tc"L3%_;.lZk7I=2f_PG6[kln>=_1/:&ZD-gXr?Kh^,^Up<ljON)G%/k
%QruQl%BpRN_qmhXD_-\4C2+7aKo+;VVLj!Mgs=X72`9"m9\W`BrZPZ>HuO>2<2ORs6QJ^.lQ$:>]#;52=n2o-Z=ff[h)")$ZbIS6
%YtlI.1L#Bun((?k^pTc"4K,r@>+FER:S^a6dYJXkJ_<Ntn6/VdpN7aTNZj4Bf[+)&SLHQa/MPj#Te6PS+Sp+@fng5*Vb>%UB,/Y"
%IZ)\O'1UYh'\]u1G>3;,!+joVQHi$'r1I_l;jdaJIT&%U+.p(?p(TK'0P%+Lb\.e6\!o0gR[pUGJ!KiE.mK3^l@,XnLifHupFRO[
%#]dT0]W#(`7?boELH]%p^\emRBF.=..^QC*fCZ29iK,LX%.+>$M&m4kTO0-=3%W639F>=OZ@'RYPZif'(R6r^TMLn9$L0mJVi#Q)
%)X<NTPrR>Nel'n>jE#k0.?]6S3jq-8!KG%.T8[>Q'm:Pf<.2fhkRN7GGq[ZR[+80tm"gKp/2JD%2/R23L=4#gfE0fK>LTu:!nP)%
%=SGW<aEn0/GZ,a]>#2,CVQp<O^+Q!IZc&6)Ssr%`;+#2?h'!FhZi[K>%/K32%t3GMFO#/[\Iaq$cVPR/Hl9!;nNHUCI4s;XJ%Rq7
%:>,@7C]-W'OQ-*?G[#ae+ir2m^b/hYrC3I^b,:W7b3nrulY,7:q926N))^cC@qGr;N.i%ro>H"*jiY6):aEOhG0i8+B-MoZ4Yr#0
%F/a`[)7aQADl`VYS_2kNf#900Ls`R]9306=XrCip#<D`H[j0ltV(_\MbIpN!@caPRXC\Z?*f*2JiS4LOHHb"_[jL\85Sg)KjPY(?
%6!;IU`<[>CEm-+RM,Y80>h+:Oq,+$^4(ZQiY9!9/R1[$W@:@)j[<(Gt+V+25HQCF\c2,TFI;d^e\aYbV^F_\AlZDo@!7t/`6uN7l
%*/eAl#?k:JBf'^=2FOtj^+W,9?`AAajR*+$U3df![k_":d<h.g3*M0PRSjt=:tg]XL/qP[<P4m_<T.s\BQmn0b/Y6Lc#nMgeuLhY
%kF!m;Og0RYJbJ&3)\[As78+?"\5aHd,Z6(>Eie44TD3F-;\\N#,f+r?&dGcd:qTjqZ"!HE<dZC1ITTSHD!BB(Ue@MlR6K#>!U>S`
%a^*c;T]c7*8J2AIb;XAf#Y=94r'pBk6+RKdpM[J<ns4Idg\Y-o72@(\7HX4m3j3H<>2'%A8gU1o8TDsSgVAj+%1m))8<TTJhH-,o
%l8r<OWMF`E.d47@$:tfs"5<L>2:S@<TTd7@b;P7neF-nE)Xb]!26)M/\g)m*-7L5d680@4A1-9X%##RfI=%SE#_3nZg*+98U>cZ]
%^OE<.=bQ4fWF+@bW5B.3^g0F$HD%$GrY=fV(QJ_-i1G-q:Z\KE`kL<Y9Z`M.2F$'*:mq+u4N1j6+0FrL@mfIb6HMMfK-8<DJ2./F
%_hYCP`?Q%F===^$iMVZ6Z<Z!P6(f@aF#)=?GG."\Jt+iT/84.k\Vm-JrpXKL?N.X3GSE"*.6efTlgfHoIW'FE;9%0dPI%,t-)"+)
%Km,KU3fjN62j*#:3jT48#j]4,*R^LLZ'Fg>&DE+"1(fQfmh.%@[[TSu.LjPW`U-Z)X$Z1hDTUTQ*kLt7Ps)]@e5^&+Jq_^u-sN:j
%]'okDf6:mj@l(lhdhY1YWsM[W"[3?!YIcq\Zd?A3kTIGjaKbr:$b!02,saP.7=$GGd[qTH>%F<KHbD(k#//a^'Nu1b[rmT;5K2lh
%Kg&8q[CXDuI\SETH-r5&gap%#YrQd4#i[Mp,jV^\c@ad2hsImfF_er%mCAs[_q$>[\$;n6q'=a];#]^QDd_bgIYQR#W1S4e:[%c;
%hZqDL.r?)f+q!n_XIX)Y6Z*WL$Z;qf7qX\Ho?ah@pC["s(%\2s\biOlT@!T9_TkGFX=BmQVEg(<;(T@CF@+ZIf4>ia?Qh]*0"7kK
%]7n0<Lr?ADQ<HRo$JVYAMFL5S>8.Nt`pFl&mM^B%C!^J_hEj4_+kM&.$K&O('NQU:^LsUPM46)P#)+TJOd-i2&.0B[olap>bmH!-
%mC^f6njZ"0q?Edr\BS1\XK1dD`leoH!qin%$J,EOd>rt&b,4%,/_qYMqtl215mp!j7gdTk:KFDg9[+?Ll<m_jW0iQPo%q^5ck215
%k0KI<a+3oFYL!IA,BU+I:j5=`7E=NT!])%+9NQqhZtJh!)lne*eVX7`<pPNGcdo!M:Zd<E_%NdeAo_JLrIcosV8__'dBD$`QpJR7
%/na-^XA<M`K=9Bb39D\iY$r`GVs4\0Hr_<fjbh_gr;quh87GIn3RQ[ZBL$S-Q%k1r.5YH926Z7MTquj3K]AYQP^E.^U(#ZB_>ftb
%g8(MFAG%)?_*p$C/Dko9FRPLs2$>%J.d$rU/^hBS&Q`$(^7K=)3)s$1OXDObh$-A.n`d;mI3<D?QWL+9_N%$7%F&G>O\Gt!\\7pa
%SNoa7<Ps^+VF#,7Zakfbp$#1,8l-/j@R_3\fJ#G/k7X*hO@tu%ESW-Tbqj<$ZHuDtSgd*)!L&@^.1$Roo<&nmk!1peM6WPOGGha_
%c7uE77kTIW)JB>cYPPB'e@lGei9nqK;Mj@]Z"Gh7=M<Moa@(,Gg(AcL+GsHbmGiXp)ZpWbr25=IiCJDMLP$;NSB"RQoBKZ%EJmgM
%gd^Z=VHP2Y,V=n_;h2Y7`m8l<p<+FhF^2T+rEQi?U6"RQFLB%o^7b5PYu`%G)g&JP)=,c1e"c-Rr;V%S)dUT4.>uF$m2ur<M*>^`
%bL<]O'9`-BmebamEkT1PlZHZarep'Z:p$0J#O"cWYE1YC\%bp9RTLH`3NmQEVGi'.F)//+*h2KNU=JIFj]!_3#!r-(H1sCKJeV2r
%knR_JQl6Dn#d<mQ!7`FEWjB=b*/aK1V9Y>"\!^u4-#QZcZK<rdAg;sKV/p&LIb9h4s3@dG>0QPhY&^p`TjXU#:EdSlEs1]%/]r)+
%kFOkeK_"2Udcj?Nb4>/\Q5HG-jLFJG3hDe,'.O3cfVR*_E(>MQe4ZJ@:a:<M$Kg\giCn>FNrSKE4IT<r?K3/u#5oCO\M1--C3XGp
%X*=)oW2[)QoXq5:on\b;-`tSj<Ji&;I[!;L&<nn05Z:TQ!4DWuX]hmdpbIW.CZgbf\9tIq)0-&k&Z\t,foCgB@%_lOobPPn6gX86
%PnqjUK'$"g[;]:Q\QnV@YPq!+%D*)/Lccnp^74?tG7"VT1J3Z#EFQ;3\hQOsrmAD*=4,TiN[T'bQN\ILVFIVDqN_b3+B(\M"m\\P
%I!;=ECfu(7e&GoDE0hV0iN(1']$XuP8Mcm;Jld?=W^A]pb$%/.q(VfX+Epb"g/i5jAb&#=od45^X2$n.!8U3gR(C`a1.p2#Um7u^
%@jrF!C7=X=)UhW-PXN"X`m6]jc>)"#7r1XP.\tV0q:HFH<A9oOr/C#,$.YPq1uG*R&g[!kq9Pm#9f)l\4nh\Jl.#1KAu,D0'77t<
%[ld(AQFlF=/ukhc*P#(O>mfT/UeG'o#SfaZ-HII+Jd;Nk/H6Z<#5I0\V)W@i'*lVM&Jg.`a%C5WP\q4%eUa0'Bgn^6#[+n-b3*pt
%nRn0(/<5l(_lU22O/#6L9E?[4C_SN@!R;ZWf&$NkI%GaUrq]u@=c;<Z4]F4Mg,-2p\8G=M0C[HaLZIZ@BAu^:[+>t<pZW2!jiArd
%G;VBdLXdqjO/Dg]Z:ggV&"S;=k;#"V<nr##&rn@-F&ehQ[3"_\KrpHka5H2`-YVu#1$G4f.OF$JFWGMQp\IOeJ<\!NF1]&qqQa;Y
%ml&&J*d8ON>DXW8;<kMCPj)?K?nl=mXff!M`/o:tY1:6Of6FfgD(q?hlSQ0B$R-kWgR=]l4Ll2f0GF;FQJn,?"Zn7%,?R*q8S8Rs
%5@SY&.modNB!!%W[SW/2G8im-8<nOLn%4s\BD?A2)s?i8%eK2oaD\L:l=YF%`,Jr!OA+M;(UDXZcV"b#mfRd8)YK/5>dlQI_%hng
%"]cKUf$G2UnG![nm%<c^[ibWu/L-Y-<>D=Sr/[M(^kQmCSubot50,bI7@M5/W*j2G-ZJW((V]p[F8kruqu5TS%\?9_!jo;^PnS*/
%+'qp,$k+PD%^-uoYiACn$mmD#gM>MMqW4&[em8M^]cBfTM#LsjLBZ>eW4S=/PrY!Vj[Z5MneenIenZ!-*G8]=$+Y8WHeq0O0>u_D
%XqS!%U]o%]L.@fW@EVt@]Abo_IS_F$b*H*`48<i5N&KRL#)F9F]XYJ=/GUGX9Q0bZ-ea=fn!NkD=6s'uKc8O2fXk^DrSbNU%(9!d
%ECLNMQm;Qu2K^dA7jQ(F>D`npFR(YV_APL'cOXOe#I1aF@I[00(1BoS`p[K6NDn_rkkVL9/EJ-Dn=C,*rBfg=M'ZH1(=4m0GjJ+2
%FbeNEk[W1*[)G7e;hRO4.)PetTce&T($k]6`A'$nSTj2LOn#/JO0X\X=G/9%7lsu%cQ!d7I:O,>Gd\UVasoS<dR>A\7<:qqs,]GM
%Oc*CuWK5L.k@"/mqZMt'O'ZF'^@sW?:FkTiJ=mSO4tABoAp'[U"V0W"BY*D/6Cpr7TFS&C`(nZcYuKQ!q9$0s+"'Y)*e*DcFG=sf
%N0:YH#lkHrKQA_E[F_1C2T0TG;5?(UECtu?I,toqaTIn//@$j`%4<\?,t2TFk[TQm,q;T];;ZPe3u,EN$cD##\$mCsS3+,)5]0oW
%VL]]!.bCKV+#V,uokT9\RZ0n#qgnHX;$im,->nSQ)7tb]7hjGK]"9j0rAEa<p't:FQ(BG(ft.[`.l%fj_Q?/$Vp9U"I,2;Z77-(5
%a/2(!Klee;#;Qf2p$VB7FU*-)dh=]J\+LiUS8@?X@X$V7pOfuV8&_BC4\m%b>Lc%Ib6nYmMCOVV*);Gh6+Yjc$>P4k:6i2ZKZtq,
%llO@(#J-ts8P'PE$WUBq"9Ak!H:/U#g^8M.9I"&r%^*;jTl!*h5jss+$$$[>Bk5QBcsA+Ik*Na'4&d@Fj^OtL[_iQT^j=!iUAZOL
%',3(I&0([)!u-;ho6KDYCFWj=a&l/ar<R'VIM1,s_%\a>,7s/-9HaZM^:e:''5s7hXLt6UTUG_XdSn%A>0dt[/:,OPOk^\fH`t._
%TeIQ!PG)1H:*&'kEb@asXa^=N@E\+;GE#(`V/3<ZD(B;ADLkU+l=X"Chqta0.8+s_m%%HNIi'1d-^PY&:h$@B\ss0A4"(E!+e#_n
%BeC^OE2El?d!?)cg#bJYD>TZopsd(/PT$H#`e@dbm.U6tLBtbUnA>.Go@i+@BYGZDOflkl^4U6Xrs!R0d,?cSg,kl58qQWiiL1g:
%YChA$^7.?k4Rk.@,%PGfG?rAM@m<"r8!5qhZ.sarhg]n2LYNhmmjXm&EnR.D;+J"Pa\]-9-+`eW[`s40^!DAg*XWg?*gR@R<h^L'
%^*8K1Le\ITPNpceROEn:^($WYA1raJl\k%bUE%_E,@^?"@!+G<[;/N,hf+MJmS@/9YPIqBoBODmY[65SY&55m<XMc:baL4s85g+p
%/%M[59D*TkgN\?6(;p\I_g"4R1rh#5dh*Rp@PqB:%)'mGYO;klKrk,QLSa(7<u'n7So-F\jVJcE3X%[bj?2i9id=#@m7s;qTU6Mf
%6#&l-=,Z;*]/a@db1?M7>=nG&E5>U[V&]UXJ@o@dm,P9,)//#;Z-&$2k""'U6l$i[a.D`Oa9u6a!]h=@UJ4"!_2PnK?&,LS&QFUa
%^;.05cU9->mSN0CY8r'bZe@ZOqBT"I=gQ&:+<UK*YRjjq0_td>C3la*"6W&5(4p"+$2V116n*qq+@N9rVh[;G3ab/Hq#7in$0Y3#
%iObEOkYZ9urn[Sq(-[l.8J7K5qWU4R6gabmp,ntoA?`[;G$=@m&#1jV`O)]*e_)Fl-=`'"<B\*,[.:Y%f];j#lfQtt4jE#LL`rDi
%Z0pLUps+&WU%B$D@7*ff@kqh9QE5o%<ED"a,"A:YmPVEs79\eYYHf'aoG\)#ld>:?otYGqd//_nO@!bm']k,Gl&(F!:kTQJ[etL@
%I#HuNd!hX.ab_t=[F?cB3#)M&.lc?eU:^,3D\pPlm8`Gn;H:#(&1l.^de:jdqf4J"T+b_,TnL'CJ6Ca;=F8N?^b)YH2'_6.a@;PG
%.q[U*=pp%S)$;pDAT(;9UO2?dAm^?VkEF:`BQ#n43SX34nnf1!$Ha]p$b^FQBA%]5pW4Z0SZ><0.BitdjXHcbOI;E:L$:aE6JR+U
%;c9'9bfKs_h/=L[oZ2&ZVNRA:DHK;)C#Y0uBD0\?>*Dj8#(>s@Jk>%OH-Nr:7_JpjfhSEAp<k>b[e+Akr&=ZAhhF(M>7p)VNmT8r
%<kG;kIO2%3TXF8c4nNq$\t[8UE"t@X\*@?g]c`iS(B010g."hBqLJe&9qe.h%MoO8Xuc>c<H3L8nk0;5^0E@.,(%?5=2rsjDt?Pu
%aUGSq.,0$)P.s<)Tj#N`jT&2mT'R^K``fKQ^l-(;C:D3m?L2t$(iiG9H>&1"4C!^n<+F3d:t34bWk1pTpboTghW8[=ObZ:*I)kB3
%fh$a,s7%ID4(a;MIJ>_!&l^REO*?1ZSEK3ek7/i!2g:D'c2<e=A6!U$3i6%h]U0Jc;Z[Q\V'sG&3QFV4iJY.0T`!M>LJr@EXeHgO
%q,/6&k4ek=T2E?VF^opkHTs:1G=4*+**Yj-p!-U.K^,GH?INU,UcP[qZ"LMEO4B,"\[anN^&`][ERtg`+-'u'7ZL/tc4pE$]BhV]
%M7^<5fC9)Ps))3D@"f-pg>:E,35\PWm@mV=Q]$ZOX7WrI6<2#E0<f`foUI6)+M59lNj:]Hf1QpHYq>nd-KUs0.9,$J,#W"CrPa-T
%q:L&^+90l@rSrD-hu<=fIfJm9p2Bru^\o8#s5W#8L]?u?J,%WFr9(imjTG:is7mc9ko]qlJ,Y6'qqqG65QC-.r6p/lLO]-?+91gP
%rkj6`ci<L,s7--bpg68bl(A"G5Q0dFps9!8j$3KLs7-+(U-[+U^\bWmpHSTeJ,;2)+0COKV>~>
%AI9_PrivateDataEnd
